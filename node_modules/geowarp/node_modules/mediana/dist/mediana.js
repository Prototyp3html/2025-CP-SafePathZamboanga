(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

const clean = require("./clean.js");

function absolute(n) {
  n = clean(n);
  if (n[0] === "-") return n.substring(1);
  else return n;
}

module.exports = absolute;
module.exports.default = absolute;

},{"./clean.js":3}],2:[function(require,module,exports){
"use strict";

const compare_positive = require("./compare_positive.js");
const clean = require("./clean.js");
const long_addition = require("./long_addition.js");
const long_subtraction = require("./long_subtraction.js");
const is_infinity = require("./is_infinity.js");

function add(a, b, { infinity_minus_infinity = "NaN" } = {}) {
  a = clean(a);
  b = clean(b);

  const apos = a[0] !== "-";
  const bpos = b[0] !== "-";

  const aneg = !apos;
  const bneg = !bpos;

  const ainf = is_infinity(a);
  const binf = is_infinity(b);

  if (ainf && binf) {
    if (apos && bpos) return "Infinity";
    else if (aneg & bneg) return "-Infinity";
    else return infinity_minus_infinity;
  } else if (ainf) {
    if (apos) return "Infinity";
    else return "-Infinity";
  } else if (binf) {
    if (bpos) return "Infinity";
    else return "-Infinity";
  } else if (apos && bpos) {
    return long_addition(a, b);
  } else if (aneg && bneg) {
    return "-" + long_addition(a.substring(1), b.substring(1));
  } else if (aneg && bpos) {
    a = a.substring(1);
    switch (compare_positive(a, b)) {
      case "=":
        return "0";
      case "<":
        return long_subtraction(b, a);
      case ">":
        return "-" + long_subtraction(a, b);
    }
  } else if (apos && !bpos) {
    b = b.substring(1);
    switch (compare_positive(a, b)) {
      case "=":
        return "0";
      case "<":
        return "-" + long_subtraction(b, a);
      case ">":
        return long_subtraction(a, b);
    }
  }
}

module.exports = add;
module.exports.default = add;

},{"./clean.js":3,"./compare_positive.js":4,"./is_infinity.js":9,"./long_addition.js":10,"./long_subtraction.js":12}],3:[function(require,module,exports){
"use strict";

const expand = require("./expand.js");

module.exports = function clean(n) {
  // remove + from beginning
  if (n[0] === "+") n = n.substring(1);

  n = expand(n);

  // remove extra zero in front
  // 03938.123 => 3938.123
  n = n.replace(/^0+(?=\d)/, "");

  // remove extra zero at end
  if (n.includes(".")) n = n.replace(/\.?0+$/, "");

  // should improve this, so it identifies zero earlier
  if (n === "") n = "0";

  if (n === "-0") n = "0";

  return n;
};

},{"./expand.js":8}],4:[function(require,module,exports){
"use strict";

// given:
//  - a and b are positive numbers
//  - a and b have been cleaned (i.e. no + or leading zeros)
function compare_positive(a, b) {
  const alen = a.length;
  const blen = b.length;

  const aidx = a.indexOf(".");
  const bidx = b.indexOf(".");

  // basically where would the dot be
  // if we add a dot at the end of integers
  // like 123.
  const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
  const b_adjusted_dot_index = bidx === -1 ? blen : bidx;

  // how much you need to shift the second number
  // to line up the decimal with the first
  //        0.12345
  //    12345.0

  const offset = a_adjusted_dot_index - b_adjusted_dot_index;

  let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);

  let right = Math.max(alen - a_adjusted_dot_index, blen - b_adjusted_dot_index);

  let aoffset = offset < 0 ? -1 * offset : 0;
  let boffset = offset <= 0 ? 0 : offset;

  let imax = left + 1 + right - 1; // -1 for zero-index

  let i = 0;
  while (i < imax) {
    const ai = i - aoffset;
    const achar = ai === a_adjusted_dot_index ? "." : a[ai] || "0";
    const bi = i - boffset;
    const bchar = bi === b_adjusted_dot_index ? "." : b[bi] || "0";
    if (achar !== bchar) {
      if (achar > bchar) return ">";
      else if (achar < bchar) return "<";
    }
    i++;
  }

  return "=";
}

module.exports = compare_positive;
module.exports.default = compare_positive;

},{}],5:[function(require,module,exports){
"use strict";

// Internet Explorer doesn't support Number.MAX_SAFE_INTEGER
// so we just define the constant ourselves
const MAX_SAFE_INTEGER = 9007199254740991;

module.exports = { MAX_SAFE_INTEGER };

},{}],6:[function(require,module,exports){
"use strict";

const { MAX_SAFE_INTEGER } = require("./max_safe_integer.js")

// the greatest number of digits an integer can have
// and be guaranteed to be stored safely as a floating point.
// subtract 1 because MAX_SAFE_INTEGER isn't all 9's
const MAX_SAFE_INTEGER_LENGTH = MAX_SAFE_INTEGER.toString().length - 1;

module.exports = { MAX_SAFE_INTEGER_LENGTH };

},{"./max_safe_integer.js":5}],7:[function(require,module,exports){
"use strict";

const absolute = require("./absolute.js");
const clean = require("./clean.js");
const is_infinity = require("./is_infinity.js");
const long_division = require("./long_division.js");

/**
 * @name divide
 * @param {String} dividend
 * @param {String} divisor
 * @param {Object} options
 * @param {Number} options.max_decimal_digits
 * @param {Boolean} options.ellipsis
 * @returns {String} - quotient
 */
function divide(dividend, divisor, options) {
  dividend = clean(dividend);
  divisor = clean(divisor);

  const dividend_is_positive = dividend[0] !== "-";
  const divisor_is_positive = divisor[0] !== "-";

  const dividend_is_infinity = is_infinity(dividend);
  const divisor_is_infinity = is_infinity(divisor);

  if (dividend_is_infinity || divisor_is_infinity) {
    if (dividend_is_positive == divisor_is_positive) {
      return "Infinity";
    } else {
      return "-Infinity";
    }
  }

  if (divisor === "0") throw new Error("[preciso] division by zero");

  // sometimes dividend can be cleaned to ""
  if (dividend === "" || dividend === "0") return "0";

  const out_sign = dividend_is_positive !== divisor_is_positive ? "-" : "";

  if (!dividend_is_positive) dividend = absolute(dividend);
  if (!divisor_is_positive) divisor = absolute(divisor);

  return out_sign + long_division(dividend, divisor, options);
}

module.exports = divide;
module.exports.default = divide;

},{"./absolute.js":1,"./clean.js":3,"./is_infinity.js":9,"./long_division.js":11}],8:[function(require,module,exports){
"use strict";

// convert exponential notation to normal string
// not optimized yet and no support for big numbers
function expand(n) {
  // remove + from beginning
  if (n[0] === "+") n = n.substring(1);

  const sign = n[0] === "-" ? "-" : "";
  if (sign === "-") n = n.substring(1);

  const index_of_e = n.indexOf("e");

  // number not in exponential notation
  if (index_of_e === -1) return sign + n;

  let index_of_dot = n.indexOf(".");

  // if number doesn't include a period dot
  // then just assume it at the end
  // such that 3e4 has index of dot at 1
  if (index_of_dot === -1) index_of_dot = index_of_e;

  const shift = Number(n.substring(index_of_e + 1));

  // remove old decimal place
  const base = n.substring(0, index_of_e).replace(".", "");

  // normalize shift to start of the string at index zero
  const normshift = index_of_dot + shift;

  const baselen = base.length;

  if (normshift >= baselen) {
    const zct = normshift - baselen;
    let result = base;
    for (let i = 0; i < zct; i++) result += "0";
    return sign + result;
  } else if (normshift < 0) {
    // need to add zeros in decimal places
    let result = "0.";
    for (let i = 0; i > normshift; i--) result += "0";
    result += base;
    return sign + result;
  } else {
    // shifting within the base
    return sign + base.substring(0, normshift) + "." + base.substring(normshift);
  }
}

module.exports = expand;
module.exports.default = expand;

},{}],9:[function(require,module,exports){
"use strict";

function is_infinity(n) {
  return !!n.match(/^(|-|\+)inf(inity)?$/i);
}

module.exports = is_infinity;
module.exports.default = is_infinity;

},{}],10:[function(require,module,exports){
"use strict";

const { MAX_SAFE_INTEGER_LENGTH } = require("./constants/max_safe_integer_length.js");

// assumes both numbers are positive numbers
function long_addition(a, b) {
  const alen = a.length;
  const blen = b.length;

  const aidx = a.indexOf(".");
  const bidx = b.indexOf(".");

  // basically where would the dot be
  // if we add a dot at the end of integers
  // like 123.
  const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
  const b_adjusted_dot_index = bidx === -1 ? blen : bidx;

  // just use floating point arithmetic for small integers
  if (aidx === -1 && bidx === -1 && alen < MAX_SAFE_INTEGER_LENGTH && blen < MAX_SAFE_INTEGER_LENGTH) {
    return (Number(a) + Number(b)).toFixed();
  }

  // how much you need to shift the second number
  // to line up the decimal with the first
  //        0.12345
  //    12345.0

  const offset = a_adjusted_dot_index - b_adjusted_dot_index;

  let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);

  let right = Math.max(alen - a_adjusted_dot_index - 1, blen - b_adjusted_dot_index - 1);

  let aoffset = offset < 0 ? -1 * offset : 0;
  let boffset = offset <= 0 ? 0 : offset;

  let imax = left + 1 + right - 1; // -1 for zero-index

  let result = "";

  let carried = 0;

  // to the right of the period
  //        0.12345
  //    12345.0
  let i = imax;
  if (right > 0) {
    while (i > imax - right) {
      const achar = a[i - aoffset] || "0";
      const bchar = b[i - boffset] || "0";
      let n = Number(achar) + Number(bchar) + carried;
      if (n >= 10) {
        n -= 10;
        carried = 1;
      } else {
        carried = 0;
      }
      if (result !== "" || n !== 0) {
        result = n + result;
      }
      i--;
    }
    if (result) result = "." + result;
    i--; // substract 1 for dot
  }

  if (left > 0) {
    while (i >= 0) {
      const achar = a[i - aoffset] || "0";
      const bchar = b[i - boffset] || "0";
      let n = Number(achar) + Number(bchar) + carried;
      if (n >= 10) {
        n -= 10;
        carried = 1;
      } else {
        carried = 0;
      }
      result = n + result;
      i--;
    }
  }

  if (carried === 1) {
    result = carried + result;
  }

  if (result[0] === ".") result = "0" + result;

  return result;
}

module.exports = long_addition;
module.exports.default = long_addition;

},{"./constants/max_safe_integer_length.js":6}],11:[function(require,module,exports){
"use strict";

const compare_positive = require("./compare_positive.js");
const add = require("./add.js");
const subtract = require("./subtract.js");
const round_last_decimal = require("./round_last_decimal.js");

// given dividend and divisor are positive numberical strings
function long_division(dividend, divisor, { format = "string", max_decimal_digits = 100, ellipsis = false } = {}) {
  // remove unnecessary starting zeros
  // ex: 0.5 => .5
  if (dividend[0] === "0") dividend = dividend.substring(1);
  if (divisor[0] === "0") divisor = divisor.substring(1);

  const dividend_index_of_dot = dividend.indexOf(".");
  const divisor_index_of_dot = divisor.indexOf(".");

  const adjusted_dividend_index_of_dot = dividend_index_of_dot === -1 ? dividend.length : dividend_index_of_dot;
  const divisor_num_decimal_places = divisor_index_of_dot === -1 ? 0 : divisor.length - 1 - divisor_index_of_dot;

  // whether the result has a repeating decimal
  // e.g. 1/3 is repeating as in "0.333..."
  let repeating = false;

  // remove decimals
  dividend = dividend.replace(/\./, "");
  divisor = divisor.replace(/\./, "");

  const dividend_length = dividend.length;

  let current = "";
  let quotient = "";
  let comparison;
  let offset = -1 * divisor_num_decimal_places;
  let skip = 0;
  for (let i = 0; i < dividend_length; i++) {
    const char = dividend[i];

    current += char;

    comparison = compare_positive(current, divisor);

    if (comparison === ">") {
      // same as const times = Math.floor(current / divisor);
      // but without floating point problems
      let times = 1;
      let product = add(divisor, divisor);
      let passed_product = divisor;
      while (compare_positive(product, current) !== ">") {
        times++;
        passed_product = product;
        product = add(product, divisor);
      }
      times = times.toString();

      if (quotient !== "") {
        for (let i = times.length; i <= skip; i++) quotient += "0";
      }
      quotient += times; // string concatentation

      current = subtract(current, passed_product);

      skip = 0;
    } else if (comparison === "<") {
      if (quotient === "") {
        offset++;
      }
      skip++;

      // outside greater than inside
      continue;
    } else if (comparison === "=") {
      if (quotient !== "") {
        for (let i = 0; i < skip; i++) quotient += "0";
      }
      quotient += "1";
      current = "0";
      skip = 0;
    }
  }

  if (current.match(/^0+$/g)) {
    if (comparison === "<") {
      quotient += current.substring(0, current.length - 1);
    }
  } else {
    const previous = {};

    // keep dividing until we have an answer
    // figure out current place of decimal number
    const idot = adjusted_dividend_index_of_dot - offset;
    const qlen = quotient.length;
    // add 1 extra for rounding purposes
    const imax = idot - qlen + max_decimal_digits + 1;

    // reset skip if just "" so far because don't want to count 0 in 0.
    if (quotient === "") {
      skip = 0;
    }

    for (let i = 0; i < imax; i++) {
      current += "0";
      if (ellipsis) {
        if (current in previous) {
          previous[current]++;
          if (previous[current] > 3) {
            quotient += "...";
            repeating = true;
            break;
          }
        } else {
          previous[current] = 1;
        }
      }
      const comparison = compare_positive(current, divisor);

      if (comparison === ">") {
        // inside greater than outside

        // how many times the divisor goes into the current
        let times = 1;
        let product = add(divisor, divisor);
        let passed_product = divisor;
        while (compare_positive(product, current) !== ">") {
          times++;
          passed_product = product;
          product = add(product, divisor);
        }

        times = times.toString();

        // pad left zeros
        for (let i = times.length; i <= skip; i++) quotient += "0";
        quotient += times; // string concatentation
        current = subtract(current, passed_product);

        if (current === "0") {
          break;
        }

        skip = 0;
      } else if (comparison === "<") {
        // outside greater than inside
        skip++;
        continue;
      } else if (comparison === "=") {
        // fill in previous with zeros
        for (let i = 0; i < skip; i++) quotient += "0";
        quotient += "1";
        skip = 0;
        break;
      }
    }
  }

  // reinsert decimal place

  const idot = adjusted_dividend_index_of_dot - offset;
  const qlen = quotient.length;

  let num_decimals;

  if (idot === qlen) {
    // integer number so don't do anything
    num_decimals = 0;
  } else if (idot < 0) {
    quotient = "0." + "0".repeat(Math.abs(idot)) + quotient;
    num_decimals = qlen - idot; // idot is negative, so adding
  } else if (idot > qlen) {
    // add more zeros to integer
    for (let i = qlen; i < idot; i++) quotient += "0";
    num_decimals = 0;
  } else if (idot < qlen) {
    quotient = quotient.substring(0, idot) + "." + quotient.substring(idot);
    num_decimals = qlen - idot;
  } else if (idot === 0) {
    quotient = "0." + quotient;
    num_decimals = qlen;
  }

  // remove zeros from front
  // 03938.123 => 3938.123
  quotient = quotient.replace(/^0+/, "");

  // remove extra zeros from the end
  quotient = quotient.replace(/\.\d+0+$/, "");

  const extra_decimals = num_decimals - max_decimal_digits;

  // round if necessary
  if (!repeating) {
    if (extra_decimals > 0) {
      quotient = round_last_decimal(quotient.substring(0, quotient.length - extra_decimals + 1));
    }
  }

  if (quotient[0] === ".") quotient = "0" + quotient;

  if (format === "object") {
    return { quotient, extra_decimals };
  } else {
    return quotient;
  }
}

module.exports = long_division;
module.exports.default = long_division;

},{"./add.js":2,"./compare_positive.js":4,"./round_last_decimal.js":13,"./subtract.js":14}],12:[function(require,module,exports){
"use strict";

// const lookup = {};
// const vals = [undefined, 0, 1, 2, 3, 4, 5, 6, 8, 9];
// vals.forEach(top => {
//   lookup[top] = {};
//   vals.forEach(bottom => {
//     lookup[top][bottom] = (top || 0) - (bottom || 0);
//   })
// });

const { MAX_SAFE_INTEGER_LENGTH } = require("./constants/max_safe_integer_length.js");

// assumes (1) both a and b are positive numbers
// and (2) a is larger than b
function long_subtraction(a, b) {
  const alen = a.length;
  const blen = b.length;

  const aidx = a.indexOf(".");
  const bidx = b.indexOf(".");

  // basically where would the dot be
  // if we add a dot at the end of integers
  // like 123.
  const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
  const b_adjusted_dot_index = bidx === -1 ? blen : bidx;
  // console.log({a_adjusted_dot_index, b_adjusted_dot_index});

  // how much you need to shift the second number
  // to line up the decimal with the first
  //        0.12345
  //    12345.0

  // just use floating point arithmetic for small integers
  if (aidx === -1 && bidx === -1 && alen < MAX_SAFE_INTEGER_LENGTH && blen < MAX_SAFE_INTEGER_LENGTH) {
    return (Number(a) - Number(b)).toFixed();
  }

  const offset = a_adjusted_dot_index - b_adjusted_dot_index;
  // console.log("offset:", offset);

  let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);
  // console.log("left:", left);

  let right = Math.max(alen - a_adjusted_dot_index - 1, blen - b_adjusted_dot_index - 1);
  // console.log("right:", right);

  let aoffset = offset < 0 ? -1 * offset : 0;
  let boffset = offset <= 0 ? 0 : offset;
  // console.log({aoffset, boffset});

  let imax = left + 1 + right - 1; // -1 for zero-index
  // console.log({imax});

  let result = "";

  // number of borrowings
  let borrowed = 0;

  // to the right of the period
  //  100.5  6  7
  //    2.2  9  3
  //        (-3 + 10)  4
  let i = imax;
  if (right > 0) {
    while (i > imax - right) {
      // console.log("\n\n", {i});
      let top = a[i - aoffset] || "0";
      let bottom = b[i - boffset] || "0";

      // console.log("pre borrowing", {top, bottom});
      top -= borrowed;
      borrowed = 0;

      // console.log("after borrowing", {top, bottom});
      let n = top - bottom;

      // console.log({n});
      if (n < 0) {
        while (n < 0) {
          borrowed++;
          n += 10;
        }
      } else if (borrowed) {
        borrowed--;
      }
      // console.log({n});
      if (result !== "" || n !== 0) {
        result = n + result;
      }
      i--;
    }
    if (result !== "") {
      result = "." + result;
    }
    i--; // substract 1 for dot
  }

  // console.log({result});

  if (left > 0) {
    while (i > 0) {
      // console.log("\n\n", {i});
      let top = a[i - aoffset] || "0";
      let bottom = b[i - boffset] || "0";

      // console.log("pre borrowing", {top, bottom});
      top -= borrowed;
      borrowed = 0;

      // console.log("after borrowing", {top, bottom});
      let n = top - bottom;

      // console.log({n});
      if (n < 0) {
        while (n < 0) {
          borrowed++;
          n += 10;
        }
      } else if (borrowed) {
        borrowed--;
      }
      // console.log({n});
      result = n + result;
      i--;
    }

    // console.log({borrowed});
    // special rule for last one
    const achar = a[0 - aoffset] || "0";
    const bchar = b[0 - boffset] || "0";
    let n = Number(achar) - (borrowed > 0 ? 1 : 0) - Number(bchar);
    if (n !== 0) {
      result = n + result;
    }

    // remove any zeros in front like in 0123
    result = result.replace(/^0+/, "");
  }

  // if decimal number add zero
  if (result[0] === ".") result = "0" + result;

  return result;
}

module.exports = long_subtraction;
module.exports.default = long_subtraction;

},{"./constants/max_safe_integer_length.js":6}],13:[function(require,module,exports){
"use strict";

const add = require("./add.js");
const truncate_decimal = require("./truncate_decimal.js");

// given n is a positive decimal number
const up = ["5", "6", "7", "8", "9"];

function round_last_decimal(n) {
  // will round up to an integer
  if (n.match(/\.9+$/)) {
    return add(truncate_decimal(n), "1");
  }

  // remove + from beginning
  if (n[0] === "+") n = n.substring(1);

  //console.log("rounding:", {n});
  const len = n.length;
  //console.log({len});
  let result = "";

  const last_char = n[n.length - 1];
  //console.log({last_char});

  if (up.includes(last_char)) {
    let i;
    for (i = len - 2; i >= 0; i--) {
      const char = n[i];
      //console.log({char});
      // skip over . or -
      if (char === "." || char === "-") continue;

      const nchar = Number(char) + 1;
      //console.log({nchar});

      if (nchar === 10) {
        result = "0" + result;
        // keep rounding up
      } else {
        result = nchar + result;
        break;
      }
    }
    //console.log({i});
    if (i > 0) result = n.substring(0, i) + result;
  } else {
    result = n.substring(0, len - 1);
  }

  if (result[result.length - 1] === ".") result = result.substring(0, result.length - 1);

  // remove trailing zeros in decimal number
  // 0.50 => 0.5
  if (result.indexOf(".") > -1) result = result.replace(/0+$/, "");

  return result;
}

module.exports = round_last_decimal;
module.exports.default = round_last_decimal;

},{"./add.js":2,"./truncate_decimal.js":15}],14:[function(require,module,exports){
"use strict";

const clean = require("./clean");
const compare_positive = require("./compare_positive.js");
const is_infinity = require("./is_infinity.js");
const long_addition = require("./long_addition.js");
const long_subtraction = require("./long_subtraction.js");

function subtract(a, b, { infinity_minus_infinity = "NaN" } = {}) {
  a = clean(a);
  b = clean(b);

  const a_is_negative = a[0] === "-";
  const b_is_negative = b[0] === "-";

  const a_is_positive = !a_is_negative;
  const b_is_positive = !b_is_negative;

  const ainf = is_infinity(a);
  const binf = is_infinity(b);

  if (ainf && binf) {
    if (a_is_positive === b_is_positive) {
      return infinity_minus_infinity;
    } else if (a_is_positive) {
      return "Infinity"; // inf - -inf
    } else if (b_is_positive) {
      return "-Infinity"; // -inf - inf
    }
  } else if (ainf) {
    return a;
  } else if (binf) {
    return b_is_positive ? "-Infinity" : "Infinity";
  }

  if (a_is_positive) {
    if (b_is_positive) {
      const comparison = compare_positive(a, b);
      if (comparison === ">") {
        return long_subtraction(a, b);
      } else if (comparison === "<") {
        return "-" + long_subtraction(b, a);
      } else {
        return "0";
      }
    } else {
      return long_addition(a, b.substring(1));
    }
  } else if (b_is_positive) {
    return "-" + long_addition(a.substring(1), b);
  } else {
    a = a.substring(1);
    b = b.substring(1);
    const comparison = compare_positive(a, b);
    if (comparison === ">") {
      return "-" + long_subtraction(a, b);
    } else if (comparison === "<") {
      return long_subtraction(b, a);
    } else {
      return "0";
    }
  }
}

module.exports = subtract;
module.exports.default = subtract;

},{"./clean":3,"./compare_positive.js":4,"./is_infinity.js":9,"./long_addition.js":10,"./long_subtraction.js":12}],15:[function(require,module,exports){
"use strict";

// given n is a decimal number
function truncate_decimal(n) {
  return n.substring(0, n.indexOf("."));
}

module.exports = truncate_decimal;
module.exports.default = truncate_decimal;

},{}],16:[function(require,module,exports){
function count(nums) {
  const counts = {};
  let total = 0;
  for (let n of nums) {
    total++;
    if (n in counts) counts[n][1]++;
    else counts[n] = [n, 1];
  }
  return { counts, total };
}

module.exports = count;
module.exports.default = count;

},{}],17:[function(require,module,exports){
const count = require("./count");
const mean = require("./mean");

function calculate(nums, { no_data = undefined, precise = false } = { no_data: undefined, precise: false }) {
  const { counts, total } = count(nums);

  let total_valid = total;

  if ("NaN" in counts) {
    total_valid -= counts["NaN"][1];
    delete counts["NaN"];
  }

  if ("undefined" in counts) {
    total_valid -= counts["undefined"][1];
    delete counts["undefined"];
  }

  if ("null" in counts) {
    total_valid -= counts["null"][1];
    delete counts["null"];
  }

  if ("" in counts) {
    total_valid -= counts[""][1];
    delete counts[""];
  }

  // delete no data value(s), so they'll be ignored later
  if (Array.isArray(no_data)) {
    for (let i = 0; i < no_data.length; i++) {
      const n = no_data[i];
      if (n in counts) {
        total_valid -= counts[n][1];
        delete counts[n];
      }
    }
  } else if (no_data in counts) {
    total_valid -= counts[no_data][1];
    delete counts[no_data];
  }

  // sort counts by value
  const countArray = Object.values(counts).sort((a, b) => a[0] - b[0]);
  const half = total_valid / 2;
  const number_of_unique_values = countArray.length;
  if (number_of_unique_values === 0) {
    return undefined;
  } else if (number_of_unique_values === 1) {
    return precise ? countArray[0][0].toString() : countArray[0][0];
  } else {
    let x = 0;

    if (total % 2 === 0) {
      for (let i = 0; i < number_of_unique_values; i++) {
        const [n, ct] = countArray[i];
        x += ct;
        if (x > half) {
          // handle if odd or even
          // just barely pass cut off
          if (x - ct === half) {
            return mean(countArray[i - 1][0], n, { precise });
          } else {
            return precise ? n.toString() : n;
          }
        }
      }
    } else {
      for (let i = 0; i < number_of_unique_values; i++) {
        const [n, ct] = countArray[i];
        x += ct;
        if (x > half) return precise ? n.toString() : n;
      }
    }
  }
}

const mediana = { calculate };

if (typeof define === "function" && define.amd) {
  define(function () {
    return mediana;
  });
}

if (typeof module === "object") {
  module.exports = mediana;
  module.exports.default = { calculate };
}

if (typeof window === "object") {
  window.mediana = mediana;
}

if (typeof self === "object") {
  self.mediana = mediana;
}

},{"./count":16,"./mean":18}],18:[function(require,module,exports){
const add = require("preciso/add");
const divide = require("preciso/divide");

function mean(a, b, { precise = false } = { precise: false }) {
  if (precise) {
    return divide(add(a.toString(), b.toString()), "2");
  } else {
    return (a + b) / 2;
  }
}

module.exports = mean;
module.exports.default = mean;

},{"preciso/add":2,"preciso/divide":7}]},{},[17]);

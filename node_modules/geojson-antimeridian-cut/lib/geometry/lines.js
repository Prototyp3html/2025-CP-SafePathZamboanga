"use strict";

require("core-js/modules/es.array.flat");

require("core-js/modules/es.array.unscopables.flat");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitMultiLineString = exports.splitLineString = exports.splitCoordinateArray = void 0;

var _util = require("../util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A LineString GeoJSON Object
 * @typedef {Object} LineString
 * @property {string} type
 * @property {number[][]} coordinates
 */

/**
 * A MultiLineString GeoJSON Object
 * @typedef {Object} MultiLineString
 * @property {string} type
 * @property {number[][][]} coordinates
 */

/**
 * Splits up an array of coordinates into an array of arrays of coordinates. The fundamental
 * function for breaking up (Multi)?LineStrings
 *
 * @param {number[][]} coordinates The list of coordinates to try to split
 * @returns {number[][][]}
 */
const splitCoordinateArray = coordinates => {
  const crossings = (0, _util.crossingPoints)(coordinates);

  if (crossings.length === 0) {
    return [coordinates];
  }

  const rtn = []; // TODO: Consolidate these two steps into one
  // Split up into segments on each side of meridian

  rtn.push(coordinates.slice(0, crossings[0] + 1));

  for (let i = 1; i < crossings.length; i += 1) {
    rtn.push(coordinates.slice(crossings[i - 1] + 1, crossings[i] + 1));
  }

  rtn.push(coordinates.slice(crossings[crossings.length - 1] + 1)); // Add in the points on the meridian itself

  for (let i = 1; i < rtn.length; i += 1) {
    const left = rtn[i - 1];
    const lastLeft = left[left.length - 1];
    const right = rtn[i];
    const firstRight = right[0];
    const intersect = (0, _util.antimeridianIntersect)(lastLeft, firstRight);
    left.push([180 * Math.sign(lastLeft[0]), intersect]);
    right.unshift([180 * Math.sign(firstRight[0]), intersect]);
  }

  return rtn;
};
/**
 * Examines the `coordinates` of `lineString` to see if it would cross the antimeridian, and if so,
 * transforms it into an equivalent `MultiLineString` broken up over the antimeridian.
 *
 * @param {LineString} lineString A `LineString` GeoJSON object to break up
 * @returns {LineString|MultiLineString}
 */


exports.splitCoordinateArray = splitCoordinateArray;

const splitLineString = lineString => {
  const {
    coordinates,
    type: _type
  } = lineString,
        rest = _objectWithoutProperties(lineString, ["coordinates", "type"]);

  const crossings = (0, _util.crossingPoints)(coordinates);

  if (crossings.length === 0) {
    return _objectSpread({
      type: 'LineString',
      coordinates
    }, rest);
  }

  return _objectSpread({
    type: 'MultiLineString',
    coordinates: splitCoordinateArray(coordinates)
  }, rest);
};
/**
 * Examines the `coordinates` of `multiLineString` to see if any of its components would cross the
 * antimeridian, and if so, transforms it into an equivalent `MultiLineString` broken up over the
 * antimeridian.
 *
 * @param {MultiLineString} multiLineString A `MultiLineString` GeoJSON Object to break up
 * @returns {MultiLineString}
 */


exports.splitLineString = splitLineString;

const splitMultiLineString = multiLineString => {
  const {
    coordinates,
    type: _type
  } = multiLineString,
        rest = _objectWithoutProperties(multiLineString, ["coordinates", "type"]);

  return _objectSpread({
    type: 'MultiLineString',
    coordinates: coordinates.map(splitCoordinateArray).flat(1)
  }, rest);
};

exports.splitMultiLineString = splitMultiLineString;
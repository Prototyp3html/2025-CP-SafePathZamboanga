"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitGeometryCollection = exports.splitFeatureCollection = exports.splitFeature = void 0;

var _lines = require("./lines");

var _polygons = require("./polygons");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const splitGeometryObject = geometryObject => {
  switch (geometryObject.type) {
    case 'LineString':
      return (0, _lines.splitLineString)(geometryObject);

    case 'MultiLineString':
      return (0, _lines.splitMultiLineString)(geometryObject);

    case 'Polygon':
      return (0, _polygons.splitPolygon)(geometryObject);

    case 'MultiPolygon':
      return (0, _polygons.splitMultiPolygon)(geometryObject);

    case 'GeometryCollection':
      // eslint-disable-next-line no-use-before-define
      return splitGeometryCollection(geometryObject);

    default:
      throw new Error(`Must be some geometry object, is ${geometryObject.type}`);
  }
};

const splitFeature = feature => {
  const {
    geometry,
    properties,
    type: _type
  } = feature,
        rest = _objectWithoutProperties(feature, ["geometry", "properties", "type"]);

  const rtnGeometry = geometry ? splitGeometryObject(geometry) : null;
  return _objectSpread({
    type: 'Feature',
    geometry: rtnGeometry,
    properties
  }, rest);
};

exports.splitFeature = splitFeature;

const splitFeatureCollection = featureCollection => {
  const {
    features,
    type: _type
  } = featureCollection,
        rest = _objectWithoutProperties(featureCollection, ["features", "type"]);

  return _objectSpread({
    type: 'FeatureCollection',
    features: features.map(splitFeature)
  }, rest);
};

exports.splitFeatureCollection = splitFeatureCollection;

const splitGeometryCollection = geometryCollection => {
  const {
    geometries,
    type: _type
  } = geometryCollection,
        rest = _objectWithoutProperties(geometryCollection, ["geometries", "type"]);

  return _objectSpread({
    type: 'GeometryCollection',
    geometries: geometries.map(splitGeometryObject)
  }, rest);
};

exports.splitGeometryCollection = splitGeometryCollection;
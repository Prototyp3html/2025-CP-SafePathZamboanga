"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lines = require("./geometry/lines");

var _polygons = require("./geometry/polygons");

var _features = require("./geometry/features");

/**
 * Recursively up a GeoJSON Object (or its children, if applicable)
 * @param {Object} object The GeoJSON Object to split up
 * @param {string} object.type
 * @param {number[]} [object.coordinates]
 * @param {Object[]} [object.features]
 * @param {Object[]} [object.geometries]
 *
 * @returns {Object} The processed `object`
 */
const splitGeoJSON = object => {
  if (!object.type) {
    throw new Error('Object is not a valid GeoJSON Object, must have \'type\' property');
  }

  if (typeof object.type !== 'string') {
    throw new Error(`Property 'type' of GeoJSON Object must be 'string', is ${object.type}`);
  }

  switch (object.type) {
    case 'LineString':
      return (0, _lines.splitLineString)(object);

    case 'MultiLineString':
      return (0, _lines.splitMultiLineString)(object);

    case 'Polygon':
      return (0, _polygons.splitPolygon)(object);

    case 'MultiPolygon':
      return (0, _polygons.splitMultiPolygon)(object);

    case 'Feature':
      return (0, _features.splitFeature)(object);

    case 'FeatureCollection':
      return (0, _features.splitFeatureCollection)(object);

    case 'GeometryCollection':
      return (0, _features.splitGeometryCollection)(object);

    case 'Point':
    case 'MultiPoint':
      // Do not change these types of GeoJSON Objects
      return object;

    default:
      throw new Error(`Invalid 'type' of GeoJSON object: ${object.type}`);
  }
};

var _default = splitGeoJSON;
exports.default = _default;
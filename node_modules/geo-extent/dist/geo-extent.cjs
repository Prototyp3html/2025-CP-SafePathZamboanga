"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/preciso/compare_positive.js
var require_compare_positive = __commonJS({
  "node_modules/preciso/compare_positive.js"(exports2, module2) {
    "use strict";
    function compare_positive(a, b) {
      const alen = a.length;
      const blen = b.length;
      const aidx = a.indexOf(".");
      const bidx = b.indexOf(".");
      const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
      const b_adjusted_dot_index = bidx === -1 ? blen : bidx;
      const offset = a_adjusted_dot_index - b_adjusted_dot_index;
      let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);
      let right = Math.max(alen - a_adjusted_dot_index, blen - b_adjusted_dot_index);
      let aoffset = offset < 0 ? -1 * offset : 0;
      let boffset = offset <= 0 ? 0 : offset;
      let imax = left + 1 + right - 1;
      let i = 0;
      while (i < imax) {
        const ai = i - aoffset;
        const achar = ai === a_adjusted_dot_index ? "." : a[ai] || "0";
        const bi = i - boffset;
        const bchar = bi === b_adjusted_dot_index ? "." : b[bi] || "0";
        if (achar !== bchar) {
          if (achar > bchar)
            return ">";
          else if (achar < bchar)
            return "<";
        }
        i++;
      }
      return "=";
    }
    module2.exports = compare_positive;
    module2.exports.default = compare_positive;
  }
});

// node_modules/preciso/expand.js
var require_expand = __commonJS({
  "node_modules/preciso/expand.js"(exports2, module2) {
    "use strict";
    function expand(n) {
      if (n[0] === "+")
        n = n.substring(1);
      const sign = n[0] === "-" ? "-" : "";
      if (sign === "-")
        n = n.substring(1);
      const index_of_e = n.indexOf("e");
      if (index_of_e === -1)
        return sign + n;
      let index_of_dot = n.indexOf(".");
      if (index_of_dot === -1)
        index_of_dot = index_of_e;
      const shift = Number(n.substring(index_of_e + 1));
      const base = n.substring(0, index_of_e).replace(".", "");
      const normshift = index_of_dot + shift;
      const baselen = base.length;
      if (normshift >= baselen) {
        const zct = normshift - baselen;
        let result = base;
        for (let i = 0; i < zct; i++)
          result += "0";
        return sign + result;
      } else if (normshift < 0) {
        let result = "0.";
        for (let i = 0; i > normshift; i--)
          result += "0";
        result += base;
        return sign + result;
      } else {
        return sign + base.substring(0, normshift) + "." + base.substring(normshift);
      }
    }
    module2.exports = expand;
    module2.exports.default = expand;
  }
});

// node_modules/preciso/clean.js
var require_clean = __commonJS({
  "node_modules/preciso/clean.js"(exports2, module2) {
    "use strict";
    var expand = require_expand();
    module2.exports = function clean(n) {
      if (n[0] === "+")
        n = n.substring(1);
      n = expand(n);
      n = n.replace(/^0+(?=\d)/, "");
      if (n.includes("."))
        n = n.replace(/\.?0+$/, "");
      if (n === "")
        n = "0";
      if (n === "-0")
        n = "0";
      return n;
    };
  }
});

// node_modules/preciso/constants/max_safe_integer.js
var require_max_safe_integer = __commonJS({
  "node_modules/preciso/constants/max_safe_integer.js"(exports2, module2) {
    "use strict";
    var MAX_SAFE_INTEGER = 9007199254740991;
    module2.exports = { MAX_SAFE_INTEGER };
  }
});

// node_modules/preciso/constants/max_safe_integer_length.js
var require_max_safe_integer_length = __commonJS({
  "node_modules/preciso/constants/max_safe_integer_length.js"(exports2, module2) {
    "use strict";
    var { MAX_SAFE_INTEGER } = require_max_safe_integer();
    var MAX_SAFE_INTEGER_LENGTH = MAX_SAFE_INTEGER.toString().length - 1;
    module2.exports = { MAX_SAFE_INTEGER_LENGTH };
  }
});

// node_modules/preciso/long_addition.js
var require_long_addition = __commonJS({
  "node_modules/preciso/long_addition.js"(exports2, module2) {
    "use strict";
    var { MAX_SAFE_INTEGER_LENGTH } = require_max_safe_integer_length();
    function long_addition(a, b) {
      const alen = a.length;
      const blen = b.length;
      const aidx = a.indexOf(".");
      const bidx = b.indexOf(".");
      const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
      const b_adjusted_dot_index = bidx === -1 ? blen : bidx;
      if (aidx === -1 && bidx === -1 && alen < MAX_SAFE_INTEGER_LENGTH && blen < MAX_SAFE_INTEGER_LENGTH) {
        return (Number(a) + Number(b)).toFixed();
      }
      const offset = a_adjusted_dot_index - b_adjusted_dot_index;
      let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);
      let right = Math.max(alen - a_adjusted_dot_index - 1, blen - b_adjusted_dot_index - 1);
      let aoffset = offset < 0 ? -1 * offset : 0;
      let boffset = offset <= 0 ? 0 : offset;
      let imax = left + 1 + right - 1;
      let result = "";
      let carried = 0;
      let i = imax;
      if (right > 0) {
        while (i > imax - right) {
          const achar = a[i - aoffset] || "0";
          const bchar = b[i - boffset] || "0";
          let n = Number(achar) + Number(bchar) + carried;
          if (n >= 10) {
            n -= 10;
            carried = 1;
          } else {
            carried = 0;
          }
          if (result !== "" || n !== 0) {
            result = n + result;
          }
          i--;
        }
        if (result)
          result = "." + result;
        i--;
      }
      if (left > 0) {
        while (i >= 0) {
          const achar = a[i - aoffset] || "0";
          const bchar = b[i - boffset] || "0";
          let n = Number(achar) + Number(bchar) + carried;
          if (n >= 10) {
            n -= 10;
            carried = 1;
          } else {
            carried = 0;
          }
          result = n + result;
          i--;
        }
      }
      if (carried === 1) {
        result = carried + result;
      }
      if (result[0] === ".")
        result = "0" + result;
      return result;
    }
    module2.exports = long_addition;
    module2.exports.default = long_addition;
  }
});

// node_modules/preciso/long_subtraction.js
var require_long_subtraction = __commonJS({
  "node_modules/preciso/long_subtraction.js"(exports2, module2) {
    "use strict";
    var { MAX_SAFE_INTEGER_LENGTH } = require_max_safe_integer_length();
    function long_subtraction(a, b) {
      const alen = a.length;
      const blen = b.length;
      const aidx = a.indexOf(".");
      const bidx = b.indexOf(".");
      const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
      const b_adjusted_dot_index = bidx === -1 ? blen : bidx;
      if (aidx === -1 && bidx === -1 && alen < MAX_SAFE_INTEGER_LENGTH && blen < MAX_SAFE_INTEGER_LENGTH) {
        return (Number(a) - Number(b)).toFixed();
      }
      const offset = a_adjusted_dot_index - b_adjusted_dot_index;
      let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);
      let right = Math.max(alen - a_adjusted_dot_index - 1, blen - b_adjusted_dot_index - 1);
      let aoffset = offset < 0 ? -1 * offset : 0;
      let boffset = offset <= 0 ? 0 : offset;
      let imax = left + 1 + right - 1;
      let result = "";
      let borrowed = 0;
      let i = imax;
      if (right > 0) {
        while (i > imax - right) {
          let top = a[i - aoffset] || "0";
          let bottom = b[i - boffset] || "0";
          top -= borrowed;
          borrowed = 0;
          let n = top - bottom;
          if (n < 0) {
            while (n < 0) {
              borrowed++;
              n += 10;
            }
          } else if (borrowed) {
            borrowed--;
          }
          if (result !== "" || n !== 0) {
            result = n + result;
          }
          i--;
        }
        if (result !== "") {
          result = "." + result;
        }
        i--;
      }
      if (left > 0) {
        while (i > 0) {
          let top = a[i - aoffset] || "0";
          let bottom = b[i - boffset] || "0";
          top -= borrowed;
          borrowed = 0;
          let n2 = top - bottom;
          if (n2 < 0) {
            while (n2 < 0) {
              borrowed++;
              n2 += 10;
            }
          } else if (borrowed) {
            borrowed--;
          }
          result = n2 + result;
          i--;
        }
        const achar = a[0 - aoffset] || "0";
        const bchar = b[0 - boffset] || "0";
        let n = Number(achar) - (borrowed > 0 ? 1 : 0) - Number(bchar);
        if (n !== 0) {
          result = n + result;
        }
        result = result.replace(/^0+/, "");
      }
      if (result[0] === ".")
        result = "0" + result;
      return result;
    }
    module2.exports = long_subtraction;
    module2.exports.default = long_subtraction;
  }
});

// node_modules/preciso/is_infinity.js
var require_is_infinity = __commonJS({
  "node_modules/preciso/is_infinity.js"(exports2, module2) {
    "use strict";
    function is_infinity(n) {
      return !!n.match(/^(|-|\+)inf(inity)?$/i);
    }
    module2.exports = is_infinity;
    module2.exports.default = is_infinity;
  }
});

// node_modules/preciso/add.js
var require_add = __commonJS({
  "node_modules/preciso/add.js"(exports2, module2) {
    "use strict";
    var compare_positive = require_compare_positive();
    var clean = require_clean();
    var long_addition = require_long_addition();
    var long_subtraction = require_long_subtraction();
    var is_infinity = require_is_infinity();
    function add2(a, b, { infinity_minus_infinity = "NaN" } = {}) {
      a = clean(a);
      b = clean(b);
      const apos = a[0] !== "-";
      const bpos = b[0] !== "-";
      const aneg = !apos;
      const bneg = !bpos;
      const ainf = is_infinity(a);
      const binf = is_infinity(b);
      if (ainf && binf) {
        if (apos && bpos)
          return "Infinity";
        else if (aneg & bneg)
          return "-Infinity";
        else
          return infinity_minus_infinity;
      } else if (ainf) {
        if (apos)
          return "Infinity";
        else
          return "-Infinity";
      } else if (binf) {
        if (bpos)
          return "Infinity";
        else
          return "-Infinity";
      } else if (apos && bpos) {
        return long_addition(a, b);
      } else if (aneg && bneg) {
        return "-" + long_addition(a.substring(1), b.substring(1));
      } else if (aneg && bpos) {
        a = a.substring(1);
        switch (compare_positive(a, b)) {
          case "=":
            return "0";
          case "<":
            return long_subtraction(b, a);
          case ">":
            return "-" + long_subtraction(a, b);
        }
      } else if (apos && !bpos) {
        b = b.substring(1);
        switch (compare_positive(a, b)) {
          case "=":
            return "0";
          case "<":
            return "-" + long_subtraction(b, a);
          case ">":
            return long_subtraction(a, b);
        }
      }
    }
    module2.exports = add2;
    module2.exports.default = add2;
  }
});

// node_modules/preciso/absolute.js
var require_absolute = __commonJS({
  "node_modules/preciso/absolute.js"(exports2, module2) {
    "use strict";
    var clean = require_clean();
    function absolute(n) {
      n = clean(n);
      if (n[0] === "-")
        return n.substring(1);
      else
        return n;
    }
    module2.exports = absolute;
    module2.exports.default = absolute;
  }
});

// node_modules/preciso/subtract.js
var require_subtract = __commonJS({
  "node_modules/preciso/subtract.js"(exports2, module2) {
    "use strict";
    var clean = require_clean();
    var compare_positive = require_compare_positive();
    var is_infinity = require_is_infinity();
    var long_addition = require_long_addition();
    var long_subtraction = require_long_subtraction();
    function subtract2(a, b, { infinity_minus_infinity = "NaN" } = {}) {
      a = clean(a);
      b = clean(b);
      const a_is_negative = a[0] === "-";
      const b_is_negative = b[0] === "-";
      const a_is_positive = !a_is_negative;
      const b_is_positive = !b_is_negative;
      const ainf = is_infinity(a);
      const binf = is_infinity(b);
      if (ainf && binf) {
        if (a_is_positive === b_is_positive) {
          return infinity_minus_infinity;
        } else if (a_is_positive) {
          return "Infinity";
        } else if (b_is_positive) {
          return "-Infinity";
        }
      } else if (ainf) {
        return a;
      } else if (binf) {
        return b_is_positive ? "-Infinity" : "Infinity";
      }
      if (a_is_positive) {
        if (b_is_positive) {
          const comparison = compare_positive(a, b);
          if (comparison === ">") {
            return long_subtraction(a, b);
          } else if (comparison === "<") {
            return "-" + long_subtraction(b, a);
          } else {
            return "0";
          }
        } else {
          return long_addition(a, b.substring(1));
        }
      } else if (b_is_positive) {
        return "-" + long_addition(a.substring(1), b);
      } else {
        a = a.substring(1);
        b = b.substring(1);
        const comparison = compare_positive(a, b);
        if (comparison === ">") {
          return "-" + long_subtraction(a, b);
        } else if (comparison === "<") {
          return long_subtraction(b, a);
        } else {
          return "0";
        }
      }
    }
    module2.exports = subtract2;
    module2.exports.default = subtract2;
  }
});

// node_modules/preciso/truncate_decimal.js
var require_truncate_decimal = __commonJS({
  "node_modules/preciso/truncate_decimal.js"(exports2, module2) {
    "use strict";
    function truncate_decimal(n) {
      return n.substring(0, n.indexOf("."));
    }
    module2.exports = truncate_decimal;
    module2.exports.default = truncate_decimal;
  }
});

// node_modules/preciso/round_last_decimal.js
var require_round_last_decimal = __commonJS({
  "node_modules/preciso/round_last_decimal.js"(exports2, module2) {
    "use strict";
    var add2 = require_add();
    var truncate_decimal = require_truncate_decimal();
    var up = ["5", "6", "7", "8", "9"];
    function round_last_decimal(n) {
      if (n.match(/\.9+$/)) {
        return add2(truncate_decimal(n), "1");
      }
      if (n[0] === "+")
        n = n.substring(1);
      const len = n.length;
      let result = "";
      const last_char = n[n.length - 1];
      if (up.includes(last_char)) {
        let i;
        for (i = len - 2; i >= 0; i--) {
          const char = n[i];
          if (char === "." || char === "-")
            continue;
          const nchar = Number(char) + 1;
          if (nchar === 10) {
            result = "0" + result;
          } else {
            result = nchar + result;
            break;
          }
        }
        if (i > 0)
          result = n.substring(0, i) + result;
      } else {
        result = n.substring(0, len - 1);
      }
      if (result[result.length - 1] === ".")
        result = result.substring(0, result.length - 1);
      if (result.indexOf(".") > -1)
        result = result.replace(/0+$/, "");
      return result;
    }
    module2.exports = round_last_decimal;
    module2.exports.default = round_last_decimal;
  }
});

// node_modules/preciso/long_division.js
var require_long_division = __commonJS({
  "node_modules/preciso/long_division.js"(exports2, module2) {
    "use strict";
    var compare_positive = require_compare_positive();
    var add2 = require_add();
    var subtract2 = require_subtract();
    var round_last_decimal = require_round_last_decimal();
    function long_division(dividend, divisor, { format = "string", max_decimal_digits = 100, ellipsis = false } = {}) {
      if (dividend[0] === "0")
        dividend = dividend.substring(1);
      if (divisor[0] === "0")
        divisor = divisor.substring(1);
      const dividend_index_of_dot = dividend.indexOf(".");
      const divisor_index_of_dot = divisor.indexOf(".");
      const adjusted_dividend_index_of_dot = dividend_index_of_dot === -1 ? dividend.length : dividend_index_of_dot;
      const divisor_num_decimal_places = divisor_index_of_dot === -1 ? 0 : divisor.length - 1 - divisor_index_of_dot;
      let repeating = false;
      dividend = dividend.replace(/\./, "");
      divisor = divisor.replace(/\./, "");
      const dividend_length = dividend.length;
      let current = "";
      let quotient = "";
      let comparison;
      let offset = -1 * divisor_num_decimal_places;
      let skip = 0;
      for (let i = 0; i < dividend_length; i++) {
        const char = dividend[i];
        current += char;
        comparison = compare_positive(current, divisor);
        if (comparison === ">") {
          let times = 1;
          let product = add2(divisor, divisor);
          let passed_product = divisor;
          while (compare_positive(product, current) !== ">") {
            times++;
            passed_product = product;
            product = add2(product, divisor);
          }
          times = times.toString();
          if (quotient !== "") {
            for (let i2 = times.length; i2 <= skip; i2++)
              quotient += "0";
          }
          quotient += times;
          current = subtract2(current, passed_product);
          skip = 0;
        } else if (comparison === "<") {
          if (quotient === "") {
            offset++;
          }
          skip++;
          continue;
        } else if (comparison === "=") {
          if (quotient !== "") {
            for (let i2 = 0; i2 < skip; i2++)
              quotient += "0";
          }
          quotient += "1";
          current = "0";
          skip = 0;
        }
      }
      if (current.match(/^0+$/g)) {
        if (comparison === "<") {
          quotient += current.substring(0, current.length - 1);
        }
      } else {
        const previous = {};
        const idot2 = adjusted_dividend_index_of_dot - offset;
        const qlen2 = quotient.length;
        const imax = idot2 - qlen2 + max_decimal_digits + 1;
        if (quotient === "") {
          skip = 0;
        }
        for (let i = 0; i < imax; i++) {
          current += "0";
          if (ellipsis) {
            if (current in previous) {
              previous[current]++;
              if (previous[current] > 3) {
                quotient += "...";
                repeating = true;
                break;
              }
            } else {
              previous[current] = 1;
            }
          }
          const comparison2 = compare_positive(current, divisor);
          if (comparison2 === ">") {
            let times = 1;
            let product = add2(divisor, divisor);
            let passed_product = divisor;
            while (compare_positive(product, current) !== ">") {
              times++;
              passed_product = product;
              product = add2(product, divisor);
            }
            times = times.toString();
            for (let i2 = times.length; i2 <= skip; i2++)
              quotient += "0";
            quotient += times;
            current = subtract2(current, passed_product);
            if (current === "0") {
              break;
            }
            skip = 0;
          } else if (comparison2 === "<") {
            skip++;
            continue;
          } else if (comparison2 === "=") {
            for (let i2 = 0; i2 < skip; i2++)
              quotient += "0";
            quotient += "1";
            skip = 0;
            break;
          }
        }
      }
      const idot = adjusted_dividend_index_of_dot - offset;
      const qlen = quotient.length;
      let num_decimals;
      if (idot === qlen) {
        num_decimals = 0;
      } else if (idot < 0) {
        quotient = "0." + "0".repeat(Math.abs(idot)) + quotient;
        num_decimals = qlen - idot;
      } else if (idot > qlen) {
        for (let i = qlen; i < idot; i++)
          quotient += "0";
        num_decimals = 0;
      } else if (idot < qlen) {
        quotient = quotient.substring(0, idot) + "." + quotient.substring(idot);
        num_decimals = qlen - idot;
      } else if (idot === 0) {
        quotient = "0." + quotient;
        num_decimals = qlen;
      }
      quotient = quotient.replace(/^0+/, "");
      quotient = quotient.replace(/\.\d+0+$/, "");
      const extra_decimals = num_decimals - max_decimal_digits;
      if (!repeating) {
        if (extra_decimals > 0) {
          quotient = round_last_decimal(quotient.substring(0, quotient.length - extra_decimals + 1));
        }
      }
      if (quotient[0] === ".")
        quotient = "0" + quotient;
      if (format === "object") {
        return { quotient, extra_decimals };
      } else {
        return quotient;
      }
    }
    module2.exports = long_division;
    module2.exports.default = long_division;
  }
});

// node_modules/preciso/divide.js
var require_divide = __commonJS({
  "node_modules/preciso/divide.js"(exports2, module2) {
    "use strict";
    var absolute = require_absolute();
    var clean = require_clean();
    var is_infinity = require_is_infinity();
    var long_division = require_long_division();
    function divide2(dividend, divisor, options) {
      dividend = clean(dividend);
      divisor = clean(divisor);
      const dividend_is_positive = dividend[0] !== "-";
      const divisor_is_positive = divisor[0] !== "-";
      const dividend_is_infinity = is_infinity(dividend);
      const divisor_is_infinity = is_infinity(divisor);
      if (dividend_is_infinity || divisor_is_infinity) {
        if (dividend_is_positive == divisor_is_positive) {
          return "Infinity";
        } else {
          return "-Infinity";
        }
      }
      if (divisor === "0")
        throw new Error("[preciso] division by zero");
      if (dividend === "" || dividend === "0")
        return "0";
      const out_sign = dividend_is_positive !== divisor_is_positive ? "-" : "";
      if (!dividend_is_positive)
        dividend = absolute(dividend);
      if (!divisor_is_positive)
        divisor = absolute(divisor);
      return out_sign + long_division(dividend, divisor, options);
    }
    module2.exports = divide2;
    module2.exports.default = divide2;
  }
});

// node_modules/preciso/is_imaginary.js
var require_is_imaginary = __commonJS({
  "node_modules/preciso/is_imaginary.js"(exports2, module2) {
    "use strict";
    function is_imaginary(n) {
      return n.includes("i");
    }
    module2.exports = is_imaginary;
    module2.exports.default = is_imaginary;
  }
});

// node_modules/preciso/is_integer.js
var require_is_integer = __commonJS({
  "node_modules/preciso/is_integer.js"(exports2, module2) {
    "use strict";
    var clean = require_clean();
    var is_infinity = require_is_infinity();
    function is_integer(n) {
      if (is_infinity(n))
        return false;
      n = clean(n);
      return !n.includes(".") && !n.includes("/");
    }
    module2.exports = is_integer;
    module2.exports.default = is_integer;
  }
});

// node_modules/preciso/is_odd.js
var require_is_odd = __commonJS({
  "node_modules/preciso/is_odd.js"(exports2, module2) {
    var clean = require_clean();
    var is_integer = require_is_integer();
    function is_odd(n) {
      n = clean(n);
      if (!is_integer(n))
        throw new Error("can't call is_odd on decimal");
      return ["1", "3", "5", "7", "9"].includes(n.charAt(n.length - 1));
    }
    module2.exports = is_odd;
    module2.exports.default = is_odd;
  }
});

// node_modules/preciso/is_zero.js
var require_is_zero = __commonJS({
  "node_modules/preciso/is_zero.js"(exports2, module2) {
    "use strict";
    function is_zero(n) {
      return /^[-+]?0(\.0+)?(e[\.\d]+)?$/.test(n);
    }
    module2.exports = is_zero;
    module2.exports.default = is_zero;
  }
});

// node_modules/preciso/long_multiplication.js
var require_long_multiplication = __commonJS({
  "node_modules/preciso/long_multiplication.js"(exports2, module2) {
    "use strict";
    var { MAX_SAFE_INTEGER_LENGTH } = require_max_safe_integer_length();
    var CHUNK_SIZE = 15;
    function long_multiplication(a, b) {
      if (a === "0" || b === "0")
        return "0";
      const top_index_of_dot = a.indexOf(".");
      const bottom_index_of_dot = b.indexOf(".");
      const a_num_integer_places = top_index_of_dot === -1 ? a.length : top_index_of_dot;
      const b_num_integer_places = bottom_index_of_dot === -1 ? b.length : bottom_index_of_dot;
      const max_total_num_integer_places = a_num_integer_places + b_num_integer_places;
      const a_num_decimal_places = top_index_of_dot === -1 ? 0 : a.length - 1 - top_index_of_dot;
      const b_num_decimal_places = bottom_index_of_dot === -1 ? 0 : b.length - 1 - bottom_index_of_dot;
      const out_num_decimal_places = a_num_decimal_places + b_num_decimal_places;
      if (out_num_decimal_places === 0 && max_total_num_integer_places < MAX_SAFE_INTEGER_LENGTH) {
        return (Number(a) * Number(b)).toFixed(0);
      }
      const aint = a.replace(".", "");
      const bint = b.replace(".", "");
      const alen = aint.length;
      const blen = bint.length;
      const chunks = [];
      let i = alen;
      while (i >= 0) {
        const end = i;
        const start = i -= CHUNK_SIZE;
        const str = aint.substring(start, end);
        chunks.push([Number(str), str.length]);
      }
      const partial_products = [];
      const partials = [];
      for (let i2 = 0, ireverse = blen - 1; ireverse >= 0; ireverse--, i2++) {
        const bstr = bint[ireverse];
        const bnum = Number(bstr);
        let carried2 = 0;
        let partial = "";
        const ichunklast = chunks.length - 1;
        chunks.forEach(([chunk, chunklen], c) => {
          const subpartial = carried2 + bnum * chunk;
          let subpartstr = subpartial.toString();
          const subpartcharlen = subpartstr.length;
          if (subpartcharlen > chunklen && c !== ichunklast) {
            const islice = -1 * chunklen;
            partial = subpartstr.slice(islice) + partial;
            carried2 = Number(subpartstr.slice(0, islice));
          } else {
            const imax = chunklen - subpartcharlen;
            for (let i3 = 0; i3 < imax; i3++) {
              subpartstr = "0" + subpartstr;
            }
            carried2 = 0;
            partial = subpartstr + partial;
          }
        });
        partial += "0".repeat(i2);
        partial_products.push(partial);
        partials.push([Array.from(partial).map((char) => Number(char)), partial.length]);
      }
      const num_partials = partial_products.length;
      const number_of_columns = partials[partials.length - 1][1] + num_partials;
      let result = "";
      let carried = 0;
      for (let icol = 0; icol < number_of_columns; icol++) {
        let sum = carried;
        const pmax = Math.min(icol, num_partials - 1);
        for (let p = 0; p <= pmax; p++) {
          const [pnums, plen] = partials[p];
          const i2 = plen - 1 - icol;
          if (i2 >= 0) {
            sum += pnums[i2];
          }
        }
        if (sum >= 10) {
          sum = sum.toString();
          result = sum[sum.length - 1] + result;
          carried = Number(sum.slice(0, -1));
        } else {
          result = sum + result;
          carried = 0;
        }
      }
      if (out_num_decimal_places === 0) {
        result = result.replace(/^0+/, "");
      } else {
        const idot = result.length - out_num_decimal_places;
        result = result.substring(0, idot) + "." + result.substring(idot);
        result = result.replace(/^0+/, "");
        result = result.replace(/\.?0+$/, "");
        if (result[0] === ".")
          result = "0" + result;
      }
      return result;
    }
    module2.exports = long_multiplication;
    module2.exports.default = long_multiplication;
  }
});

// node_modules/preciso/count_decimal_digits.js
var require_count_decimal_digits = __commonJS({
  "node_modules/preciso/count_decimal_digits.js"(exports2, module2) {
    "use strict";
    var clean = require_clean();
    function count_decimal_digits(n) {
      n = clean(n);
      const i = n.indexOf(".");
      if (i === -1)
        return "0";
      return (n.length - i - 1).toString();
    }
    module2.exports = count_decimal_digits;
    module2.exports.default = count_decimal_digits;
  }
});

// node_modules/preciso/is_negative.js
var require_is_negative = __commonJS({
  "node_modules/preciso/is_negative.js"(exports2, module2) {
    "use strict";
    var clean = require_clean();
    function is_negative(n) {
      n = clean(n);
      return n[0] === "-";
    }
    module2.exports = is_negative;
    module2.exports.default = is_negative;
  }
});

// node_modules/preciso/round_rational.js
var require_round_rational = __commonJS({
  "node_modules/preciso/round_rational.js"(exports2, module2) {
    "use strict";
    var clean = require_clean();
    var count_decimal_digits = require_count_decimal_digits();
    var absolute = require_absolute();
    var is_negative = require_is_negative();
    var round_last_decimal = require_round_last_decimal();
    var UP = ["5", "6", "7", "8", "9"];
    function round_rational(n, { digits = 0 } = { digits: 0 }) {
      n = clean(n);
      const orig = n;
      const sign = is_negative(n) ? "-" : "";
      n = absolute(n);
      const idec = n.indexOf(".");
      if (idec === -1)
        return orig;
      if (count_decimal_digits(n) <= digits)
        return orig;
      const v = n[idec + digits + 1];
      if (UP.includes(v)) {
        const clip = n.substring(0, idec + digits + 2);
        return sign + round_last_decimal(clip);
      } else if (digits === 0) {
        return sign + n.substring(0, idec);
      } else {
        const clip = n.substring(0, idec + digits + 1);
        return sign + clip;
      }
    }
    module2.exports = round_rational;
    module2.exports.default = round_rational;
  }
});

// node_modules/preciso/round.js
var require_round = __commonJS({
  "node_modules/preciso/round.js"(exports2, module2) {
    "use strict";
    var is_imaginary = require_is_imaginary();
    var round_rational = require_round_rational();
    function round(n, { digits = 0 } = {}) {
      digits = Number(digits);
      if (is_imaginary(n)) {
        return round_rational(n.substring(0, n.length - 1), { digits }) + "i";
      } else {
        return round_rational(n, { digits });
      }
    }
    module2.exports = round;
    module2.exports.default = round;
  }
});

// node_modules/preciso/multiply_rational.js
var require_multiply_rational = __commonJS({
  "node_modules/preciso/multiply_rational.js"(exports2, module2) {
    "use strict";
    var absolute = require_absolute();
    var clean = require_clean();
    var compare_positive = require_compare_positive();
    var long_multiplication = require_long_multiplication();
    var round = require_round();
    function multiply_rational(nums, { max_decimal_digits } = {}) {
      let product = clean(nums[0]);
      let product_absolute = absolute(product);
      let product_sign = product[0] === "-" ? "-" : "";
      const imax = nums.length;
      for (let i = 1; i < imax; i++) {
        const current = clean(nums[i]);
        const current_sign = current[0] === "-" ? "-" : "";
        const current_absolute = absolute(current);
        product_sign = product_sign !== current_sign ? "-" : "";
        const comparison = compare_positive(product_absolute, current_absolute);
        product_absolute = comparison === "<" ? long_multiplication(current_absolute, product_absolute) : long_multiplication(product_absolute, current_absolute);
        product = product_sign + product_absolute;
      }
      if (typeof max_decimal_digits === "number")
        product = round(product, { digits: max_decimal_digits });
      return product;
    }
    module2.exports = multiply_rational;
    module2.exports.default = multiply_rational;
  }
});

// node_modules/preciso/sign_nonzero.js
var require_sign_nonzero = __commonJS({
  "node_modules/preciso/sign_nonzero.js"(exports2, module2) {
    "use strict";
    function sign_nonzero(n) {
      return n[0] === "-" ? "-" : "+";
    }
    module2.exports = sign_nonzero;
    module2.exports.default = sign_nonzero;
  }
});

// node_modules/preciso/multiply_array.js
var require_multiply_array = __commonJS({
  "node_modules/preciso/multiply_array.js"(exports2, module2) {
    "use strict";
    var is_imaginary = require_is_imaginary();
    var is_infinity = require_is_infinity();
    var is_odd = require_is_odd();
    var is_zero = require_is_zero();
    var multiply_rational = require_multiply_rational();
    var sign_nonzero = require_sign_nonzero();
    function multiply_array(nums, { max_decimal_digits, infinity_times_zero = "NaN" } = {}) {
      const has_inf = nums.some((n) => is_infinity(n));
      const has_zero = nums.some((n) => is_zero(n));
      if (has_inf && has_zero) {
        return infinity_times_zero;
      } else if (has_inf) {
        const ct = nums.filter((n) => sign_nonzero(n) === "-").length;
        return ct % 2 === 0 ? "Infinity" : "-Infinity";
      } else if (has_zero) {
        return "0";
      }
      const imaginary = is_odd(nums.filter((n) => is_imaginary(n)).length.toString());
      let product = multiply_rational(
        nums.map((n) => n.replace(/i$/, "")),
        { max_decimal_digits }
      );
      if (imaginary)
        product += "i";
      return product;
    }
    module2.exports = multiply_array;
    module2.exports.default = multiply_array;
  }
});

// node_modules/preciso/multiply.js
var require_multiply = __commonJS({
  "node_modules/preciso/multiply.js"(exports2, module2) {
    "use strict";
    var multiply_array = require_multiply_array();
    function multiply2() {
      const args = Array.from(arguments);
      const options = typeof args[args.length - 1] === "object" ? args[args.length - 1] : void 0;
      const nums = Array.isArray(args[0]) ? args[0] : options ? args.slice(0, args.length - 1) : args;
      return multiply_array(nums, options);
    }
    module2.exports = multiply2;
    module2.exports.default = multiply2;
  }
});

// node_modules/bbox-fns/bbox-array.js
var require_bbox_array = __commonJS({
  "node_modules/bbox-fns/bbox-array.js"(exports2, module2) {
    "use strict";
    function bboxArray2(points, { nan_strategy = "throw" } = { nan_strategy: "throw" }) {
      const count = points.length;
      let xmin = null;
      let xmax = null;
      let ymin = null;
      let ymax = null;
      for (let i = 0; i < count; i++) {
        const [x, y] = points[i];
        if (isNaN(x)) {
          if (nan_strategy === "throw") {
            throw new Error("[bbox-fns/bbox-array] encountered point with a NaN value: [" + x + ", " + y + "]");
          }
        } else if (xmin === null) {
          xmin = x;
          xmax = x;
        } else {
          if (x < xmin)
            xmin = x;
          else if (x > xmax)
            xmax = x;
        }
        if (isNaN(y)) {
          if (nan_strategy === "throw") {
            throw new Error("[bbox-fns/bbox-array] encountered point with a NaN value: [" + x + ", " + y + "]");
          }
        } else if (ymin === null) {
          ymin = y;
          ymax = y;
        } else {
          if (y < ymin)
            ymin = y;
          else if (y > ymax)
            ymax = y;
        }
      }
      return [xmin, ymin, xmax, ymax];
    }
    module2.exports = bboxArray2;
    module2.exports.default = bboxArray2;
  }
});

// node_modules/bbox-fns/boolean-contains.js
var require_boolean_contains = __commonJS({
  "node_modules/bbox-fns/boolean-contains.js"(exports2, module2) {
    "use_strict";
    function booleanContains2([axmin, aymin, axmax, aymax], [bxmin, bymin, bxmax, bymax], { exclusive = false } = { exclusive: false }) {
      if (exclusive) {
        const xContained = bxmin > axmin && bxmax < axmax;
        const yContained = bymin > aymin && bymax < aymax;
        return xContained && yContained;
      } else {
        const xContained = bxmin >= axmin && bxmax <= axmax;
        const yContained = bymin >= aymin && bymax <= aymax;
        return xContained && yContained;
      }
    }
    module2.exports = booleanContains2;
    module2.exports.default = booleanContains2;
  }
});

// node_modules/bbox-fns/boolean-intersects.js
var require_boolean_intersects = __commonJS({
  "node_modules/bbox-fns/boolean-intersects.js"(exports2, module2) {
    "use_strict";
    function booleanIntersects2([axmin, aymin, axmax, aymax], [bxmin, bymin, bxmax, bymax]) {
      const yOverlaps = bymin <= aymax && bymax >= aymin;
      const xOverlaps = bxmin <= axmax && bxmax >= axmin;
      return xOverlaps && yOverlaps;
    }
    module2.exports = booleanIntersects2;
    module2.exports.default = booleanIntersects2;
  }
});

// node_modules/bbox-fns/dense-polygon.js
var require_dense_polygon = __commonJS({
  "node_modules/bbox-fns/dense-polygon.js"(exports2, module2) {
    "use_strict";
    function densePolygon2([xmin, ymin, xmax, ymax], { density = 0 } = { density: 0 }) {
      if (typeof density === "number")
        density = [density, density];
      const [x_density, y_density] = density;
      const height = ymax - ymin;
      const width = xmax - xmin;
      const ring = [];
      const x_distance = width / (x_density + 1);
      const y_distance = height / (y_density + 1);
      ring.push([xmin, ymax]);
      for (let i = 1; i <= y_density; i++)
        ring.push([xmin, ymax - i * y_distance]);
      ring.push([xmin, ymin]);
      for (let i = 1; i <= x_density; i++)
        ring.push([xmin + i * x_distance, ymin]);
      ring.push([xmax, ymin]);
      for (let i = 1; i <= y_density; i++)
        ring.push([xmax, ymin + i * y_distance]);
      ring.push([xmax, ymax]);
      for (let i = 1; i <= x_density; i++)
        ring.push([xmax - i * x_distance, ymax]);
      ring.push([xmin, ymax]);
      return [ring];
    }
    module2.exports = densePolygon2;
    module2.exports.default = densePolygon2;
  }
});

// node_modules/bbox-fns/shift.js
var require_shift = __commonJS({
  "node_modules/bbox-fns/shift.js"(exports2, module2) {
    function shift([xmin, ymin, xmax, ymax], dist) {
      const x = Array.isArray(dist) && dist.length >= 1 ? dist[0] : typeof dist.x === "number" ? dist.x : 0;
      const y = Array.isArray(dist) && dist.length >= 2 ? dist[1] : typeof dist.y === "number" ? dist.y : 0;
      return [xmin + x, ymin + y, xmax + x, ymax + y];
    }
    module2.exports = shift;
    module2.exports.default = shift;
  }
});

// node_modules/bbox-fns/sort.js
var require_sort = __commonJS({
  "node_modules/bbox-fns/sort.js"(exports2, module2) {
    function sort(bboxes) {
      return bboxes.sort((a, b) => {
        const [axmin, aymin, axmax, aymax] = a;
        const [bxmin, bymin, bxmax, bymax] = b;
        if (axmin < bxmin)
          return -1;
        if (axmin > bxmin)
          return 1;
        if (aymin < bymin)
          return 1;
        if (aymin > bymin)
          return -1;
        return 0;
      });
    }
    module2.exports = sort;
    module2.exports.default = sort;
  }
});

// node_modules/bbox-fns/split.js
var require_split = __commonJS({
  "node_modules/bbox-fns/split.js"(exports2, module2) {
    "use strict";
    function split(bbox, breakpoints) {
      const [xmin, ymin, xmax, ymax] = bbox;
      if (!breakpoints)
        throw new Error("[bbox-fns/split.js] missing breakpoints");
      const xbrks = breakpoints.x || [];
      const ybrks = breakpoints.y || [];
      const xedges = [xmin].concat(xbrks.filter((x) => x > xmin && x < xmax)).concat([xmax]);
      const yedges = [ymin].concat(ybrks.filter((y) => y > ymin && y < ymax)).concat([ymax]);
      const bboxes = [];
      for (let i = 1; i < xedges.length; i++) {
        const xmin2 = xedges[i - 1];
        const xmax2 = xedges[i];
        for (let ii = 1; ii < yedges.length; ii++) {
          const ymin2 = yedges[ii - 1];
          const ymax2 = yedges[ii];
          bboxes.push([xmin2, ymin2, xmax2, ymax2]);
        }
      }
      return bboxes;
    }
    module2.exports = split;
    module2.exports.default = split;
  }
});

// node_modules/bbox-fns/merge.js
var require_merge = __commonJS({
  "node_modules/bbox-fns/merge.js"(exports2, module2) {
    "use strict";
    function merge(bboxes) {
      if (bboxes.length === 0)
        return;
      if (bboxes.length === 1)
        return bboxes[0];
      let [xmin, ymin, xmax, ymax] = bboxes[0];
      for (let i = 1; i < bboxes.length; i++) {
        const bbox = bboxes[i];
        if (bbox[0] < xmin)
          xmin = bbox[0];
        if (bbox[1] < ymin)
          ymin = bbox[1];
        if (bbox[2] > xmax)
          xmax = bbox[2];
        if (bbox[3] > ymax)
          ymax = bbox[3];
      }
      return [xmin, ymin, xmax, ymax];
    }
    module2.exports = merge;
    module2.exports.default = merge;
  }
});

// node_modules/bbox-fns/union.js
var require_union = __commonJS({
  "node_modules/bbox-fns/union.js"(exports2, module2) {
    "use strict";
    var booleanIntersects2 = require_boolean_intersects();
    var merge = require_merge();
    function union(bboxes) {
      if (bboxes.length === 0)
        return [];
      if (bboxes.length === 1)
        return [bboxes[0]];
      let results = [bboxes[0]];
      for (let i = 1; i < bboxes.length; i++) {
        const bbox = bboxes[i];
        const matches = results.filter((it) => booleanIntersects2(bbox, it));
        const merged = merge(matches.concat([bbox]));
        const unmatched = results.filter((it) => !matches.includes(it));
        results = [merged].concat(unmatched);
      }
      return results;
    }
    module2.exports = union;
    module2.exports.default = union;
  }
});

// node_modules/bbox-fns/unwrap.js
var require_unwrap = __commonJS({
  "node_modules/bbox-fns/unwrap.js"(exports2, module2) {
    "use_strict";
    var shift = require_shift();
    var sort = require_sort();
    var split = require_split();
    var union = require_union();
    function unwrap2(bbox, container) {
      const [global_xmin, global_ymin, global_xmax, global_ymax] = container;
      const global_width = global_xmax - global_xmin;
      const global_height = global_ymax - global_ymin;
      const breakpoints = {
        x: [global_xmin - global_width, global_xmin, global_xmax, global_xmax + global_width],
        y: [global_ymin - global_height, global_ymin, global_ymax, global_ymax + global_height]
      };
      let bboxes = split(bbox, breakpoints);
      bboxes = bboxes.map((b) => {
        const [xmin, ymin, xmax, ymax] = b;
        return shift(b, {
          x: Math.ceil((global_xmin - xmin) / global_width) * global_width,
          y: Math.ceil((global_ymin - ymin) / global_height) * global_height
        });
      });
      bboxes = union(bboxes);
      bboxes = sort(bboxes);
      return bboxes;
    }
    module2.exports = unwrap2;
    module2.exports.default = unwrap2;
  }
});

// node_modules/get-epsg-code/dist/get-epsg-code.node.min.js
var require_get_epsg_code_node_min = __commonJS({
  "node_modules/get-epsg-code/dist/get-epsg-code.node.min.js"(exports2, module2) {
    var oe = Object.defineProperty;
    var s = (A, e) => oe(A, "name", { value: e, configurable: true });
    var D = (A, e) => () => (e || A((e = { exports: {} }).exports, e), e.exports);
    var sA = D((rt, P) => {
      var B = {};
      B.char2bits = { 0: "110100", 1: "110101", 2: "110110", 3: "110111", 4: "111000", 5: "111001", 6: "111010", 7: "111011", 8: "111100", 9: "111101", A: "000000", Q: "010000", g: "100000", w: "110000", B: "000001", R: "010001", h: "100001", x: "110001", C: "000010", S: "010010", i: "100010", y: "110010", D: "000011", T: "010011", j: "100011", z: "110011", E: "000100", U: "010100", k: "100100", F: "000101", V: "010101", l: "100101", G: "000110", W: "010110", m: "100110", H: "000111", X: "010111", n: "100111", I: "001000", Y: "011000", o: "101000", J: "001001", Z: "011001", p: "101001", K: "001010", a: "011010", q: "101010", L: "001011", b: "011011", r: "101011", M: "001100", c: "011100", s: "101100", N: "001101", d: "011101", t: "101101", O: "001110", e: "011110", u: "101110", "+": "111110", P: "001111", f: "011111", v: "101111", "/": "111111" };
      B.toArrayBuffer = s(function(e) {
        var t = B.char2bits, r = 0;
        for (let f = e.length; f >= 0; f--)
          e[f] === "=" && r++;
        for (var o = e.length - r, g = Math.floor(0.75 * o), n = new Uint8Array(g), C = "", Q = 0; Q < o; Q++) {
          var i = e[Q];
          if (i === "=")
            break;
          C += t[i], C.length >= 8 && (n[Math.floor(0.75 * Q)] = parseInt(C.substring(0, 8), 2), C = C.substring(8));
        }
        return n.buffer;
      }, "toArrayBuffer");
      B.toBase64String = s(function(e) {
        if (!B.bits2char) {
          B.bits2char = {};
          for (let Q in B.char2bits)
            B.bits2char[B.char2bits[Q]] = Q;
        }
        for (var t = B.bits2char, r = new Uint8Array(e), o = "", g = "", n = 0; n < r.length; n++) {
          for (var C = r[n].toString(2); C.length < 8; )
            C = "0" + C;
          for (g += C; g.length >= 6; )
            o += t[g.substring(0, 6)], g = g.substring(6);
        }
        if (g.length > 0) {
          for (; g.length < 6; )
            g += "0";
          o += t[g];
        }
        for (; o.length % 4 !== 0; )
          o += "=";
        return o;
      }, "toBase64String");
      typeof define == "function" && define.amd && define(function() {
        return B;
      });
      typeof P == "object" && (P.exports = B);
      typeof window == "object" && (window.b64ab = B);
      typeof self == "object" && (self.b64ab = B);
    });
    var nA = D((gt, L) => {
      function QA(A, e, t) {
        let o = new RegExp(e).exec(A.slice(t));
        return o ? t + o.index : -1;
      }
      s(QA, "indexOfMatch");
      L.exports = QA;
      L.exports.default = QA;
    });
    var DA = D((st, T) => {
      function iA(A, e, t) {
        let o = new RegExp(e).exec(A.slice(t));
        return o ? t + o.index + o[0].length - 1 : -1;
      }
      s(iA, "indexOfMatchEnd");
      T.exports = iA;
      T.exports.default = iA;
    });
    var aA = D((nt, K) => {
      function fA(A, e) {
        let t = new RegExp(e, "g"), r = A.match(t);
        return r ? r.length : 0;
      }
      s(fA, "countSubstring");
      K.exports = fA;
      K.exports.default = fA;
    });
    var U = D((Dt, y) => {
      var ge = nA(), m = DA(), BA = aA();
      function EA(A, e, t) {
        let r = t && t.debug || false, o = !(t && typeof t.nested === false), g = t && t.startIndex || 0;
        r && console.log("[xml-utils] starting findTagByName with", e, " and ", t);
        let n = ge(A, `<${e}[ 
>/]`, g);
        if (r && console.log("[xml-utils] start:", n), n === -1)
          return;
        let C = A.slice(n + e.length), Q = m(C, "^[^<]*[ /]>", 0), i = Q !== -1 && C[Q - 1] === "/";
        if (r && console.log("[xml-utils] selfClosing:", i), i === false)
          if (o) {
            let J = 0, oA = 1, gA = 0;
            for (; (Q = m(C, "[ /]" + e + ">", J)) !== -1; ) {
              let CA = C.substring(J, Q + 1);
              if (oA += BA(CA, "<" + e + `[ 
	>]`), gA += BA(CA, "</" + e + ">"), gA >= oA)
                break;
              J = Q;
            }
          } else
            Q = m(C, "[ /]" + e + ">", 0);
        let f = n + e.length + Q + 1;
        if (r && console.log("[xml-utils] end:", f), f === -1)
          return;
        let a = A.slice(n, f), l;
        return i ? l = null : l = a.slice(a.indexOf(">") + 1, a.lastIndexOf("<")), { inner: l, outer: a, start: n, end: f };
      }
      s(EA, "findTagByName");
      y.exports = EA;
      y.exports.default = EA;
    });
    var lA = D((at, S) => {
      var Ce = U();
      function cA(A, e, t) {
        let r = [], o = t && t.debug || false, g = t && typeof t.nested == "boolean" ? t.nested : true, n = t && t.startIndex || 0, C;
        for (; C = Ce(A, e, { debug: o, startIndex: n }); )
          g ? n = C.start + 1 + e.length : n = C.end, r.push(C);
        return o && console.log("findTagsByName found", r.length, "tags"), r;
      }
      s(cA, "findTagsByName");
      S.exports = cA;
      S.exports.default = cA;
    });
    var uA = D((Et, V) => {
      var wA = lA();
      function dA(A, e, t) {
        let r = t && t.debug || false, o = t && t.returnOnFirst || false, g = wA(A, e.shift(), { debug: r, nested: false });
        r && console.log("first tags are:", g);
        for (let n = 0; n < e.length; n++) {
          let C = e[n];
          r && console.log("tagName:", C);
          let Q = [];
          for (let i = 0; i < g.length; i++) {
            let f = g[i], a = wA(f.outer, C, { debug: r, startIndex: 1 });
            if (r && console.log("subTags.length:", a.length), a.length > 0) {
              if (a.forEach((l) => {
                l.start += f.start, l.end += f.start;
              }), o && n === e.length - 1)
                return [a[0]];
              Q = Q.concat(a);
            }
          }
          g = Q;
        }
        return g;
      }
      s(dA, "findTagsByPath");
      V.exports = dA;
      V.exports.default = dA;
    });
    var GA = D((lt, k) => {
      var se = uA();
      function IA(A, e, t) {
        let r = t && t.debug || false, o = se(A, e, { debug: r, returnOnFirst: true });
        if (Array.isArray(o) && o.length === 1)
          return o[0];
      }
      s(IA, "findTagByPath");
      k.exports = IA;
      k.exports.default = IA;
    });
    var MA = D((dt, W) => {
      function hA(A, e, t) {
        let r = t && t.debug || false;
        r && console.log("[xml-utils] getting " + e + " in " + A);
        let o = typeof A == "object" ? A.outer : A, g = o.slice(0, o.indexOf(">") + 1), n = ['"', "'"];
        for (let C = 0; C < n.length; C++) {
          let Q = n[C], i = e + "\\=" + Q + "([^" + Q + "]*)" + Q;
          r && console.log("[xml-utils] pattern:", i);
          let a = new RegExp(i).exec(g);
          if (r && console.log("[xml-utils] match:", a), a)
            return a[1];
        }
      }
      s(hA, "getAttribute");
      W.exports = hA;
      W.exports.default = hA;
    });
    var FA = D((It, pA) => {
      "use strict";
      var d = 1, NA = 2, RA = 3, h = 4, OA = 5, Y = -1, Qe = /\s/, ne = /[A-Za-z]/, ie = /[A-Za-z84_]/, M = /[,\]]/, HA = /[\d\.E\-\+]/;
      function c(A) {
        if (typeof A != "string")
          throw new Error("not a string");
        this.text = A.trim(), this.level = 0, this.place = 0, this.root = null, this.stack = [], this.currentObject = null, this.state = d;
      }
      s(c, "Parser");
      c.prototype.readCharicter = function() {
        var A = this.text[this.place++];
        if (this.state !== h)
          for (; Qe.test(A); ) {
            if (this.place >= this.text.length)
              return;
            A = this.text[this.place++];
          }
        switch (this.state) {
          case d:
            return this.neutral(A);
          case NA:
            return this.keyword(A);
          case h:
            return this.quoted(A);
          case OA:
            return this.afterquote(A);
          case RA:
            return this.number(A);
          case Y:
            return;
        }
      };
      c.prototype.afterquote = function(A) {
        if (A === '"') {
          this.word += '"', this.state = h;
          return;
        }
        if (M.test(A)) {
          this.word = this.word.trim(), this.afterItem(A);
          return;
        }
        throw new Error(`havn't handled "` + A + '" in afterquote yet, index ' + this.place);
      };
      c.prototype.afterItem = function(A) {
        if (A === ",") {
          this.word !== null && this.currentObject.push(this.word), this.word = null, this.state = d;
          return;
        }
        if (A === "]") {
          this.level--, this.word !== null && (this.currentObject.push(this.word), this.word = null), this.state = d, this.currentObject = this.stack.pop(), this.currentObject || (this.state = Y);
          return;
        }
      };
      c.prototype.number = function(A) {
        if (HA.test(A)) {
          this.word += A;
          return;
        }
        if (M.test(A)) {
          this.word = parseFloat(this.word), this.afterItem(A);
          return;
        }
        throw new Error(`havn't handled "` + A + '" in number yet, index ' + this.place);
      };
      c.prototype.quoted = function(A) {
        if (A === '"') {
          this.state = OA;
          return;
        }
        this.word += A;
      };
      c.prototype.keyword = function(A) {
        if (ie.test(A)) {
          this.word += A;
          return;
        }
        if (A === "[") {
          var e = [];
          e.push(this.word), this.level++, this.root === null ? this.root = e : this.currentObject.push(e), this.stack.push(this.currentObject), this.currentObject = e, this.state = d;
          return;
        }
        if (M.test(A)) {
          this.afterItem(A);
          return;
        }
        throw new Error(`havn't handled "` + A + '" in keyword yet, index ' + this.place);
      };
      c.prototype.neutral = function(A) {
        if (ne.test(A)) {
          this.word = A, this.state = NA;
          return;
        }
        if (A === '"') {
          this.word = "", this.state = h;
          return;
        }
        if (HA.test(A)) {
          this.word = A, this.state = RA;
          return;
        }
        if (M.test(A)) {
          this.afterItem(A);
          return;
        }
        throw new Error(`havn't handled "` + A + '" in neutral yet, index ' + this.place);
      };
      c.prototype.output = function() {
        for (; this.place < this.text.length; )
          this.readCharicter();
        if (this.state === Y)
          return this.root;
        throw new Error('unable to parse string "' + this.text + '". State is ' + this.state);
      };
      function De(A) {
        var e = new c(A);
        return e.output();
      }
      s(De, "parseString");
      function xA(A, e, t) {
        Array.isArray(e) && (t.unshift(e), e = null);
        var r = e ? {} : A, o = t.reduce(function(g, n) {
          return w(n, g), g;
        }, r);
        e && (A[e] = o);
      }
      s(xA, "mapit");
      function w(A, e) {
        if (!Array.isArray(A)) {
          e[A] = true;
          return;
        }
        var t = A.shift();
        if (t === "PARAMETER" && (t = A.shift()), A.length === 1) {
          if (Array.isArray(A[0])) {
            e[t] = {}, w(A[0], e[t]);
            return;
          }
          e[t] = A[0];
          return;
        }
        if (!A.length) {
          e[t] = true;
          return;
        }
        if (t === "TOWGS84") {
          e[t] = A;
          return;
        }
        if (t === "AXIS") {
          t in e || (e[t] = []), e[t].push(A);
          return;
        }
        Array.isArray(t) || (e[t] = {});
        var r;
        switch (t) {
          case "UNIT":
          case "PRIMEM":
          case "VERT_DATUM":
            e[t] = { name: A[0].toLowerCase(), convert: A[1] }, A.length === 3 && w(A[2], e[t]);
            return;
          case "SPHEROID":
          case "ELLIPSOID":
            e[t] = { name: A[0], a: A[1], rf: A[2] }, A.length === 4 && w(A[3], e[t]);
            return;
          case "PROJECTEDCRS":
          case "PROJCRS":
          case "GEOGCS":
          case "GEOCCS":
          case "PROJCS":
          case "LOCAL_CS":
          case "GEODCRS":
          case "GEODETICCRS":
          case "GEODETICDATUM":
          case "EDATUM":
          case "ENGINEERINGDATUM":
          case "VERT_CS":
          case "VERTCRS":
          case "VERTICALCRS":
          case "COMPD_CS":
          case "COMPOUNDCRS":
          case "ENGINEERINGCRS":
          case "ENGCRS":
          case "FITTED_CS":
          case "LOCAL_DATUM":
          case "DATUM":
            A[0] = ["name", A[0]], xA(e, t, A);
            return;
          default:
            for (r = -1; ++r < A.length; )
              if (!Array.isArray(A[r]))
                return w(A, e[t]);
            return xA(e, t, A);
        }
      }
      s(w, "sExpr");
      var fe = 0.017453292519943295;
      function ae(A, e) {
        var t = e[0], r = e[1];
        !(t in A) && r in A && (A[t] = A[r], e.length === 3 && (A[t] = e[2](A[t])));
      }
      s(ae, "rename");
      function E(A) {
        return A * fe;
      }
      s(E, "d2r");
      function Be(A) {
        if (A.type === "GEOGCS" ? A.projName = "longlat" : A.type === "LOCAL_CS" ? (A.projName = "identity", A.local = true) : typeof A.PROJECTION == "object" ? A.projName = Object.keys(A.PROJECTION)[0] : A.projName = A.PROJECTION, A.AXIS) {
          for (var e = "", t = 0, r = A.AXIS.length; t < r; ++t) {
            var o = [A.AXIS[t][0].toLowerCase(), A.AXIS[t][1].toLowerCase()];
            o[0].indexOf("north") !== -1 || (o[0] === "y" || o[0] === "lat") && o[1] === "north" ? e += "n" : o[0].indexOf("south") !== -1 || (o[0] === "y" || o[0] === "lat") && o[1] === "south" ? e += "s" : o[0].indexOf("east") !== -1 || (o[0] === "x" || o[0] === "lon") && o[1] === "east" ? e += "e" : (o[0].indexOf("west") !== -1 || (o[0] === "x" || o[0] === "lon") && o[1] === "west") && (e += "w");
          }
          e.length === 2 && (e += "u"), e.length === 3 && (A.axis = e);
        }
        A.UNIT && (A.units = A.UNIT.name.toLowerCase(), A.units === "metre" && (A.units = "meter"), A.UNIT.convert && (A.type === "GEOGCS" ? A.DATUM && A.DATUM.SPHEROID && (A.to_meter = A.UNIT.convert * A.DATUM.SPHEROID.a) : A.to_meter = A.UNIT.convert));
        var g = A.GEOGCS;
        A.type === "GEOGCS" && (g = A), g && (g.DATUM ? A.datumCode = g.DATUM.name.toLowerCase() : A.datumCode = g.name.toLowerCase(), A.datumCode.slice(0, 2) === "d_" && (A.datumCode = A.datumCode.slice(2)), (A.datumCode === "new_zealand_geodetic_datum_1949" || A.datumCode === "new_zealand_1949") && (A.datumCode = "nzgd49"), (A.datumCode === "wgs_1984" || A.datumCode === "world_geodetic_system_1984") && (A.PROJECTION === "Mercator_Auxiliary_Sphere" && (A.sphere = true), A.datumCode = "wgs84"), A.datumCode.slice(-6) === "_ferro" && (A.datumCode = A.datumCode.slice(0, -6)), A.datumCode.slice(-8) === "_jakarta" && (A.datumCode = A.datumCode.slice(0, -8)), ~A.datumCode.indexOf("belge") && (A.datumCode = "rnb72"), g.DATUM && g.DATUM.SPHEROID && (A.ellps = g.DATUM.SPHEROID.name.replace("_19", "").replace(/[Cc]larke\_18/, "clrk"), A.ellps.toLowerCase().slice(0, 13) === "international" && (A.ellps = "intl"), A.a = g.DATUM.SPHEROID.a, A.rf = parseFloat(g.DATUM.SPHEROID.rf, 10)), g.DATUM && g.DATUM.TOWGS84 && (A.datum_params = g.DATUM.TOWGS84), ~A.datumCode.indexOf("osgb_1936") && (A.datumCode = "osgb36"), ~A.datumCode.indexOf("osni_1952") && (A.datumCode = "osni52"), (~A.datumCode.indexOf("tm65") || ~A.datumCode.indexOf("geodetic_datum_of_1965")) && (A.datumCode = "ire65"), A.datumCode === "ch1903+" && (A.datumCode = "ch1903"), ~A.datumCode.indexOf("israel") && (A.datumCode = "isr93")), A.b && !isFinite(A.b) && (A.b = A.a);
        function n(i) {
          var f = A.to_meter || 1;
          return i * f;
        }
        s(n, "toMeter");
        var C = s(function(i) {
          return ae(A, i);
        }, "renamer"), Q = [["standard_parallel_1", "Standard_Parallel_1"], ["standard_parallel_1", "Latitude of 1st standard parallel"], ["standard_parallel_2", "Standard_Parallel_2"], ["standard_parallel_2", "Latitude of 2nd standard parallel"], ["false_easting", "False_Easting"], ["false_easting", "False easting"], ["false-easting", "Easting at false origin"], ["false_northing", "False_Northing"], ["false_northing", "False northing"], ["false_northing", "Northing at false origin"], ["central_meridian", "Central_Meridian"], ["central_meridian", "Longitude of natural origin"], ["central_meridian", "Longitude of false origin"], ["latitude_of_origin", "Latitude_Of_Origin"], ["latitude_of_origin", "Central_Parallel"], ["latitude_of_origin", "Latitude of natural origin"], ["latitude_of_origin", "Latitude of false origin"], ["scale_factor", "Scale_Factor"], ["k0", "scale_factor"], ["latitude_of_center", "Latitude_Of_Center"], ["latitude_of_center", "Latitude_of_center"], ["lat0", "latitude_of_center", E], ["longitude_of_center", "Longitude_Of_Center"], ["longitude_of_center", "Longitude_of_center"], ["longc", "longitude_of_center", E], ["x0", "false_easting", n], ["y0", "false_northing", n], ["long0", "central_meridian", E], ["lat0", "latitude_of_origin", E], ["lat0", "standard_parallel_1", E], ["lat1", "standard_parallel_1", E], ["lat2", "standard_parallel_2", E], ["azimuth", "Azimuth"], ["alpha", "azimuth", E], ["srsCode", "name"]];
        Q.forEach(C), !A.long0 && A.longc && (A.projName === "Albers_Conic_Equal_Area" || A.projName === "Lambert_Azimuthal_Equal_Area") && (A.long0 = A.longc), !A.lat_ts && A.lat1 && (A.projName === "Stereographic_South_Pole" || A.projName === "Polar Stereographic (variant B)") ? (A.lat0 = E(A.lat1 > 0 ? 90 : -90), A.lat_ts = A.lat1) : !A.lat_ts && A.lat0 && A.projName === "Polar_Stereographic" && (A.lat_ts = A.lat0, A.lat0 = E(A.lat0 > 0 ? 90 : -90));
      }
      s(Be, "cleanWKT");
      var Ee = s(function(A) {
        var e = De(A), t = e.shift(), r = e.shift();
        e.unshift(["name", r]), e.unshift(["type", t]);
        var o = {};
        return w(e, o), Be(o), o;
      }, "index");
      pA.exports = Ee;
    });
    var JA = D((ht, x) => {
      function q(A) {
        if (!A)
          return;
        let e = /PROJCS\[\"([^"]+)\"/.exec(A);
        if (!e)
          return;
        let t = e[1];
        if (t.match(/^WGS_1984_UTM_Zone_\d{1,2}(N|S)$/)) {
          let r = t.split("_").pop(), o = r.substring(0, r.length - 1), g = r.substring(r.length - 1) == "N" ? 6 : 7;
          return Number.parseInt("32" + g + o);
        } else if (t.match(/^NAD_1983_UTM_Zone_\d{1,2}N$/)) {
          let r = t.split("_").pop(), o = r.substring(0, r.length - 1);
          return Number.parseInt("269" + o);
        }
      }
      s(q, "getCodeFromEsriWKT");
      typeof define == "function" && define.amd && define(function() {
        return q;
      });
      typeof x == "object" && (x.exports = q, x.exports.default = q);
    });
    var PA = D((xt, N) => {
      function X(A) {
        if (A.includes("+proj=utm") && A.includes("+zone=")) {
          let e = A.split(" "), t = e.find((g) => g.startsWith("+zone=")).split("=")[1], r = A.includes("+south"), o = e.find((g) => g.startsWith("+ellps="));
          if (o && (o = o.split("=")[1]), o === "GRS80" && r === false)
            return Number.parseInt("269" + t);
          {
            let g = r ? "7" : "6";
            return Number.parseInt("32" + g + t);
          }
        }
      }
      s(X, "getCodeFromProjString");
      typeof define == "function" && define.amd && define(function() {
        return X;
      });
      typeof N == "object" && (N.exports = X, N.exports.default = X);
    });
    var TA = D((Rt, Z) => {
      function LA(A) {
        A = A.trim(), A = A.replace(/\n/g, " "), A = A.replace(/\t/g, " "), A = A.replace(/ +/g, " ");
        let e = 0, t, r;
        if (A.length === 0)
          return e;
        let o = A.length;
        for (t = 0; t < o; t++)
          r = A.charCodeAt(t), e = (e << 5) - e + r, e |= 0;
        return e;
      }
      s(LA, "hash32");
      Z.exports = LA;
      Z.exports.default = LA;
    });
    var v = D((Ht, b) => {
      function KA(A, { keywords: e } = {}) {
        let t = Object.keys(A).filter((r) => !/\d+/.test(r));
        if (!e) {
          e = [];
          let r = {};
          if (Array.isArray(A)) {
            A.forEach((o) => {
              if (Array.isArray(o) && o.length >= 2 && typeof o[1] == "string") {
                let g = o[0];
                r[g] || (r[g] = 0), r[g]++;
              }
            });
            for (let o in r)
              r[o] > 0 && e.push(o);
          }
        }
        return t.forEach((r) => {
          A[r] = KA(A[r]);
        }), e.forEach((r) => {
          let o = [], g = [];
          A.forEach((n, C) => {
            Array.isArray(n) && n[0] === r && (o.push(C), g.push(n));
          }), g.sort((n, C) => (n = n[1].toString(), C = C[1].toString(), n < C ? -1 : n > C ? 1 : 0)), g.forEach((n, C) => {
            A[o[C]] = n;
          });
        }), A;
      }
      s(KA, "sort");
      function ce(A, e) {
        let t = typeof e == "object" && e.raw === true, r = typeof e == "object" && e.debug === true;
        r && console.log(`[wktcrs] parse starting with
`, A), A = A.replace(/[A-Z][A-Z\d_]+\[/gi, function(C) {
          return '["' + C.substr(0, C.length - 1) + '",';
        }), A = A.replace(/, ?([A-Z][A-Z\d_]+[,\]])/gi, function(C, Q) {
          let i = Q.substr(0, Q.length - 1);
          return ',"' + (t ? "raw:" : "") + i + '"' + Q[Q.length - 1];
        }), typeof e == "object" && e.raw === true && (A = A.replace(/, {0,2}(-?[\.\d]+)(?=,|\])/g, function(C, Q) {
          return ',"' + (t ? "raw:" : "") + Q + '"';
        })), r && console.log("[wktcrs] json'd wkt: '" + A + "'");
        let o;
        try {
          o = JSON.parse(A);
        } catch (C) {
          throw console.error(`[wktcrs] failed to parse '${A}'`), C;
        }
        r && console.log("[wktcrs] json parsed: '" + A + "'");
        function g(C, Q) {
          let i = C[0];
          C.forEach(function(a) {
            Array.isArray(a) && g(a, C);
          });
          let f = "MULTIPLE_" + i;
          return f in Q ? Q[f].push(C) : i in Q ? (Q[f] = [Q[i], C], delete Q[i]) : Q[i] = C, Q;
        }
        s(g, "process");
        let n = g(o, [o]);
        return r && console.log("[wktcrs] parse returning", n), { data: n };
      }
      s(ce, "parse");
      function mA(A, e) {
        Array.isArray(A) && A.length == 1 && Array.isArray(A[0]) && (A = A[0]);
        let [t, ...r] = A;
        return { data: t + "[" + r.map((g) => {
          if (Array.isArray(g))
            return mA(g, e).data;
          if (typeof g == "number")
            return g.toString();
          if (typeof g == "string")
            return g.startsWith("raw:") ? g.replace("raw:", "") : '"' + g + '"';
          throw new Error('[wktcrs] unexpected attribute "' + g + '"');
        }).join(",") + "]" };
      }
      s(mA, "unparse");
      var R = { parse: ce, unparse: mA, sort: KA };
      typeof define == "function" && define(function() {
        return R;
      });
      typeof b == "object" && (b.exports = R);
      typeof window == "object" && (window.wktcrs = R);
      typeof self == "object" && (self.wktcrs = R);
    });
    var UA = D((Ft, z) => {
      var j = v();
      function le(A) {
        let { data: e } = j.parse(A, { raw: true });
        return j.sort(e), j.unparse(e, { raw: true }).data;
      }
      s(le, "sort_wkt");
      function yA(A, { debug: e = false } = { debug: false }) {
        return A = A.trim(), A = A.replace(/\n/g, " "), A = A.replace(/\t/g, " "), A = A.replace(/ +/g, " "), A = A.replace(/ /g, "_"), A = A.replace('GEOGCS["GCS_', 'GEOGCS["'), A = A.replace('DATUM["D_', 'DATUM["'), A = A.replace("Gauss_Kruger", "GK"), A = A.replace(/\.\d{16,}/g, (t) => t.substr(0, 16)), A = A.replace(/\d+\.0[,"'\]]/g, (t) => t.substring(0, t.indexOf(".")) + t.charAt(t.length - 1)), A = A.replace(/[_|"]1984[_|"]/g, (t) => t.charAt(0) + "84" + t.charAt(t.length - 1)), A = A.replace(/"[A-Za-z_\d]+"/g, (t) => '"' + t.substring(1, t.length - 1).toLowerCase() + '"'), A = le(A), e && console.log('[get-epsg-code] wkt after cleaning: "' + A + '"'), A;
      }
      s(yA, "normalize_wkt");
      z.exports = yA;
      z.exports.default = yA;
    });
    var VA = D((Pt, _) => {
      var we = UA();
      function SA(A, { debug: e = false } = { debug: false }) {
        return we(A, { debug: e });
      }
      s(SA, "normalize_esriwkt");
      _.exports = SA;
      _.exports.default = SA;
    });
    var WA = D((Tt, $) => {
      function kA(A, { debug: e = false, remove_k1: t = true, remove_no_defs: r = true, remove_title: o = true, remove_init: g = true, remove_type: n = true } = {}) {
        A = A.trim(), A = A.replace(/ +/g, " ");
        let C = A.split(/ ?\+/g).filter((Q) => Q.trim() !== "").sort();
        return t && (C = C.filter((Q) => Q !== "k=1")), r && (C = C.filter((Q) => Q !== "no_defs")), n && (C = C.filter((Q) => !Q.startsWith("type"))), g && (C = C.filter((Q) => !Q.startsWith("init"))), o && (C = C.filter((Q) => !Q.startsWith("title"))), A = C.map((Q) => "+" + Q).join(" "), e && console.log(`normalized proj4 string
from "` + arguments[0] + `"
to "` + A + '"'), A;
      }
      s(kA, "normalize_proj4");
      $.exports = kA;
      $.exports.default = kA;
    });
    var qA = D((mt, O) => {
      var YA = ["PROJECTEDCRS", "PROJCRS", "GEOGCS", "GEOCCS", "PROJCS", "LOCAL_CS", "GEODCRS", "GEODETICCRS", "GEODETICDATUM", "ENGCRS", "ENGINEERINGCRS", "PRIMEM", "DATUM"];
      function u(A) {
        if (A = A.trim(), A.startsWith("PROJCS[") || A.startsWith("PROJCRS[") || A.startsWith("GEOGCS[") || A.startsWith("GEOGCRS["))
          for (let e = 0; e < YA.length; e++) {
            let t = YA[e];
            if (A.includes(t + "["))
              return true;
          }
        else
          return false;
      }
      s(u, "isWKT");
      typeof define == "function" && define.amd && define(function() {
        return u;
      });
      typeof O == "object" && (O.exports = u, O.exports.default = u);
      typeof self == "object" && (self.isWKT = u);
      typeof window == "object" && (window.isWKT = u);
    });
    var AA = D((Ut, XA) => {
      var de = { ESRI_WKT: "esriwkt", GEOSERVER: "geoserver", MAPFILE: "mapfile", MAPNIK: "mapnik", OGC_GML: "gml", OGC_XML: "xml", OGC_WKT: "wkt", POSTGIS: "postgis", PROJ_4: "proj4", PROJ_4_JS: "js", PROJJSON: "PROJJSON", WKT_2: "wkt2" };
      XA.exports = { FORMATS: de };
    });
    var bA = D((St, eA) => {
      var ue = qA(), Ie = v(), { FORMATS: Ge } = AA(), { ESRI_WKT: he, GEOSERVER: Me, MAPFILE: xe, MAPNIK: Ne, OGC_GML: Re, OGC_XML: Oe, OGC_WKT: He, POSTGIS: pe, PROJ_4: Fe, PROJ_4_JS: Je, PROJJSON: Pe, WKT_2: Le } = Ge;
      function ZA(A, { debug: e = false } = { debug: false }) {
        if (A.startsWith("{") && A.includes("projjson"))
          return Pe;
        if (ue(A)) {
          let t = Ie.parse(A.toUpperCase()).data;
          return "AUTHORITY" in (t.PROJCS || t.PROJCRS || t.GEOGCS || t.GEOGCRS) ? He : "ID" in t ? Le : he;
        } else
          return A.includes("gml:ProjectedCRS") || A.includes("gml:GeodeticCRS") || A.includes("gml:GeographicCRS") ? A.includes("gml:srsID") ? Oe : Re : A.startsWith("+") && A.includes("+proj=") ? Fe : A.startsWith("proj4.defs(") ? Je : /^\d{1,6}\=(PROJCS|GEOGCS)/.test(A) ? Me : A.startsWith("PROJECTION") && A.endsWith("END") ? xe : A.endsWith("</Map>") ? Ne : A.startsWith("INSERT") ? pe : (e && console.log('get-proj-type could not identify "' + A + '"'), "SOMETHING ELSE");
      }
      s(ZA, "getProjType");
      eA.exports = ZA;
      eA.exports.default = ZA;
    });
    var jA = D((kt, tA) => {
      function vA(A, { debug: e = false } = { debug: false }) {
        let t = A.indexOf(":") + 1, r = A.indexOf('"', t + 2), o = A.substring(t, r);
        if (e && console.log('parseProj4JS str: "' + o + '"'), o)
          return Number(o);
      }
      s(vA, "parseProj4JS");
      tA.exports = vA;
      tA.exports.default = vA;
    });
    var zA = D((Yt, Te) => {
      Te.exports = { properties: { columns: ["epsg_code", "esriwkt", "mapfile", "proj4"], key: "epsg_code", dataType: "int32" }, data: "" };
    });
    var Ke = sA();
    var me = GA();
    var _A = U();
    var ye = MA();
    var $A = FA();
    var Ue = JA();
    var Se = PA();
    var Ve = TA();
    var ke = VA();
    var We = WA();
    var Ye = bA();
    var qe = jA();
    var { FORMATS: Xe } = AA();
    var p = zA();
    var H = s((A) => A.default || A, "getDefault");
    var I = [];
    function re(A) {
      let e = Ke.toArrayBuffer(p.data), t = new Int32Array(e);
      A && console.log("arr:", t);
      let r = p.properties.columns.length, o = t.length / r;
      for (let g = 0; g < o; g++) {
        let n = {};
        for (let C = 0; C < r; C++)
          n[p.properties.columns[C]] = t[g * r + C];
        I.push(n);
      }
      return A && console.log("[get-epsg-code] rows:", I), I;
    }
    s(re, "_load_rows");
    function rA(A, e, t = false) {
      if (!p.properties.columns.includes(e))
        throw new Error("[get-epsg-code] " + e + " not supported");
      I.length === 0 && re(t);
      let r = Ve(A);
      t && console.log("[get-epsg-code] hashed:", r);
      let o = I.filter((g) => g[e] === r);
      return t && console.log("[get-epsg-code] found:", o), o.map((g) => g.epsg_code);
    }
    s(rA, "lookup");
    var { ESRI_WKT: Ae, GEOSERVER: Ze, MAPFILE: ee, MAPNIK: be, OGC_GML: ve, OGC_XML: je, OGC_WKT: ze, POSTGIS: _e, PROJJSON: $e, PROJ_4: te, PROJ_4_JS: At, WKT_2: et } = Xe;
    function G(A, e) {
      var t = e && e.debug ? e.debug : false;
      typeof A == "string" && (A = A.trim());
      let r = Ye(A, { debug: t });
      if (t && console.log("dataType:", r), r === ze) {
        let o = H($A)(A);
        if (t && console.log("parsed:", o), o.AUTHORITY) {
          let g = o.AUTHORITY;
          return { type: r, codes: [Number(g.epsg || g.EPSG)] };
        }
      } else if (r === et) {
        let o = H($A)(A);
        if (t && console.log("parsed:", o), typeof o.ID == "object" && typeof o.ID.EPSG == "number")
          return { type: r, codes: [o.ID.EPSG] };
      } else if (r == Ae) {
        let o = Ue(A);
        return o ? { type: r, codes: [o] } : (A = ke(A, { debug: t }), { type: r, codes: rA(A, Ae, t) });
      } else if (r === ve) {
        let o = H(_A)(A, "gml:identifier", { debug: t }).inner;
        return { type: r, codes: [Number(o.replace("urn:ogc:def:crs:EPSG::", ""))] };
      } else {
        if (r === je)
          return { type: r, codes: [Number(H(me)(A, ["gml:srsID", "gml:name"], { debug: t }).inner)] };
        if (r === te)
          return A = We(A, { debug: t }), A.startsWith("+") && A.includes("+proj=utm") ? { type: r, codes: [Se(A)] } : { type: r, codes: rA(A, te, t) };
        if (r === At) {
          let o = qe(A);
          return { type: r, codes: o ? [o] : [] };
        } else {
          if (r === Ze)
            return { type: r, codes: [Number(A.match(/^\d{1,6}/)[0])] };
          if (r === ee) {
            if (A.includes("init=epsg:"))
              return { type: r, codes: [Number.parseInt(/("init\=epsg:)(\d{1,10})(")/.exec(A)[2])] };
            if (A.includes('"proj=utm"')) {
              let o = /("zone\=)(\d{1,2})(")/.exec(A)[2], g = A.includes('"south"');
              if (A.includes("ellps=GRS80") && g === false)
                return { type: r, codes: [Number.parseInt("269" + o)] };
              {
                let n = g ? "7" : "6";
                return { type: r, codes: [Number.parseInt("32" + n + o)] };
              }
            } else
              return { type: r, codes: rA(A, ee, t) };
          } else if (r === be) {
            let o = _A(A, "Map"), g = ye(o.outer, "srs");
            return { type: r, codes: G(g).codes };
          } else {
            if (r === _e)
              return { type: r, codes: [Number(A.substring(A.indexOf("values (") + 8, A.indexOf("EPSG") - 3).trim())] };
            if (r === $e) {
              let o = JSON.parse(A);
              if (typeof o.id == "object" && (o.id.authority === "EPSG" || !("authority" in o.id)) && typeof o.id.code == "number")
                return { type: r, codes: [o.id.code] };
            }
          }
        }
      }
    }
    s(G, "getEPSGCodes");
    function F(A, e) {
      let t = G(A, e);
      if (t)
        return t.codes[0];
    }
    s(F, "getEPSGCode");
    typeof module2 < "u" && typeof module2.exports < "u" && (module2.exports = F, module2.exports.getEPSGCode = F, module2.exports.getEPSGCodes = G, module2.exports._load_rows = re);
    typeof window < "u" ? (window.getEPSGCode = F, window.getEPSGCodes = G) : typeof self < "u" && (self.getEPSGCode = F, self.getEPSGCodes = G);
  }
});

// node_modules/geography-markup-language/dist/geography-markup-language.cjs
var require_geography_markup_language = __commonJS({
  "node_modules/geography-markup-language/dist/geography-markup-language.cjs"(exports2, module2) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __commonJS2 = (cb, mod) => function __require() {
      return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var require_polygon = __commonJS2({
      "node_modules/.pnpm/bbox-fns@0.6.0/node_modules/bbox-fns/polygon.js"(exports3, module22) {
        function polygon([x0, y0, x1, y1]) {
          return [
            [
              [x0, y1],
              // top-left
              [x0, y0],
              // bottom-left
              [x1, y0],
              // bottom-right
              [x1, y1],
              // top-right
              [x0, y1]
              // top-left
            ]
          ];
        }
        module22.exports = polygon;
        module22.exports.default = polygon;
      }
    });
    var require_get_attribute = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/get-attribute.js"(exports3, module22) {
        function getAttribute8(tag, attributeName, options) {
          const debug = options && options.debug || false;
          if (debug)
            console.log("getting " + attributeName + " in " + tag);
          const xml = typeof tag === "object" ? tag.outer : tag;
          const pattern = `${attributeName}\\="([^"]*)"`;
          if (debug)
            console.log("pattern:", pattern);
          const re = new RegExp(pattern);
          const match = re.exec(xml);
          if (debug)
            console.log("match:", match);
          if (match)
            return match[1];
        }
        module22.exports = getAttribute8;
        module22.exports.default = getAttribute8;
      }
    });
    var require_index_of_match = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/index-of-match.js"(exports3, module22) {
        function indexOfMatch(xml, pattern, startIndex) {
          const re = new RegExp(pattern);
          const match = re.exec(xml.slice(startIndex));
          if (match)
            return startIndex + match.index;
          else
            return -1;
        }
        module22.exports = indexOfMatch;
        module22.exports.default = indexOfMatch;
      }
    });
    var require_index_of_match_end = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/index-of-match-end.js"(exports3, module22) {
        function indexOfMatchEnd(xml, pattern, startIndex) {
          const re = new RegExp(pattern);
          const match = re.exec(xml.slice(startIndex));
          if (match)
            return startIndex + match.index + match[0].length - 1;
          else
            return -1;
        }
        module22.exports = indexOfMatchEnd;
        module22.exports.default = indexOfMatchEnd;
      }
    });
    var require_count_substring = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/count-substring.js"(exports3, module22) {
        function countSubstring(string, substring) {
          const pattern = new RegExp(substring, "g");
          const match = string.match(pattern);
          return match ? match.length : 0;
        }
        module22.exports = countSubstring;
        module22.exports.default = countSubstring;
      }
    });
    var require_find_tag_by_name = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/find-tag-by-name.js"(exports3, module22) {
        var indexOfMatch = require_index_of_match();
        var indexOfMatchEnd = require_index_of_match_end();
        var countSubstring = require_count_substring();
        function findTagByName4(xml, tagName, options) {
          const debug = options && options.debug || false;
          const nested = !(options && typeof options.nested === false);
          const startIndex = options && options.startIndex || 0;
          if (debug)
            console.log("[xml-utils] starting findTagByName with", tagName, " and ", options);
          const start = indexOfMatch(xml, `<${tagName}[ >/]`, startIndex);
          if (debug)
            console.log("[xml-utils] start:", start);
          if (start === -1)
            return void 0;
          const afterStart = xml.slice(start + tagName.length);
          let relativeEnd = indexOfMatchEnd(afterStart, "^[^<]*[ /]>", 0);
          const selfClosing = relativeEnd !== -1 && afterStart[relativeEnd - 1] === "/";
          if (debug)
            console.log("[xml-utils] selfClosing:", selfClosing);
          if (selfClosing === false) {
            if (nested) {
              let startIndex2 = 0;
              let openings = 1;
              let closings = 0;
              while ((relativeEnd = indexOfMatchEnd(afterStart, "[ /]" + tagName + ">", startIndex2)) !== -1) {
                const clip = afterStart.substring(startIndex2, relativeEnd + 1);
                openings += countSubstring(clip, "<" + tagName);
                closings += countSubstring(clip, "/" + tagName + ">");
                if (closings >= openings)
                  break;
                startIndex2 = relativeEnd;
              }
            } else {
              relativeEnd = indexOfMatchEnd(afterStart, "[ /]" + tagName + ">", 0);
            }
          }
          const end = start + tagName.length + relativeEnd + 1;
          if (debug)
            console.log("[xml-utils] end:", end);
          if (end === -1)
            return void 0;
          const outer = xml.slice(start, end);
          let inner;
          if (selfClosing) {
            inner = null;
          } else {
            inner = outer.slice(outer.indexOf(">") + 1, outer.lastIndexOf("<"));
          }
          return { inner, outer, start, end };
        }
        module22.exports = findTagByName4;
        module22.exports.default = findTagByName4;
      }
    });
    var require_find_tags_by_name = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/find-tags-by-name.js"(exports3, module22) {
        var findTagByName4 = require_find_tag_by_name();
        function findTagsByName3(xml, tagName, options) {
          const tags = [];
          const debug = options && options.debug || false;
          const nested = options && typeof options.nested === "boolean" ? options.nested : true;
          let startIndex = options && options.startIndex || 0;
          let tag;
          while (tag = findTagByName4(xml, tagName, { debug, startIndex })) {
            if (nested) {
              startIndex = tag.start + 1 + tagName.length;
            } else {
              startIndex = tag.end;
            }
            tags.push(tag);
          }
          if (debug)
            console.log("findTagsByName found", tags.length, "tags");
          return tags;
        }
        module22.exports = findTagsByName3;
        module22.exports.default = findTagsByName3;
      }
    });
    var geography_markup_language_exports = {};
    __export2(geography_markup_language_exports, {
      Envelope: () => Envelope2,
      Geometry: () => Geometry,
      LineString: () => LineString3,
      Point: () => Point3,
      Polygon: () => Polygon4,
      findGeometries: () => geometries
    });
    module2.exports = __toCommonJS2(geography_markup_language_exports);
    var import_polygon = __toESM2(require_polygon(), 1);
    var import_get_attribute = __toESM2(require_get_attribute(), 1);
    var import_find_tags_by_name = __toESM2(require_find_tags_by_name(), 1);
    function find(xml, names) {
      for (let i = 0; i < names.length; i++) {
        const name = names[i];
        const tags = (0, import_find_tags_by_name.default)(xml, name);
        if (tags.length >= 1) {
          return tags;
        }
      }
      return [];
    }
    var Envelope_default = ["gml:envelope", "envelope", "gml:Envelope", "Envelope"];
    function envelope(xml) {
      return find(xml, Envelope_default)[0];
    }
    var import_find_tag_by_name = __toESM2(require_find_tag_by_name(), 1);
    function reorder(point) {
      const y = point[0];
      const x = point[1];
      const rest = point.slice(2);
      return [x, y].concat(rest);
    }
    function lowerCorner(xml, { order = "default", raw = false } = {}) {
      const tag = (0, import_find_tag_by_name.default)(xml, "gml:lowerCorner") || (0, import_find_tag_by_name.default)("lowerCorner");
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      let point = inner.trim().split(/[ ,]+/g);
      if (!raw)
        point = point.map((n) => Number(n));
      if (order === "geojson")
        point = reorder(point);
      return point;
    }
    var import_find_tag_by_name2 = __toESM2(require_find_tag_by_name(), 1);
    function upperCorner(xml, { order = "default", raw = false } = {}) {
      const tag = (0, import_find_tag_by_name2.default)(xml, "gml:upperCorner") || (0, import_find_tag_by_name2.default)("upperCorner");
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      let point = inner.trim().split(/[ ,]+/g);
      if (!raw)
        point = point.map((n) => Number(n));
      if (order === "geojson")
        point = reorder(point);
      return point;
    }
    function envelope2(xml, { raw = false } = {}) {
      const tag = envelope(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      const lowerCorner2 = lowerCorner(inner, { raw });
      if (!lowerCorner2)
        return;
      const upperCorner2 = upperCorner(inner, { raw });
      if (!upperCorner2)
        return;
      if (lowerCorner2.length !== upperCorner2.length) {
        throw new Error("[geography-markup-language/parse/envelope] inconsistent number of dimensions");
      }
      const srs2 = (0, import_get_attribute.default)(tag.outer, "srsName") || null;
      return { srs: srs2, corners: [lowerCorner2, upperCorner2] };
    }
    function Envelope2(xml, { format = "default" } = {}) {
      let order = "default";
      let raw = false;
      if (format === "geojson") {
        order = "geojson";
      }
      const obj2 = envelope2(xml, { order, raw });
      if (!obj2)
        return;
      if (!format || format === "default")
        return obj2;
      const { srs: srs2, corners } = obj2;
      const [lowerCorner2, upperCorner2] = corners;
      if (format === "bbox" || format === "geojson") {
        const [ymin, xmin, ...lowerCornerRest] = lowerCorner2;
        const [ymax, xmax, ...upperCornerRest] = upperCorner2;
        if (format === "bbox") {
          return [xmin, ymin, ...lowerCornerRest, xmax, ymax, ...upperCornerRest];
        } else if (format === "geojson") {
          const bbox = [xmin, ymin, xmax, ymax];
          const feature = {
            type: "Feature",
            bbox,
            properties: {},
            geometry: {
              type: "Polygon",
              coordinates: (0, import_polygon.default)(bbox)
            }
          };
          if (srs2) {
            feature.properties.srsName = srs2;
            feature.crs = {
              type: "name",
              properties: {
                name: srs2
              }
            };
          }
          return feature;
        }
      }
    }
    var import_get_attribute4 = __toESM2(require_get_attribute(), 1);
    var LineString_default = ["gml:LineString", "LineString", "gml:lineString", "lineString", "gml:linestring", "linestring"];
    function LineString(xml) {
      return find(xml, LineString_default)[0];
    }
    var import_get_attribute2 = __toESM2(require_get_attribute(), 1);
    function coordinates(xml) {
      return find(xml, ["gml:coordinates", "coordinates", "gml:Coordinates", "Coordinates"])[0];
    }
    function chunk(arr, chunkSize = 2) {
      const result = [];
      for (let i = 0; i < arr.length; i += chunkSize) {
        const chunk2 = [];
        for (let c = 0; c < chunkSize; c++) {
          chunk2.push(arr[i + c]);
        }
        result.push(chunk2);
      }
      return result;
    }
    function coordinates2(xml, { debug = false, order = "default", raw = false } = {}) {
      const tag = coordinates(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      let nums = inner.trim().split(/[ ,\t\n]+/g);
      if (!raw) {
        if (debug)
          console.log("[geography-markup-language] converting to numbers");
        nums = nums.map((n) => Number(n));
      }
      const srsDimension = (0, import_get_attribute2.default)(tag, "srsDimension");
      const chunkSize = srsDimension ? Number(srsDimension) : 2;
      let points = chunk(nums, chunkSize);
      if (order === "geojson") {
        points = points.map((pt) => reorder(pt));
      }
      if (points.length === 1) {
        return points[0];
      } else {
        return points;
      }
    }
    var import_get_attribute3 = __toESM2(require_get_attribute(), 1);
    function posLists(xml) {
      return find(xml, ["gml:posList", "posList", "gml:PosList", "PosList", "gml:poslist", "poslist"]);
    }
    function posList(xml) {
      return posLists(xml)[0];
    }
    function posList2(xml, { debug = false, order = "default", raw = false } = {}) {
      const tag = posList(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      let nums = inner.trim().split(/[ ,\t\n]+/g);
      if (!raw) {
        if (debug)
          console.log("[geography-markup-language] converting to numbers");
        nums = nums.map((n) => Number(n));
      }
      const srsDimension = (0, import_get_attribute3.default)(tag, "srsDimension");
      const chunkSize = srsDimension ? Number(srsDimension) : 2;
      let points = chunk(nums, chunkSize);
      if (order === "geojson") {
        points = points.map((pt) => reorder(pt));
      }
      return points;
    }
    function LineString2(xml, { debug, order, raw } = {}) {
      const tag = LineString(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      const coords = posList2(inner, { debug, order, raw }) || coordinates2(inner, { debug, order, raw });
      const result = {
        type: "LineString",
        coords
      };
      const srsName = (0, import_get_attribute4.default)(tag.outer, "srsName");
      if (debug)
        console.log("[geography-markup-language] srsName:", srs);
      if (srsName) {
        result.srs = srsName;
      }
      return result;
    }
    function LineString3(xml, { format = "default" } = { format: "default " }) {
      if (format === "geojson") {
        const { coords, srs: srs2 } = LineString2(xml, { order: "geojson" });
        const feature = {
          type: "Feature",
          properties: {},
          geometry: {
            type: "LineString",
            coordinates: coords
          }
        };
        if (srs2) {
          feature.properties.srsName = srs2;
          feature.crs = {
            type: "name",
            properties: {
              name: srs2
            }
          };
        }
        return feature;
      } else {
        const obj2 = LineString2(xml);
        return obj2;
      }
    }
    var import_get_attribute5 = __toESM2(require_get_attribute(), 1);
    var Point_default = ["gml:Point", "Point", "gml:point", "point"];
    function Points(xml) {
      return find(xml, Point_default);
    }
    function Point(xml) {
      return Points(xml)[0];
    }
    var import_find_tag_by_name3 = __toESM2(require_find_tag_by_name(), 1);
    function pos(xml, { order = "default", raw = false } = {}) {
      const tag = (0, import_find_tag_by_name3.default)(xml, "gml:pos") || (0, import_find_tag_by_name3.default)("pos");
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      let point = inner.trim().split(/[ ,]+/g);
      if (!raw)
        point = point.map((n) => Number(n));
      if (order === "geojson")
        point = reorder(point);
      return point;
    }
    function Point2(xml, { debug, raw } = {}) {
      const tag = Point(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      const point = pos(inner, { debug, raw }) || (posList2(inner, { debug, raw }) || [])[0] || coordinates2(inner, { debug, raw });
      if (!point || point.length === 0)
        return;
      const [y, x, z = null] = point;
      return {
        type: "Point",
        srs: (0, import_get_attribute5.default)(tag.outer, "srsName") || null,
        coord: point,
        x,
        y,
        z
      };
    }
    function Point3(xml, { format = "default" } = { format: "default" }) {
      const obj2 = Point2(xml);
      if (!format || format === "default")
        return obj2;
      const { x, y, srs: srs2 } = obj2;
      if (format === "geojson") {
        const feature = {
          type: "Feature",
          properties: {},
          geometry: {
            type: "Point",
            coordinates: [x, y]
          }
        };
        if (srs2) {
          feature.properties.srsName = srs2;
          feature.crs = {
            type: "name",
            properties: {
              name: srs2
            }
          };
        }
        return feature;
      }
    }
    var import_get_attribute7 = __toESM2(require_get_attribute(), 1);
    function innerBoundaries(xml) {
      return find(xml, ["gml:innerBoundaryIs", "innerBoundaryIs", "gml:InnerBoundaryIs", "InnerBoundaryIs", "gml:innerboundaryis", "innerboundaryis"]);
    }
    function interiors(xml) {
      return find(xml, ["gml:interior", "interior", "gml:Interior", "Interior"]);
    }
    var Polygon_default = ["gml:Polygon", "polygon", "gml:polygon", "polygon"];
    function Polygon(xml) {
      return find(xml, Polygon_default);
    }
    function Polygon2(xml) {
      return Polygon(xml)[0];
    }
    function exteriors(xml) {
      return find(xml, ["gml:exterior", "exterior", "gml:Exterior", "Exterior"]);
    }
    function exterior(xml) {
      return exteriors(xml)[0];
    }
    var import_get_attribute6 = __toESM2(require_get_attribute(), 1);
    function LinearRing(xml) {
      return find(xml, ["gml:LinearRing", "LinearRing", "gml:linearRing", "linearRing", "gml:linearring", "linearring"])[0];
    }
    function LinearRing2(xml, { debug, order = "default", raw } = {}) {
      const tag = LinearRing(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      const coordinatesTag = coordinates(inner);
      if (coordinatesTag) {
        return coordinates2(coordinatesTag.outer, { debug, order, raw });
      }
      const posListTag = posList(xml);
      if (posListTag) {
        return posList2(posListTag.outer, { debug, order, raw });
      }
      let nums = inner.trim().split(/[ ,\t\n]+/g);
      if (!raw) {
        if (debug)
          console.log("[geography-markup-language] converting to numbers");
        nums = nums.map((n) => Number(n));
      }
      const srsDimension = (0, import_get_attribute6.default)(tag, "srsDimension");
      const chunkSize = srsDimension ? Number(srsDimension) : 2;
      let points = chunk(nums, chunkSize);
      if (order === "geojson") {
        points = points.map((pt) => reorder(pt));
      }
      return points;
    }
    function exterior2(xml, { debug, order, raw } = {}) {
      const tag = exterior(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      return LinearRing2(inner, { debug, order, raw });
    }
    function innerBoundaries2(xml) {
      return innerBoundaries(xml)[0];
    }
    function innerBoundaryIs(xml, { debug, order, raw } = {}) {
      const tag = innerBoundaries2(xml.outer);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      return LinearRing2(inner, { debug, order, raw });
    }
    function interior(xml) {
      return interiors(xml)[0];
    }
    function interior2(xml, { debug, order, raw } = {}) {
      const tag = interior(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      return LinearRing2(inner, { debug, order, raw });
    }
    function outerBoundaryIs(xml) {
      return find(xml, ["gml:outerBoundaryIs", "outerBoundaryIs", "gml:OuterBoundaryIs", "OuterBoundaryIs", "gml:outerboundaryis", "outerboundaryis"])[0];
    }
    function outerBoundaryIs2(xml, { debug, order, raw } = {}) {
      const tag = outerBoundaryIs(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      return LinearRing2(inner, { debug, order, raw });
    }
    function Polygon3(xml, { debug, order, raw } = {}) {
      const tag = Polygon2(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      const exterior3 = exterior2(xml, { debug, order, raw }) || outerBoundaryIs2(xml, { debug, order, raw });
      let holes = interiors(xml).map((interior3) => interior2(interior3, { debug, order, raw }));
      if (holes.length === 0) {
        holes = innerBoundaries(xml).map((boundary) => innerBoundaryIs(boundary, { debug, order, raw }));
      }
      const rings = [exterior3].concat(holes);
      const result = {
        type: "Polygon",
        rings
      };
      const srsName = (0, import_get_attribute7.default)(tag.outer, "srsName");
      if (debug)
        console.log("[geography-markup-language] srsName:", srs);
      if (srsName) {
        result.srs = srsName;
      }
      return result;
    }
    function Polygon4(xml, { format = "default" } = {}) {
      if (format === "geojson") {
        const { rings, srs: srs2 } = Polygon3(xml, { order: "geojson" });
        const feature = {
          type: "Feature",
          properties: {},
          geometry: {
            type: "Polygon",
            coordinates: rings
          }
        };
        if (srs2) {
          feature.properties.srsName = srs2;
          feature.crs = {
            type: "name",
            properties: {
              name: srs2
            }
          };
        }
        return feature;
      } else {
        const obj2 = Polygon3(xml);
        return obj2;
      }
    }
    function Geometry(xml, { format = "default" } = { format: "default" }) {
      const envelope3 = envelope(xml);
      if (envelope3) {
        const result = Envelope2(envelope3.outer, { format });
        if (result) {
          return result;
        }
      }
      const lineString = LineString(xml);
      if (lineString) {
        const result = LineString3(lineString.outer, { format });
        if (result) {
          return result;
        }
      }
      const point = Point(xml);
      if (point) {
        const result = Point3(point.outer, { format });
        if (result) {
          return result;
        }
      }
      const polygon = Polygon2(xml);
      if (polygon) {
        const result = Polygon4(polygon.outer, { format });
        if (result) {
          return result;
        }
      }
    }
    var import_find_tags_by_name2 = __toESM2(require_find_tags_by_name(), 1);
    function find2(xml, names) {
      let tags = [];
      for (let i = 0; i < names.length; i++) {
        const name = names[i];
        tags = tags.concat((0, import_find_tags_by_name2.default)(xml, name));
      }
      return tags;
    }
    var GEOMETRY_TAG_NAMES;
    function geometries(xml) {
      if (!GEOMETRY_TAG_NAMES)
        GEOMETRY_TAG_NAMES = Envelope_default.concat(LineString_default).concat(Point_default).concat(Polygon_default);
      return find2(xml, GEOMETRY_TAG_NAMES).map((tag) => tag.outer);
    }
  }
});

// node_modules/proj4-merge/proj4-merge.js
var require_proj4_merge = __commonJS({
  "node_modules/proj4-merge/proj4-merge.js"(exports2, module2) {
    function merge() {
      const instances = [];
      const isEmpty = (it) => typeof it === "object" && Object.keys(it).length === 0 && JSON.stringify(it) === "{}";
      const add2 = (it) => {
        if (!it)
          return;
        if (Array.isArray(it))
          return it.forEach(add2);
        if (it.default)
          it = it.default;
        if (isEmpty(it))
          return;
        instances.push(it);
      };
      Array.from(arguments).forEach(add2);
      if (instances.length === 0)
        throw Error("[proj4-merge] merge called with zero instances of proj4");
      const [first, ...rest] = instances;
      rest.forEach((instance) => {
        first.defs(Object.entries(instance.defs));
      });
      return first;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return merge;
      });
    }
    if (typeof module2 === "object") {
      module2.exports = merge;
      module2.exports.default = merge;
    }
  }
});

// node_modules/proj4/dist/proj4-src.js
var require_proj4_src = __commonJS({
  "node_modules/proj4/dist/proj4-src.js"(exports2, module2) {
    (function(global, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.proj4 = factory();
    })(exports2, function() {
      "use strict";
      var globals = function(defs2) {
        defs2("EPSG:4326", "+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees");
        defs2("EPSG:4269", "+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees");
        defs2("EPSG:3857", "+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs");
        defs2.WGS84 = defs2["EPSG:4326"];
        defs2["EPSG:3785"] = defs2["EPSG:3857"];
        defs2.GOOGLE = defs2["EPSG:3857"];
        defs2["EPSG:900913"] = defs2["EPSG:3857"];
        defs2["EPSG:102113"] = defs2["EPSG:3857"];
      };
      var PJD_3PARAM = 1;
      var PJD_7PARAM = 2;
      var PJD_GRIDSHIFT = 3;
      var PJD_WGS84 = 4;
      var PJD_NODATUM = 5;
      var SRS_WGS84_SEMIMAJOR = 6378137;
      var SRS_WGS84_SEMIMINOR = 6356752314e-3;
      var SRS_WGS84_ESQUARED = 0.0066943799901413165;
      var SEC_TO_RAD = 484813681109536e-20;
      var HALF_PI = Math.PI / 2;
      var SIXTH = 0.16666666666666666;
      var RA4 = 0.04722222222222222;
      var RA6 = 0.022156084656084655;
      var EPSLN = 1e-10;
      var D2R = 0.017453292519943295;
      var R2D = 57.29577951308232;
      var FORTPI = Math.PI / 4;
      var TWO_PI = Math.PI * 2;
      var SPI = 3.14159265359;
      var exports$1 = {};
      exports$1.greenwich = 0;
      exports$1.lisbon = -9.131906111111;
      exports$1.paris = 2.337229166667;
      exports$1.bogota = -74.080916666667;
      exports$1.madrid = -3.687938888889;
      exports$1.rome = 12.452333333333;
      exports$1.bern = 7.439583333333;
      exports$1.jakarta = 106.807719444444;
      exports$1.ferro = -17.666666666667;
      exports$1.brussels = 4.367975;
      exports$1.stockholm = 18.058277777778;
      exports$1.athens = 23.7163375;
      exports$1.oslo = 10.722916666667;
      var units = {
        ft: { to_meter: 0.3048 },
        "us-ft": { to_meter: 1200 / 3937 }
      };
      var ignoredChar = /[\s_\-\/\(\)]/g;
      function match(obj2, key) {
        if (obj2[key]) {
          return obj2[key];
        }
        var keys = Object.keys(obj2);
        var lkey = key.toLowerCase().replace(ignoredChar, "");
        var i = -1;
        var testkey, processedKey;
        while (++i < keys.length) {
          testkey = keys[i];
          processedKey = testkey.toLowerCase().replace(ignoredChar, "");
          if (processedKey === lkey) {
            return obj2[testkey];
          }
        }
      }
      var parseProj = function(defData) {
        var self2 = {};
        var paramObj = defData.split("+").map(function(v) {
          return v.trim();
        }).filter(function(a) {
          return a;
        }).reduce(function(p, a) {
          var split = a.split("=");
          split.push(true);
          p[split[0].toLowerCase()] = split[1];
          return p;
        }, {});
        var paramName, paramVal, paramOutname;
        var params2 = {
          proj: "projName",
          datum: "datumCode",
          rf: function(v) {
            self2.rf = parseFloat(v);
          },
          lat_0: function(v) {
            self2.lat0 = v * D2R;
          },
          lat_1: function(v) {
            self2.lat1 = v * D2R;
          },
          lat_2: function(v) {
            self2.lat2 = v * D2R;
          },
          lat_ts: function(v) {
            self2.lat_ts = v * D2R;
          },
          lon_0: function(v) {
            self2.long0 = v * D2R;
          },
          lon_1: function(v) {
            self2.long1 = v * D2R;
          },
          lon_2: function(v) {
            self2.long2 = v * D2R;
          },
          alpha: function(v) {
            self2.alpha = parseFloat(v) * D2R;
          },
          gamma: function(v) {
            self2.rectified_grid_angle = parseFloat(v);
          },
          lonc: function(v) {
            self2.longc = v * D2R;
          },
          x_0: function(v) {
            self2.x0 = parseFloat(v);
          },
          y_0: function(v) {
            self2.y0 = parseFloat(v);
          },
          k_0: function(v) {
            self2.k0 = parseFloat(v);
          },
          k: function(v) {
            self2.k0 = parseFloat(v);
          },
          a: function(v) {
            self2.a = parseFloat(v);
          },
          b: function(v) {
            self2.b = parseFloat(v);
          },
          r_a: function() {
            self2.R_A = true;
          },
          zone: function(v) {
            self2.zone = parseInt(v, 10);
          },
          south: function() {
            self2.utmSouth = true;
          },
          towgs84: function(v) {
            self2.datum_params = v.split(",").map(function(a) {
              return parseFloat(a);
            });
          },
          to_meter: function(v) {
            self2.to_meter = parseFloat(v);
          },
          units: function(v) {
            self2.units = v;
            var unit = match(units, v);
            if (unit) {
              self2.to_meter = unit.to_meter;
            }
          },
          from_greenwich: function(v) {
            self2.from_greenwich = v * D2R;
          },
          pm: function(v) {
            var pm = match(exports$1, v);
            self2.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;
          },
          nadgrids: function(v) {
            if (v === "@null") {
              self2.datumCode = "none";
            } else {
              self2.nadgrids = v;
            }
          },
          axis: function(v) {
            var legalAxis = "ewnsud";
            if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {
              self2.axis = v;
            }
          },
          approx: function() {
            self2.approx = true;
          }
        };
        for (paramName in paramObj) {
          paramVal = paramObj[paramName];
          if (paramName in params2) {
            paramOutname = params2[paramName];
            if (typeof paramOutname === "function") {
              paramOutname(paramVal);
            } else {
              self2[paramOutname] = paramVal;
            }
          } else {
            self2[paramName] = paramVal;
          }
        }
        if (typeof self2.datumCode === "string" && self2.datumCode !== "WGS84") {
          self2.datumCode = self2.datumCode.toLowerCase();
        }
        return self2;
      };
      var NEUTRAL = 1;
      var KEYWORD = 2;
      var NUMBER = 3;
      var QUOTED = 4;
      var AFTERQUOTE = 5;
      var ENDED = -1;
      var whitespace = /\s/;
      var latin = /[A-Za-z]/;
      var keyword = /[A-Za-z84_]/;
      var endThings = /[,\]]/;
      var digets = /[\d\.E\-\+]/;
      function Parser(text) {
        if (typeof text !== "string") {
          throw new Error("not a string");
        }
        this.text = text.trim();
        this.level = 0;
        this.place = 0;
        this.root = null;
        this.stack = [];
        this.currentObject = null;
        this.state = NEUTRAL;
      }
      Parser.prototype.readCharicter = function() {
        var char = this.text[this.place++];
        if (this.state !== QUOTED) {
          while (whitespace.test(char)) {
            if (this.place >= this.text.length) {
              return;
            }
            char = this.text[this.place++];
          }
        }
        switch (this.state) {
          case NEUTRAL:
            return this.neutral(char);
          case KEYWORD:
            return this.keyword(char);
          case QUOTED:
            return this.quoted(char);
          case AFTERQUOTE:
            return this.afterquote(char);
          case NUMBER:
            return this.number(char);
          case ENDED:
            return;
        }
      };
      Parser.prototype.afterquote = function(char) {
        if (char === '"') {
          this.word += '"';
          this.state = QUOTED;
          return;
        }
        if (endThings.test(char)) {
          this.word = this.word.trim();
          this.afterItem(char);
          return;
        }
        throw new Error(`havn't handled "` + char + '" in afterquote yet, index ' + this.place);
      };
      Parser.prototype.afterItem = function(char) {
        if (char === ",") {
          if (this.word !== null) {
            this.currentObject.push(this.word);
          }
          this.word = null;
          this.state = NEUTRAL;
          return;
        }
        if (char === "]") {
          this.level--;
          if (this.word !== null) {
            this.currentObject.push(this.word);
            this.word = null;
          }
          this.state = NEUTRAL;
          this.currentObject = this.stack.pop();
          if (!this.currentObject) {
            this.state = ENDED;
          }
          return;
        }
      };
      Parser.prototype.number = function(char) {
        if (digets.test(char)) {
          this.word += char;
          return;
        }
        if (endThings.test(char)) {
          this.word = parseFloat(this.word);
          this.afterItem(char);
          return;
        }
        throw new Error(`havn't handled "` + char + '" in number yet, index ' + this.place);
      };
      Parser.prototype.quoted = function(char) {
        if (char === '"') {
          this.state = AFTERQUOTE;
          return;
        }
        this.word += char;
        return;
      };
      Parser.prototype.keyword = function(char) {
        if (keyword.test(char)) {
          this.word += char;
          return;
        }
        if (char === "[") {
          var newObjects = [];
          newObjects.push(this.word);
          this.level++;
          if (this.root === null) {
            this.root = newObjects;
          } else {
            this.currentObject.push(newObjects);
          }
          this.stack.push(this.currentObject);
          this.currentObject = newObjects;
          this.state = NEUTRAL;
          return;
        }
        if (endThings.test(char)) {
          this.afterItem(char);
          return;
        }
        throw new Error(`havn't handled "` + char + '" in keyword yet, index ' + this.place);
      };
      Parser.prototype.neutral = function(char) {
        if (latin.test(char)) {
          this.word = char;
          this.state = KEYWORD;
          return;
        }
        if (char === '"') {
          this.word = "";
          this.state = QUOTED;
          return;
        }
        if (digets.test(char)) {
          this.word = char;
          this.state = NUMBER;
          return;
        }
        if (endThings.test(char)) {
          this.afterItem(char);
          return;
        }
        throw new Error(`havn't handled "` + char + '" in neutral yet, index ' + this.place);
      };
      Parser.prototype.output = function() {
        while (this.place < this.text.length) {
          this.readCharicter();
        }
        if (this.state === ENDED) {
          return this.root;
        }
        throw new Error('unable to parse string "' + this.text + '". State is ' + this.state);
      };
      function parseString(txt) {
        var parser = new Parser(txt);
        return parser.output();
      }
      function mapit(obj2, key, value) {
        if (Array.isArray(key)) {
          value.unshift(key);
          key = null;
        }
        var thing = key ? {} : obj2;
        var out = value.reduce(function(newObj, item) {
          sExpr(item, newObj);
          return newObj;
        }, thing);
        if (key) {
          obj2[key] = out;
        }
      }
      function sExpr(v, obj2) {
        if (!Array.isArray(v)) {
          obj2[v] = true;
          return;
        }
        var key = v.shift();
        if (key === "PARAMETER") {
          key = v.shift();
        }
        if (v.length === 1) {
          if (Array.isArray(v[0])) {
            obj2[key] = {};
            sExpr(v[0], obj2[key]);
            return;
          }
          obj2[key] = v[0];
          return;
        }
        if (!v.length) {
          obj2[key] = true;
          return;
        }
        if (key === "TOWGS84") {
          obj2[key] = v;
          return;
        }
        if (key === "AXIS") {
          if (!(key in obj2)) {
            obj2[key] = [];
          }
          obj2[key].push(v);
          return;
        }
        if (!Array.isArray(key)) {
          obj2[key] = {};
        }
        var i;
        switch (key) {
          case "UNIT":
          case "PRIMEM":
          case "VERT_DATUM":
            obj2[key] = {
              name: v[0].toLowerCase(),
              convert: v[1]
            };
            if (v.length === 3) {
              sExpr(v[2], obj2[key]);
            }
            return;
          case "SPHEROID":
          case "ELLIPSOID":
            obj2[key] = {
              name: v[0],
              a: v[1],
              rf: v[2]
            };
            if (v.length === 4) {
              sExpr(v[3], obj2[key]);
            }
            return;
          case "PROJECTEDCRS":
          case "PROJCRS":
          case "GEOGCS":
          case "GEOCCS":
          case "PROJCS":
          case "LOCAL_CS":
          case "GEODCRS":
          case "GEODETICCRS":
          case "GEODETICDATUM":
          case "EDATUM":
          case "ENGINEERINGDATUM":
          case "VERT_CS":
          case "VERTCRS":
          case "VERTICALCRS":
          case "COMPD_CS":
          case "COMPOUNDCRS":
          case "ENGINEERINGCRS":
          case "ENGCRS":
          case "FITTED_CS":
          case "LOCAL_DATUM":
          case "DATUM":
            v[0] = ["name", v[0]];
            mapit(obj2, key, v);
            return;
          default:
            i = -1;
            while (++i < v.length) {
              if (!Array.isArray(v[i])) {
                return sExpr(v, obj2[key]);
              }
            }
            return mapit(obj2, key, v);
        }
      }
      var D2R$1 = 0.017453292519943295;
      function rename(obj2, params2) {
        var outName = params2[0];
        var inName = params2[1];
        if (!(outName in obj2) && inName in obj2) {
          obj2[outName] = obj2[inName];
          if (params2.length === 3) {
            obj2[outName] = params2[2](obj2[outName]);
          }
        }
      }
      function d2r(input) {
        return input * D2R$1;
      }
      function cleanWKT(wkt3) {
        if (wkt3.type === "GEOGCS") {
          wkt3.projName = "longlat";
        } else if (wkt3.type === "LOCAL_CS") {
          wkt3.projName = "identity";
          wkt3.local = true;
        } else {
          if (typeof wkt3.PROJECTION === "object") {
            wkt3.projName = Object.keys(wkt3.PROJECTION)[0];
          } else {
            wkt3.projName = wkt3.PROJECTION;
          }
        }
        if (wkt3.AXIS) {
          var axisOrder = "";
          for (var i = 0, ii = wkt3.AXIS.length; i < ii; ++i) {
            var axis = [wkt3.AXIS[i][0].toLowerCase(), wkt3.AXIS[i][1].toLowerCase()];
            if (axis[0].indexOf("north") !== -1 || (axis[0] === "y" || axis[0] === "lat") && axis[1] === "north") {
              axisOrder += "n";
            } else if (axis[0].indexOf("south") !== -1 || (axis[0] === "y" || axis[0] === "lat") && axis[1] === "south") {
              axisOrder += "s";
            } else if (axis[0].indexOf("east") !== -1 || (axis[0] === "x" || axis[0] === "lon") && axis[1] === "east") {
              axisOrder += "e";
            } else if (axis[0].indexOf("west") !== -1 || (axis[0] === "x" || axis[0] === "lon") && axis[1] === "west") {
              axisOrder += "w";
            }
          }
          if (axisOrder.length === 2) {
            axisOrder += "u";
          }
          if (axisOrder.length === 3) {
            wkt3.axis = axisOrder;
          }
        }
        if (wkt3.UNIT) {
          wkt3.units = wkt3.UNIT.name.toLowerCase();
          if (wkt3.units === "metre") {
            wkt3.units = "meter";
          }
          if (wkt3.UNIT.convert) {
            if (wkt3.type === "GEOGCS") {
              if (wkt3.DATUM && wkt3.DATUM.SPHEROID) {
                wkt3.to_meter = wkt3.UNIT.convert * wkt3.DATUM.SPHEROID.a;
              }
            } else {
              wkt3.to_meter = wkt3.UNIT.convert;
            }
          }
        }
        var geogcs = wkt3.GEOGCS;
        if (wkt3.type === "GEOGCS") {
          geogcs = wkt3;
        }
        if (geogcs) {
          if (geogcs.DATUM) {
            wkt3.datumCode = geogcs.DATUM.name.toLowerCase();
          } else {
            wkt3.datumCode = geogcs.name.toLowerCase();
          }
          if (wkt3.datumCode.slice(0, 2) === "d_") {
            wkt3.datumCode = wkt3.datumCode.slice(2);
          }
          if (wkt3.datumCode === "new_zealand_geodetic_datum_1949" || wkt3.datumCode === "new_zealand_1949") {
            wkt3.datumCode = "nzgd49";
          }
          if (wkt3.datumCode === "wgs_1984" || wkt3.datumCode === "world_geodetic_system_1984") {
            if (wkt3.PROJECTION === "Mercator_Auxiliary_Sphere") {
              wkt3.sphere = true;
            }
            wkt3.datumCode = "wgs84";
          }
          if (wkt3.datumCode.slice(-6) === "_ferro") {
            wkt3.datumCode = wkt3.datumCode.slice(0, -6);
          }
          if (wkt3.datumCode.slice(-8) === "_jakarta") {
            wkt3.datumCode = wkt3.datumCode.slice(0, -8);
          }
          if (~wkt3.datumCode.indexOf("belge")) {
            wkt3.datumCode = "rnb72";
          }
          if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {
            wkt3.ellps = geogcs.DATUM.SPHEROID.name.replace("_19", "").replace(/[Cc]larke\_18/, "clrk");
            if (wkt3.ellps.toLowerCase().slice(0, 13) === "international") {
              wkt3.ellps = "intl";
            }
            wkt3.a = geogcs.DATUM.SPHEROID.a;
            wkt3.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);
          }
          if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {
            wkt3.datum_params = geogcs.DATUM.TOWGS84;
          }
          if (~wkt3.datumCode.indexOf("osgb_1936")) {
            wkt3.datumCode = "osgb36";
          }
          if (~wkt3.datumCode.indexOf("osni_1952")) {
            wkt3.datumCode = "osni52";
          }
          if (~wkt3.datumCode.indexOf("tm65") || ~wkt3.datumCode.indexOf("geodetic_datum_of_1965")) {
            wkt3.datumCode = "ire65";
          }
          if (wkt3.datumCode === "ch1903+") {
            wkt3.datumCode = "ch1903";
          }
          if (~wkt3.datumCode.indexOf("israel")) {
            wkt3.datumCode = "isr93";
          }
        }
        if (wkt3.b && !isFinite(wkt3.b)) {
          wkt3.b = wkt3.a;
        }
        function toMeter(input) {
          var ratio = wkt3.to_meter || 1;
          return input * ratio;
        }
        var renamer = function(a) {
          return rename(wkt3, a);
        };
        var list = [
          ["standard_parallel_1", "Standard_Parallel_1"],
          ["standard_parallel_1", "Latitude of 1st standard parallel"],
          ["standard_parallel_2", "Standard_Parallel_2"],
          ["standard_parallel_2", "Latitude of 2nd standard parallel"],
          ["false_easting", "False_Easting"],
          ["false_easting", "False easting"],
          ["false-easting", "Easting at false origin"],
          ["false_northing", "False_Northing"],
          ["false_northing", "False northing"],
          ["false_northing", "Northing at false origin"],
          ["central_meridian", "Central_Meridian"],
          ["central_meridian", "Longitude of natural origin"],
          ["central_meridian", "Longitude of false origin"],
          ["latitude_of_origin", "Latitude_Of_Origin"],
          ["latitude_of_origin", "Central_Parallel"],
          ["latitude_of_origin", "Latitude of natural origin"],
          ["latitude_of_origin", "Latitude of false origin"],
          ["scale_factor", "Scale_Factor"],
          ["k0", "scale_factor"],
          ["latitude_of_center", "Latitude_Of_Center"],
          ["latitude_of_center", "Latitude_of_center"],
          ["lat0", "latitude_of_center", d2r],
          ["longitude_of_center", "Longitude_Of_Center"],
          ["longitude_of_center", "Longitude_of_center"],
          ["longc", "longitude_of_center", d2r],
          ["x0", "false_easting", toMeter],
          ["y0", "false_northing", toMeter],
          ["long0", "central_meridian", d2r],
          ["lat0", "latitude_of_origin", d2r],
          ["lat0", "standard_parallel_1", d2r],
          ["lat1", "standard_parallel_1", d2r],
          ["lat2", "standard_parallel_2", d2r],
          ["azimuth", "Azimuth"],
          ["alpha", "azimuth", d2r],
          ["srsCode", "name"]
        ];
        list.forEach(renamer);
        if (!wkt3.long0 && wkt3.longc && (wkt3.projName === "Albers_Conic_Equal_Area" || wkt3.projName === "Lambert_Azimuthal_Equal_Area")) {
          wkt3.long0 = wkt3.longc;
        }
        if (!wkt3.lat_ts && wkt3.lat1 && (wkt3.projName === "Stereographic_South_Pole" || wkt3.projName === "Polar Stereographic (variant B)")) {
          wkt3.lat0 = d2r(wkt3.lat1 > 0 ? 90 : -90);
          wkt3.lat_ts = wkt3.lat1;
        } else if (!wkt3.lat_ts && wkt3.lat0 && wkt3.projName === "Polar_Stereographic") {
          wkt3.lat_ts = wkt3.lat0;
          wkt3.lat0 = d2r(wkt3.lat0 > 0 ? 90 : -90);
        }
      }
      var wkt2 = function(wkt3) {
        var lisp = parseString(wkt3);
        var type = lisp.shift();
        var name = lisp.shift();
        lisp.unshift(["name", name]);
        lisp.unshift(["type", type]);
        var obj2 = {};
        sExpr(lisp, obj2);
        cleanWKT(obj2);
        return obj2;
      };
      function defs(name) {
        var that = this;
        if (arguments.length === 2) {
          var def = arguments[1];
          if (typeof def === "string") {
            if (def.charAt(0) === "+") {
              defs[name] = parseProj(arguments[1]);
            } else {
              defs[name] = wkt2(arguments[1]);
            }
          } else {
            defs[name] = def;
          }
        } else if (arguments.length === 1) {
          if (Array.isArray(name)) {
            return name.map(function(v) {
              if (Array.isArray(v)) {
                defs.apply(that, v);
              } else {
                defs(v);
              }
            });
          } else if (typeof name === "string") {
            if (name in defs) {
              return defs[name];
            }
          } else if ("EPSG" in name) {
            defs["EPSG:" + name.EPSG] = name;
          } else if ("ESRI" in name) {
            defs["ESRI:" + name.ESRI] = name;
          } else if ("IAU2000" in name) {
            defs["IAU2000:" + name.IAU2000] = name;
          } else {
            console.log(name);
          }
          return;
        }
      }
      globals(defs);
      function testObj(code) {
        return typeof code === "string";
      }
      function testDef(code) {
        return code in defs;
      }
      var codeWords = ["PROJECTEDCRS", "PROJCRS", "GEOGCS", "GEOCCS", "PROJCS", "LOCAL_CS", "GEODCRS", "GEODETICCRS", "GEODETICDATUM", "ENGCRS", "ENGINEERINGCRS"];
      function testWKT(code) {
        return codeWords.some(function(word) {
          return code.indexOf(word) > -1;
        });
      }
      var codes = ["3857", "900913", "3785", "102113"];
      function checkMercator(item) {
        var auth = match(item, "authority");
        if (!auth) {
          return;
        }
        var code = match(auth, "epsg");
        return code && codes.indexOf(code) > -1;
      }
      function checkProjStr(item) {
        var ext = match(item, "extension");
        if (!ext) {
          return;
        }
        return match(ext, "proj4");
      }
      function testProj(code) {
        return code[0] === "+";
      }
      function parse(code) {
        if (testObj(code)) {
          if (testDef(code)) {
            return defs[code];
          }
          if (testWKT(code)) {
            var out = wkt2(code);
            if (checkMercator(out)) {
              return defs["EPSG:3857"];
            }
            var maybeProjStr = checkProjStr(out);
            if (maybeProjStr) {
              return parseProj(maybeProjStr);
            }
            return out;
          }
          if (testProj(code)) {
            return parseProj(code);
          }
        } else {
          return code;
        }
      }
      var extend = function(destination, source) {
        destination = destination || {};
        var value, property;
        if (!source) {
          return destination;
        }
        for (property in source) {
          value = source[property];
          if (value !== void 0) {
            destination[property] = value;
          }
        }
        return destination;
      };
      var msfnz = function(eccent, sinphi, cosphi) {
        var con = eccent * sinphi;
        return cosphi / Math.sqrt(1 - con * con);
      };
      var sign = function(x) {
        return x < 0 ? -1 : 1;
      };
      var adjust_lon = function(x) {
        return Math.abs(x) <= SPI ? x : x - sign(x) * TWO_PI;
      };
      var tsfnz = function(eccent, phi, sinphi) {
        var con = eccent * sinphi;
        var com = 0.5 * eccent;
        con = Math.pow((1 - con) / (1 + con), com);
        return Math.tan(0.5 * (HALF_PI - phi)) / con;
      };
      var phi2z = function(eccent, ts) {
        var eccnth = 0.5 * eccent;
        var con, dphi;
        var phi = HALF_PI - 2 * Math.atan(ts);
        for (var i = 0; i <= 15; i++) {
          con = eccent * Math.sin(phi);
          dphi = HALF_PI - 2 * Math.atan(ts * Math.pow((1 - con) / (1 + con), eccnth)) - phi;
          phi += dphi;
          if (Math.abs(dphi) <= 1e-10) {
            return phi;
          }
        }
        return -9999;
      };
      function init() {
        var con = this.b / this.a;
        this.es = 1 - con * con;
        if (!("x0" in this)) {
          this.x0 = 0;
        }
        if (!("y0" in this)) {
          this.y0 = 0;
        }
        this.e = Math.sqrt(this.es);
        if (this.lat_ts) {
          if (this.sphere) {
            this.k0 = Math.cos(this.lat_ts);
          } else {
            this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
          }
        } else {
          if (!this.k0) {
            if (this.k) {
              this.k0 = this.k;
            } else {
              this.k0 = 1;
            }
          }
        }
      }
      function forward(p) {
        var lon = p.x;
        var lat = p.y;
        if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {
          return null;
        }
        var x, y;
        if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {
          return null;
        } else {
          if (this.sphere) {
            x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);
            y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));
          } else {
            var sinphi = Math.sin(lat);
            var ts = tsfnz(this.e, lat, sinphi);
            x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);
            y = this.y0 - this.a * this.k0 * Math.log(ts);
          }
          p.x = x;
          p.y = y;
          return p;
        }
      }
      function inverse(p) {
        var x = p.x - this.x0;
        var y = p.y - this.y0;
        var lon, lat;
        if (this.sphere) {
          lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));
        } else {
          var ts = Math.exp(-y / (this.a * this.k0));
          lat = phi2z(this.e, ts);
          if (lat === -9999) {
            return null;
          }
        }
        lon = adjust_lon(this.long0 + x / (this.a * this.k0));
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$1 = ["Mercator", "Popular Visualisation Pseudo Mercator", "Mercator_1SP", "Mercator_Auxiliary_Sphere", "merc"];
      var merc = {
        init,
        forward,
        inverse,
        names: names$1
      };
      function init$1() {
      }
      function identity(pt) {
        return pt;
      }
      var names$2 = ["longlat", "identity"];
      var longlat = {
        init: init$1,
        forward: identity,
        inverse: identity,
        names: names$2
      };
      var projs = [merc, longlat];
      var names = {};
      var projStore = [];
      function add2(proj, i) {
        var len = projStore.length;
        if (!proj.names) {
          console.log(i);
          return true;
        }
        projStore[len] = proj;
        proj.names.forEach(function(n) {
          names[n.toLowerCase()] = len;
        });
        return this;
      }
      function get(name) {
        if (!name) {
          return false;
        }
        var n = name.toLowerCase();
        if (typeof names[n] !== "undefined" && projStore[names[n]]) {
          return projStore[names[n]];
        }
      }
      function start() {
        projs.forEach(add2);
      }
      var projections = {
        start,
        add: add2,
        get
      };
      var exports$2 = {};
      exports$2.MERIT = {
        a: 6378137,
        rf: 298.257,
        ellipseName: "MERIT 1983"
      };
      exports$2.SGS85 = {
        a: 6378136,
        rf: 298.257,
        ellipseName: "Soviet Geodetic System 85"
      };
      exports$2.GRS80 = {
        a: 6378137,
        rf: 298.257222101,
        ellipseName: "GRS 1980(IUGG, 1980)"
      };
      exports$2.IAU76 = {
        a: 6378140,
        rf: 298.257,
        ellipseName: "IAU 1976"
      };
      exports$2.airy = {
        a: 6377563396e-3,
        b: 635625691e-2,
        ellipseName: "Airy 1830"
      };
      exports$2.APL4 = {
        a: 6378137,
        rf: 298.25,
        ellipseName: "Appl. Physics. 1965"
      };
      exports$2.NWL9D = {
        a: 6378145,
        rf: 298.25,
        ellipseName: "Naval Weapons Lab., 1965"
      };
      exports$2.mod_airy = {
        a: 6377340189e-3,
        b: 6356034446e-3,
        ellipseName: "Modified Airy"
      };
      exports$2.andrae = {
        a: 637710443e-2,
        rf: 300,
        ellipseName: "Andrae 1876 (Den., Iclnd.)"
      };
      exports$2.aust_SA = {
        a: 6378160,
        rf: 298.25,
        ellipseName: "Australian Natl & S. Amer. 1969"
      };
      exports$2.GRS67 = {
        a: 6378160,
        rf: 298.247167427,
        ellipseName: "GRS 67(IUGG 1967)"
      };
      exports$2.bessel = {
        a: 6377397155e-3,
        rf: 299.1528128,
        ellipseName: "Bessel 1841"
      };
      exports$2.bess_nam = {
        a: 6377483865e-3,
        rf: 299.1528128,
        ellipseName: "Bessel 1841 (Namibia)"
      };
      exports$2.clrk66 = {
        a: 63782064e-1,
        b: 63565838e-1,
        ellipseName: "Clarke 1866"
      };
      exports$2.clrk80 = {
        a: 6378249145e-3,
        rf: 293.4663,
        ellipseName: "Clarke 1880 mod."
      };
      exports$2.clrk80ign = {
        a: 63782492e-1,
        b: 6356515,
        rf: 293.4660213,
        ellipseName: "Clarke 1880 (IGN)"
      };
      exports$2.clrk58 = {
        a: 6378293645208759e-9,
        rf: 294.2606763692654,
        ellipseName: "Clarke 1858"
      };
      exports$2.CPM = {
        a: 63757387e-1,
        rf: 334.29,
        ellipseName: "Comm. des Poids et Mesures 1799"
      };
      exports$2.delmbr = {
        a: 6376428,
        rf: 311.5,
        ellipseName: "Delambre 1810 (Belgium)"
      };
      exports$2.engelis = {
        a: 637813605e-2,
        rf: 298.2566,
        ellipseName: "Engelis 1985"
      };
      exports$2.evrst30 = {
        a: 6377276345e-3,
        rf: 300.8017,
        ellipseName: "Everest 1830"
      };
      exports$2.evrst48 = {
        a: 6377304063e-3,
        rf: 300.8017,
        ellipseName: "Everest 1948"
      };
      exports$2.evrst56 = {
        a: 6377301243e-3,
        rf: 300.8017,
        ellipseName: "Everest 1956"
      };
      exports$2.evrst69 = {
        a: 6377295664e-3,
        rf: 300.8017,
        ellipseName: "Everest 1969"
      };
      exports$2.evrstSS = {
        a: 6377298556e-3,
        rf: 300.8017,
        ellipseName: "Everest (Sabah & Sarawak)"
      };
      exports$2.fschr60 = {
        a: 6378166,
        rf: 298.3,
        ellipseName: "Fischer (Mercury Datum) 1960"
      };
      exports$2.fschr60m = {
        a: 6378155,
        rf: 298.3,
        ellipseName: "Fischer 1960"
      };
      exports$2.fschr68 = {
        a: 6378150,
        rf: 298.3,
        ellipseName: "Fischer 1968"
      };
      exports$2.helmert = {
        a: 6378200,
        rf: 298.3,
        ellipseName: "Helmert 1906"
      };
      exports$2.hough = {
        a: 6378270,
        rf: 297,
        ellipseName: "Hough"
      };
      exports$2.intl = {
        a: 6378388,
        rf: 297,
        ellipseName: "International 1909 (Hayford)"
      };
      exports$2.kaula = {
        a: 6378163,
        rf: 298.24,
        ellipseName: "Kaula 1961"
      };
      exports$2.lerch = {
        a: 6378139,
        rf: 298.257,
        ellipseName: "Lerch 1979"
      };
      exports$2.mprts = {
        a: 6397300,
        rf: 191,
        ellipseName: "Maupertius 1738"
      };
      exports$2.new_intl = {
        a: 63781575e-1,
        b: 63567722e-1,
        ellipseName: "New International 1967"
      };
      exports$2.plessis = {
        a: 6376523,
        rf: 6355863,
        ellipseName: "Plessis 1817 (France)"
      };
      exports$2.krass = {
        a: 6378245,
        rf: 298.3,
        ellipseName: "Krassovsky, 1942"
      };
      exports$2.SEasia = {
        a: 6378155,
        b: 63567733205e-4,
        ellipseName: "Southeast Asia"
      };
      exports$2.walbeck = {
        a: 6376896,
        b: 63558348467e-4,
        ellipseName: "Walbeck"
      };
      exports$2.WGS60 = {
        a: 6378165,
        rf: 298.3,
        ellipseName: "WGS 60"
      };
      exports$2.WGS66 = {
        a: 6378145,
        rf: 298.25,
        ellipseName: "WGS 66"
      };
      exports$2.WGS7 = {
        a: 6378135,
        rf: 298.26,
        ellipseName: "WGS 72"
      };
      var WGS84 = exports$2.WGS84 = {
        a: 6378137,
        rf: 298.257223563,
        ellipseName: "WGS 84"
      };
      exports$2.sphere = {
        a: 6370997,
        b: 6370997,
        ellipseName: "Normal Sphere (r=6370997)"
      };
      function eccentricity(a, b, rf, R_A) {
        var a2 = a * a;
        var b2 = b * b;
        var es = (a2 - b2) / a2;
        var e = 0;
        if (R_A) {
          a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));
          a2 = a * a;
          es = 0;
        } else {
          e = Math.sqrt(es);
        }
        var ep2 = (a2 - b2) / b2;
        return {
          es,
          e,
          ep2
        };
      }
      function sphere(a, b, rf, ellps, sphere2) {
        if (!a) {
          var ellipse = match(exports$2, ellps);
          if (!ellipse) {
            ellipse = WGS84;
          }
          a = ellipse.a;
          b = ellipse.b;
          rf = ellipse.rf;
        }
        if (rf && !b) {
          b = (1 - 1 / rf) * a;
        }
        if (rf === 0 || Math.abs(a - b) < EPSLN) {
          sphere2 = true;
          b = a;
        }
        return {
          a,
          b,
          rf,
          sphere: sphere2
        };
      }
      var exports$3 = {};
      exports$3.wgs84 = {
        towgs84: "0,0,0",
        ellipse: "WGS84",
        datumName: "WGS84"
      };
      exports$3.ch1903 = {
        towgs84: "674.374,15.056,405.346",
        ellipse: "bessel",
        datumName: "swiss"
      };
      exports$3.ggrs87 = {
        towgs84: "-199.87,74.79,246.62",
        ellipse: "GRS80",
        datumName: "Greek_Geodetic_Reference_System_1987"
      };
      exports$3.nad83 = {
        towgs84: "0,0,0",
        ellipse: "GRS80",
        datumName: "North_American_Datum_1983"
      };
      exports$3.nad27 = {
        nadgrids: "@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",
        ellipse: "clrk66",
        datumName: "North_American_Datum_1927"
      };
      exports$3.potsdam = {
        towgs84: "598.1,73.7,418.2,0.202,0.045,-2.455,6.7",
        ellipse: "bessel",
        datumName: "Potsdam Rauenberg 1950 DHDN"
      };
      exports$3.carthage = {
        towgs84: "-263.0,6.0,431.0",
        ellipse: "clark80",
        datumName: "Carthage 1934 Tunisia"
      };
      exports$3.hermannskogel = {
        towgs84: "577.326,90.129,463.919,5.137,1.474,5.297,2.4232",
        ellipse: "bessel",
        datumName: "Hermannskogel"
      };
      exports$3.militargeographische_institut = {
        towgs84: "577.326,90.129,463.919,5.137,1.474,5.297,2.4232",
        ellipse: "bessel",
        datumName: "Militar-Geographische Institut"
      };
      exports$3.osni52 = {
        towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
        ellipse: "airy",
        datumName: "Irish National"
      };
      exports$3.ire65 = {
        towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
        ellipse: "mod_airy",
        datumName: "Ireland 1965"
      };
      exports$3.rassadiran = {
        towgs84: "-133.63,-157.5,-158.62",
        ellipse: "intl",
        datumName: "Rassadiran"
      };
      exports$3.nzgd49 = {
        towgs84: "59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",
        ellipse: "intl",
        datumName: "New Zealand Geodetic Datum 1949"
      };
      exports$3.osgb36 = {
        towgs84: "446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",
        ellipse: "airy",
        datumName: "Airy 1830"
      };
      exports$3.s_jtsk = {
        towgs84: "589,76,480",
        ellipse: "bessel",
        datumName: "S-JTSK (Ferro)"
      };
      exports$3.beduaram = {
        towgs84: "-106,-87,188",
        ellipse: "clrk80",
        datumName: "Beduaram"
      };
      exports$3.gunung_segara = {
        towgs84: "-403,684,41",
        ellipse: "bessel",
        datumName: "Gunung Segara Jakarta"
      };
      exports$3.rnb72 = {
        towgs84: "106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",
        ellipse: "intl",
        datumName: "Reseau National Belge 1972"
      };
      function datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {
        var out = {};
        if (datumCode === void 0 || datumCode === "none") {
          out.datum_type = PJD_NODATUM;
        } else {
          out.datum_type = PJD_WGS84;
        }
        if (datum_params) {
          out.datum_params = datum_params.map(parseFloat);
          if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {
            out.datum_type = PJD_3PARAM;
          }
          if (out.datum_params.length > 3) {
            if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {
              out.datum_type = PJD_7PARAM;
              out.datum_params[3] *= SEC_TO_RAD;
              out.datum_params[4] *= SEC_TO_RAD;
              out.datum_params[5] *= SEC_TO_RAD;
              out.datum_params[6] = out.datum_params[6] / 1e6 + 1;
            }
          }
        }
        if (nadgrids) {
          out.datum_type = PJD_GRIDSHIFT;
          out.grids = nadgrids;
        }
        out.a = a;
        out.b = b;
        out.es = es;
        out.ep2 = ep2;
        return out;
      }
      var loadedNadgrids = {};
      function nadgrid(key, data) {
        var view = new DataView(data);
        var isLittleEndian = detectLittleEndian(view);
        var header = readHeader(view, isLittleEndian);
        var subgrids = readSubgrids(view, header, isLittleEndian);
        var nadgrid2 = { header, subgrids };
        loadedNadgrids[key] = nadgrid2;
        return nadgrid2;
      }
      function getNadgrids(nadgrids) {
        if (nadgrids === void 0) {
          return null;
        }
        var grids = nadgrids.split(",");
        return grids.map(parseNadgridString);
      }
      function parseNadgridString(value) {
        if (value.length === 0) {
          return null;
        }
        var optional = value[0] === "@";
        if (optional) {
          value = value.slice(1);
        }
        if (value === "null") {
          return { name: "null", mandatory: !optional, grid: null, isNull: true };
        }
        return {
          name: value,
          mandatory: !optional,
          grid: loadedNadgrids[value] || null,
          isNull: false
        };
      }
      function secondsToRadians(seconds) {
        return seconds / 3600 * Math.PI / 180;
      }
      function detectLittleEndian(view) {
        var nFields = view.getInt32(8, false);
        if (nFields === 11) {
          return false;
        }
        nFields = view.getInt32(8, true);
        if (nFields !== 11) {
          console.warn("Failed to detect nadgrid endian-ness, defaulting to little-endian");
        }
        return true;
      }
      function readHeader(view, isLittleEndian) {
        return {
          nFields: view.getInt32(8, isLittleEndian),
          nSubgridFields: view.getInt32(24, isLittleEndian),
          nSubgrids: view.getInt32(40, isLittleEndian),
          shiftType: decodeString(view, 56, 56 + 8).trim(),
          fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),
          fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),
          toSemiMajorAxis: view.getFloat64(152, isLittleEndian),
          toSemiMinorAxis: view.getFloat64(168, isLittleEndian)
        };
      }
      function decodeString(view, start2, end) {
        return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start2, end)));
      }
      function readSubgrids(view, header, isLittleEndian) {
        var gridOffset = 176;
        var grids = [];
        for (var i = 0; i < header.nSubgrids; i++) {
          var subHeader = readGridHeader(view, gridOffset, isLittleEndian);
          var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);
          var lngColumnCount = Math.round(
            1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval
          );
          var latColumnCount = Math.round(
            1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval
          );
          grids.push({
            ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],
            del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],
            lim: [lngColumnCount, latColumnCount],
            count: subHeader.gridNodeCount,
            cvs: mapNodes(nodes)
          });
          gridOffset += 176 + subHeader.gridNodeCount * 16;
        }
        return grids;
      }
      function mapNodes(nodes) {
        return nodes.map(function(r) {
          return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];
        });
      }
      function readGridHeader(view, offset, isLittleEndian) {
        return {
          name: decodeString(view, offset + 8, offset + 16).trim(),
          parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),
          lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),
          upperLatitude: view.getFloat64(offset + 88, isLittleEndian),
          lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),
          upperLongitude: view.getFloat64(offset + 120, isLittleEndian),
          latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),
          longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),
          gridNodeCount: view.getInt32(offset + 168, isLittleEndian)
        };
      }
      function readGridNodes(view, offset, gridHeader, isLittleEndian) {
        var nodesOffset = offset + 176;
        var gridRecordLength = 16;
        var gridShiftRecords = [];
        for (var i = 0; i < gridHeader.gridNodeCount; i++) {
          var record = {
            latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),
            longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),
            latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),
            longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian)
          };
          gridShiftRecords.push(record);
        }
        return gridShiftRecords;
      }
      function Projection(srsCode, callback) {
        if (!(this instanceof Projection)) {
          return new Projection(srsCode);
        }
        callback = callback || function(error) {
          if (error) {
            throw error;
          }
        };
        var json = parse(srsCode);
        if (typeof json !== "object") {
          callback(srsCode);
          return;
        }
        var ourProj = Projection.projections.get(json.projName);
        if (!ourProj) {
          callback(srsCode);
          return;
        }
        if (json.datumCode && json.datumCode !== "none") {
          var datumDef = match(exports$3, json.datumCode);
          if (datumDef) {
            json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(",") : null);
            json.ellps = datumDef.ellipse;
            json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;
          }
        }
        json.k0 = json.k0 || 1;
        json.axis = json.axis || "enu";
        json.ellps = json.ellps || "wgs84";
        json.lat1 = json.lat1 || json.lat0;
        var sphere_ = sphere(json.a, json.b, json.rf, json.ellps, json.sphere);
        var ecc = eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);
        var nadgrids = getNadgrids(json.nadgrids);
        var datumObj = json.datum || datum(
          json.datumCode,
          json.datum_params,
          sphere_.a,
          sphere_.b,
          ecc.es,
          ecc.ep2,
          nadgrids
        );
        extend(this, json);
        extend(this, ourProj);
        this.a = sphere_.a;
        this.b = sphere_.b;
        this.rf = sphere_.rf;
        this.sphere = sphere_.sphere;
        this.es = ecc.es;
        this.e = ecc.e;
        this.ep2 = ecc.ep2;
        this.datum = datumObj;
        this.init();
        callback(null, this);
      }
      Projection.projections = projections;
      Projection.projections.start();
      "use strict";
      function compareDatums(source, dest) {
        if (source.datum_type !== dest.datum_type) {
          return false;
        } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 5e-11) {
          return false;
        } else if (source.datum_type === PJD_3PARAM) {
          return source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2];
        } else if (source.datum_type === PJD_7PARAM) {
          return source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6];
        } else {
          return true;
        }
      }
      function geodeticToGeocentric(p, es, a) {
        var Longitude = p.x;
        var Latitude = p.y;
        var Height = p.z ? p.z : 0;
        var Rn;
        var Sin_Lat;
        var Sin2_Lat;
        var Cos_Lat;
        if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {
          Latitude = -HALF_PI;
        } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {
          Latitude = HALF_PI;
        } else if (Latitude < -HALF_PI) {
          return { x: -Infinity, y: -Infinity, z: p.z };
        } else if (Latitude > HALF_PI) {
          return { x: Infinity, y: Infinity, z: p.z };
        }
        if (Longitude > Math.PI) {
          Longitude -= 2 * Math.PI;
        }
        Sin_Lat = Math.sin(Latitude);
        Cos_Lat = Math.cos(Latitude);
        Sin2_Lat = Sin_Lat * Sin_Lat;
        Rn = a / Math.sqrt(1 - es * Sin2_Lat);
        return {
          x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),
          y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),
          z: (Rn * (1 - es) + Height) * Sin_Lat
        };
      }
      function geocentricToGeodetic(p, es, a, b) {
        var genau = 1e-12;
        var genau2 = genau * genau;
        var maxiter = 30;
        var P;
        var RR;
        var CT;
        var ST;
        var RX;
        var RK;
        var RN;
        var CPHI0;
        var SPHI0;
        var CPHI;
        var SPHI;
        var SDPHI;
        var iter;
        var X = p.x;
        var Y = p.y;
        var Z2 = p.z ? p.z : 0;
        var Longitude;
        var Latitude;
        var Height;
        P = Math.sqrt(X * X + Y * Y);
        RR = Math.sqrt(X * X + Y * Y + Z2 * Z2);
        if (P / a < genau) {
          Longitude = 0;
          if (RR / a < genau) {
            Latitude = HALF_PI;
            Height = -b;
            return {
              x: p.x,
              y: p.y,
              z: p.z
            };
          }
        } else {
          Longitude = Math.atan2(Y, X);
        }
        CT = Z2 / RR;
        ST = P / RR;
        RX = 1 / Math.sqrt(1 - es * (2 - es) * ST * ST);
        CPHI0 = ST * (1 - es) * RX;
        SPHI0 = CT * RX;
        iter = 0;
        do {
          iter++;
          RN = a / Math.sqrt(1 - es * SPHI0 * SPHI0);
          Height = P * CPHI0 + Z2 * SPHI0 - RN * (1 - es * SPHI0 * SPHI0);
          RK = es * RN / (RN + Height);
          RX = 1 / Math.sqrt(1 - RK * (2 - RK) * ST * ST);
          CPHI = ST * (1 - RK) * RX;
          SPHI = CT * RX;
          SDPHI = SPHI * CPHI0 - CPHI * SPHI0;
          CPHI0 = CPHI;
          SPHI0 = SPHI;
        } while (SDPHI * SDPHI > genau2 && iter < maxiter);
        Latitude = Math.atan(SPHI / Math.abs(CPHI));
        return {
          x: Longitude,
          y: Latitude,
          z: Height
        };
      }
      function geocentricToWgs84(p, datum_type, datum_params) {
        if (datum_type === PJD_3PARAM) {
          return {
            x: p.x + datum_params[0],
            y: p.y + datum_params[1],
            z: p.z + datum_params[2]
          };
        } else if (datum_type === PJD_7PARAM) {
          var Dx_BF = datum_params[0];
          var Dy_BF = datum_params[1];
          var Dz_BF = datum_params[2];
          var Rx_BF = datum_params[3];
          var Ry_BF = datum_params[4];
          var Rz_BF = datum_params[5];
          var M_BF = datum_params[6];
          return {
            x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,
            y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,
            z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF
          };
        }
      }
      function geocentricFromWgs84(p, datum_type, datum_params) {
        if (datum_type === PJD_3PARAM) {
          return {
            x: p.x - datum_params[0],
            y: p.y - datum_params[1],
            z: p.z - datum_params[2]
          };
        } else if (datum_type === PJD_7PARAM) {
          var Dx_BF = datum_params[0];
          var Dy_BF = datum_params[1];
          var Dz_BF = datum_params[2];
          var Rx_BF = datum_params[3];
          var Ry_BF = datum_params[4];
          var Rz_BF = datum_params[5];
          var M_BF = datum_params[6];
          var x_tmp = (p.x - Dx_BF) / M_BF;
          var y_tmp = (p.y - Dy_BF) / M_BF;
          var z_tmp = (p.z - Dz_BF) / M_BF;
          return {
            x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,
            y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,
            z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp
          };
        }
      }
      function checkParams(type) {
        return type === PJD_3PARAM || type === PJD_7PARAM;
      }
      var datum_transform = function(source, dest, point) {
        if (compareDatums(source, dest)) {
          return point;
        }
        if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {
          return point;
        }
        var source_a = source.a;
        var source_es = source.es;
        if (source.datum_type === PJD_GRIDSHIFT) {
          var gridShiftCode = applyGridShift(source, false, point);
          if (gridShiftCode !== 0) {
            return void 0;
          }
          source_a = SRS_WGS84_SEMIMAJOR;
          source_es = SRS_WGS84_ESQUARED;
        }
        var dest_a = dest.a;
        var dest_b = dest.b;
        var dest_es = dest.es;
        if (dest.datum_type === PJD_GRIDSHIFT) {
          dest_a = SRS_WGS84_SEMIMAJOR;
          dest_b = SRS_WGS84_SEMIMINOR;
          dest_es = SRS_WGS84_ESQUARED;
        }
        if (source_es === dest_es && source_a === dest_a && !checkParams(source.datum_type) && !checkParams(dest.datum_type)) {
          return point;
        }
        point = geodeticToGeocentric(point, source_es, source_a);
        if (checkParams(source.datum_type)) {
          point = geocentricToWgs84(point, source.datum_type, source.datum_params);
        }
        if (checkParams(dest.datum_type)) {
          point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);
        }
        point = geocentricToGeodetic(point, dest_es, dest_a, dest_b);
        if (dest.datum_type === PJD_GRIDSHIFT) {
          var destGridShiftResult = applyGridShift(dest, true, point);
          if (destGridShiftResult !== 0) {
            return void 0;
          }
        }
        return point;
      };
      function applyGridShift(source, inverse2, point) {
        if (source.grids === null || source.grids.length === 0) {
          console.log("Grid shift grids not found");
          return -1;
        }
        var input = { x: -point.x, y: point.y };
        var output = { x: Number.NaN, y: Number.NaN };
        var attemptedGrids = [];
        outer:
          for (var i = 0; i < source.grids.length; i++) {
            var grid = source.grids[i];
            attemptedGrids.push(grid.name);
            if (grid.isNull) {
              output = input;
              break;
            }
            if (grid.grid === null) {
              if (grid.mandatory) {
                console.log("Unable to find mandatory grid '" + grid.name + "'");
                return -1;
              }
              continue;
            }
            var subgrids = grid.grid.subgrids;
            for (var j = 0, jj = subgrids.length; j < jj; j++) {
              var subgrid = subgrids[j];
              var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 1e4;
              var minX = subgrid.ll[0] - epsilon;
              var minY = subgrid.ll[1] - epsilon;
              var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;
              var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;
              if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x) {
                continue;
              }
              output = applySubgridShift(input, inverse2, subgrid);
              if (!isNaN(output.x)) {
                break outer;
              }
            }
          }
        if (isNaN(output.x)) {
          console.log("Failed to find a grid shift table for location '" + -input.x * R2D + " " + input.y * R2D + " tried: '" + attemptedGrids + "'");
          return -1;
        }
        point.x = -output.x;
        point.y = output.y;
        return 0;
      }
      function applySubgridShift(pin, inverse2, ct) {
        var val = { x: Number.NaN, y: Number.NaN };
        if (isNaN(pin.x)) {
          return val;
        }
        var tb = { x: pin.x, y: pin.y };
        tb.x -= ct.ll[0];
        tb.y -= ct.ll[1];
        tb.x = adjust_lon(tb.x - Math.PI) + Math.PI;
        var t = nadInterpolate(tb, ct);
        if (inverse2) {
          if (isNaN(t.x)) {
            return val;
          }
          t.x = tb.x - t.x;
          t.y = tb.y - t.y;
          var i = 9, tol = 1e-12;
          var dif, del;
          do {
            del = nadInterpolate(t, ct);
            if (isNaN(del.x)) {
              console.log("Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.");
              break;
            }
            dif = { x: tb.x - (del.x + t.x), y: tb.y - (del.y + t.y) };
            t.x += dif.x;
            t.y += dif.y;
          } while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);
          if (i < 0) {
            console.log("Inverse grid shift iterator failed to converge.");
            return val;
          }
          val.x = adjust_lon(t.x + ct.ll[0]);
          val.y = t.y + ct.ll[1];
        } else {
          if (!isNaN(t.x)) {
            val.x = pin.x + t.x;
            val.y = pin.y + t.y;
          }
        }
        return val;
      }
      function nadInterpolate(pin, ct) {
        var t = { x: pin.x / ct.del[0], y: pin.y / ct.del[1] };
        var indx = { x: Math.floor(t.x), y: Math.floor(t.y) };
        var frct = { x: t.x - 1 * indx.x, y: t.y - 1 * indx.y };
        var val = { x: Number.NaN, y: Number.NaN };
        var inx;
        if (indx.x < 0 || indx.x >= ct.lim[0]) {
          return val;
        }
        if (indx.y < 0 || indx.y >= ct.lim[1]) {
          return val;
        }
        inx = indx.y * ct.lim[0] + indx.x;
        var f00 = { x: ct.cvs[inx][0], y: ct.cvs[inx][1] };
        inx++;
        var f10 = { x: ct.cvs[inx][0], y: ct.cvs[inx][1] };
        inx += ct.lim[0];
        var f11 = { x: ct.cvs[inx][0], y: ct.cvs[inx][1] };
        inx--;
        var f01 = { x: ct.cvs[inx][0], y: ct.cvs[inx][1] };
        var m11 = frct.x * frct.y, m10 = frct.x * (1 - frct.y), m00 = (1 - frct.x) * (1 - frct.y), m01 = (1 - frct.x) * frct.y;
        val.x = m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x;
        val.y = m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y;
        return val;
      }
      var adjust_axis = function(crs, denorm, point) {
        var xin = point.x, yin = point.y, zin = point.z || 0;
        var v, t, i;
        var out = {};
        for (i = 0; i < 3; i++) {
          if (denorm && i === 2 && point.z === void 0) {
            continue;
          }
          if (i === 0) {
            v = xin;
            if ("ew".indexOf(crs.axis[i]) !== -1) {
              t = "x";
            } else {
              t = "y";
            }
          } else if (i === 1) {
            v = yin;
            if ("ns".indexOf(crs.axis[i]) !== -1) {
              t = "y";
            } else {
              t = "x";
            }
          } else {
            v = zin;
            t = "z";
          }
          switch (crs.axis[i]) {
            case "e":
              out[t] = v;
              break;
            case "w":
              out[t] = -v;
              break;
            case "n":
              out[t] = v;
              break;
            case "s":
              out[t] = -v;
              break;
            case "u":
              if (point[t] !== void 0) {
                out.z = v;
              }
              break;
            case "d":
              if (point[t] !== void 0) {
                out.z = -v;
              }
              break;
            default:
              return null;
          }
        }
        return out;
      };
      var toPoint = function(array) {
        var out = {
          x: array[0],
          y: array[1]
        };
        if (array.length > 2) {
          out.z = array[2];
        }
        if (array.length > 3) {
          out.m = array[3];
        }
        return out;
      };
      var checkSanity = function(point) {
        checkCoord(point.x);
        checkCoord(point.y);
      };
      function checkCoord(num) {
        if (typeof Number.isFinite === "function") {
          if (Number.isFinite(num)) {
            return;
          }
          throw new TypeError("coordinates must be finite numbers");
        }
        if (typeof num !== "number" || num !== num || !isFinite(num)) {
          throw new TypeError("coordinates must be finite numbers");
        }
      }
      function checkNotWGS(source, dest) {
        return (source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM || source.datum.datum_type === PJD_GRIDSHIFT) && dest.datumCode !== "WGS84" || (dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM || dest.datum.datum_type === PJD_GRIDSHIFT) && source.datumCode !== "WGS84";
      }
      function transform(source, dest, point, enforceAxis) {
        var wgs842;
        if (Array.isArray(point)) {
          point = toPoint(point);
        } else {
          point = {
            x: point.x,
            y: point.y,
            z: point.z,
            m: point.m
          };
        }
        var hasZ = point.z !== void 0;
        checkSanity(point);
        if (source.datum && dest.datum && checkNotWGS(source, dest)) {
          wgs842 = new Projection("WGS84");
          point = transform(source, wgs842, point, enforceAxis);
          source = wgs842;
        }
        if (enforceAxis && source.axis !== "enu") {
          point = adjust_axis(source, false, point);
        }
        if (source.projName === "longlat") {
          point = {
            x: point.x * D2R,
            y: point.y * D2R,
            z: point.z || 0
          };
        } else {
          if (source.to_meter) {
            point = {
              x: point.x * source.to_meter,
              y: point.y * source.to_meter,
              z: point.z || 0
            };
          }
          point = source.inverse(point);
          if (!point) {
            return;
          }
        }
        if (source.from_greenwich) {
          point.x += source.from_greenwich;
        }
        point = datum_transform(source.datum, dest.datum, point);
        if (!point) {
          return;
        }
        if (dest.from_greenwich) {
          point = {
            x: point.x - dest.from_greenwich,
            y: point.y,
            z: point.z || 0
          };
        }
        if (dest.projName === "longlat") {
          point = {
            x: point.x * R2D,
            y: point.y * R2D,
            z: point.z || 0
          };
        } else {
          point = dest.forward(point);
          if (dest.to_meter) {
            point = {
              x: point.x / dest.to_meter,
              y: point.y / dest.to_meter,
              z: point.z || 0
            };
          }
        }
        if (enforceAxis && dest.axis !== "enu") {
          return adjust_axis(dest, true, point);
        }
        if (point && !hasZ) {
          delete point.z;
        }
        return point;
      }
      var wgs84 = Projection("WGS84");
      function transformer(from, to, coords, enforceAxis) {
        var transformedArray, out, keys;
        if (Array.isArray(coords)) {
          transformedArray = transform(from, to, coords, enforceAxis) || { x: NaN, y: NaN };
          if (coords.length > 2) {
            if (typeof from.name !== "undefined" && from.name === "geocent" || typeof to.name !== "undefined" && to.name === "geocent") {
              if (typeof transformedArray.z === "number") {
                return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.splice(3));
              } else {
                return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.splice(3));
              }
            } else {
              return [transformedArray.x, transformedArray.y].concat(coords.splice(2));
            }
          } else {
            return [transformedArray.x, transformedArray.y];
          }
        } else {
          out = transform(from, to, coords, enforceAxis);
          keys = Object.keys(coords);
          if (keys.length === 2) {
            return out;
          }
          keys.forEach(function(key) {
            if (typeof from.name !== "undefined" && from.name === "geocent" || typeof to.name !== "undefined" && to.name === "geocent") {
              if (key === "x" || key === "y" || key === "z") {
                return;
              }
            } else {
              if (key === "x" || key === "y") {
                return;
              }
            }
            out[key] = coords[key];
          });
          return out;
        }
      }
      function checkProj(item) {
        if (item instanceof Projection) {
          return item;
        }
        if (item.oProj) {
          return item.oProj;
        }
        return Projection(item);
      }
      function proj4$1(fromProj, toProj, coord) {
        fromProj = checkProj(fromProj);
        var single = false;
        var obj2;
        if (typeof toProj === "undefined") {
          toProj = fromProj;
          fromProj = wgs84;
          single = true;
        } else if (typeof toProj.x !== "undefined" || Array.isArray(toProj)) {
          coord = toProj;
          toProj = fromProj;
          fromProj = wgs84;
          single = true;
        }
        toProj = checkProj(toProj);
        if (coord) {
          return transformer(fromProj, toProj, coord);
        } else {
          obj2 = {
            forward: function(coords, enforceAxis) {
              return transformer(fromProj, toProj, coords, enforceAxis);
            },
            inverse: function(coords, enforceAxis) {
              return transformer(toProj, fromProj, coords, enforceAxis);
            }
          };
          if (single) {
            obj2.oProj = toProj;
          }
          return obj2;
        }
      }
      var NUM_100K_SETS = 6;
      var SET_ORIGIN_COLUMN_LETTERS = "AJSAJS";
      var SET_ORIGIN_ROW_LETTERS = "AFAFAF";
      var A = 65;
      var I = 73;
      var O = 79;
      var V = 86;
      var Z = 90;
      var mgrs = {
        forward: forward$1,
        inverse: inverse$1,
        toPoint: toPoint$1
      };
      function forward$1(ll, accuracy) {
        accuracy = accuracy || 5;
        return encode(LLtoUTM({
          lat: ll[1],
          lon: ll[0]
        }), accuracy);
      }
      function inverse$1(mgrs2) {
        var bbox = UTMtoLL(decode(mgrs2.toUpperCase()));
        if (bbox.lat && bbox.lon) {
          return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];
        }
        return [bbox.left, bbox.bottom, bbox.right, bbox.top];
      }
      function toPoint$1(mgrs2) {
        var bbox = UTMtoLL(decode(mgrs2.toUpperCase()));
        if (bbox.lat && bbox.lon) {
          return [bbox.lon, bbox.lat];
        }
        return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];
      }
      function degToRad(deg) {
        return deg * (Math.PI / 180);
      }
      function radToDeg(rad) {
        return 180 * (rad / Math.PI);
      }
      function LLtoUTM(ll) {
        var Lat = ll.lat;
        var Long = ll.lon;
        var a = 6378137;
        var eccSquared = 669438e-8;
        var k0 = 0.9996;
        var LongOrigin;
        var eccPrimeSquared;
        var N, T, C, A2, M;
        var LatRad = degToRad(Lat);
        var LongRad = degToRad(Long);
        var LongOriginRad;
        var ZoneNumber;
        ZoneNumber = Math.floor((Long + 180) / 6) + 1;
        if (Long === 180) {
          ZoneNumber = 60;
        }
        if (Lat >= 56 && Lat < 64 && Long >= 3 && Long < 12) {
          ZoneNumber = 32;
        }
        if (Lat >= 72 && Lat < 84) {
          if (Long >= 0 && Long < 9) {
            ZoneNumber = 31;
          } else if (Long >= 9 && Long < 21) {
            ZoneNumber = 33;
          } else if (Long >= 21 && Long < 33) {
            ZoneNumber = 35;
          } else if (Long >= 33 && Long < 42) {
            ZoneNumber = 37;
          }
        }
        LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3;
        LongOriginRad = degToRad(LongOrigin);
        eccPrimeSquared = eccSquared / (1 - eccSquared);
        N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));
        T = Math.tan(LatRad) * Math.tan(LatRad);
        C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);
        A2 = Math.cos(LatRad) * (LongRad - LongOriginRad);
        M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - 35 * eccSquared * eccSquared * eccSquared / 3072 * Math.sin(6 * LatRad));
        var UTMEasting = k0 * N * (A2 + (1 - T + C) * A2 * A2 * A2 / 6 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A2 * A2 * A2 * A2 * A2 / 120) + 5e5;
        var UTMNorthing = k0 * (M + N * Math.tan(LatRad) * (A2 * A2 / 2 + (5 - T + 9 * C + 4 * C * C) * A2 * A2 * A2 * A2 / 24 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A2 * A2 * A2 * A2 * A2 * A2 / 720));
        if (Lat < 0) {
          UTMNorthing += 1e7;
        }
        return {
          northing: Math.round(UTMNorthing),
          easting: Math.round(UTMEasting),
          zoneNumber: ZoneNumber,
          zoneLetter: getLetterDesignator(Lat)
        };
      }
      function UTMtoLL(utm2) {
        var UTMNorthing = utm2.northing;
        var UTMEasting = utm2.easting;
        var zoneLetter = utm2.zoneLetter;
        var zoneNumber = utm2.zoneNumber;
        if (zoneNumber < 0 || zoneNumber > 60) {
          return null;
        }
        var k0 = 0.9996;
        var a = 6378137;
        var eccSquared = 669438e-8;
        var eccPrimeSquared;
        var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));
        var N1, T1, C12, R1, D, M;
        var LongOrigin;
        var mu, phi1Rad;
        var x = UTMEasting - 5e5;
        var y = UTMNorthing;
        if (zoneLetter < "N") {
          y -= 1e7;
        }
        LongOrigin = (zoneNumber - 1) * 6 - 180 + 3;
        eccPrimeSquared = eccSquared / (1 - eccSquared);
        M = y / k0;
        mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));
        phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + 151 * e1 * e1 * e1 / 96 * Math.sin(6 * mu);
        N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));
        T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);
        C12 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);
        R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);
        D = x / (N1 * k0);
        var lat = phi1Rad - N1 * Math.tan(phi1Rad) / R1 * (D * D / 2 - (5 + 3 * T1 + 10 * C12 - 4 * C12 * C12 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C12 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C12 * C12) * D * D * D * D * D * D / 720);
        lat = radToDeg(lat);
        var lon = (D - (1 + 2 * T1 + C12) * D * D * D / 6 + (5 - 2 * C12 + 28 * T1 - 3 * C12 * C12 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);
        lon = LongOrigin + radToDeg(lon);
        var result;
        if (utm2.accuracy) {
          var topRight = UTMtoLL({
            northing: utm2.northing + utm2.accuracy,
            easting: utm2.easting + utm2.accuracy,
            zoneLetter: utm2.zoneLetter,
            zoneNumber: utm2.zoneNumber
          });
          result = {
            top: topRight.lat,
            right: topRight.lon,
            bottom: lat,
            left: lon
          };
        } else {
          result = {
            lat,
            lon
          };
        }
        return result;
      }
      function getLetterDesignator(lat) {
        var LetterDesignator = "Z";
        if (84 >= lat && lat >= 72) {
          LetterDesignator = "X";
        } else if (72 > lat && lat >= 64) {
          LetterDesignator = "W";
        } else if (64 > lat && lat >= 56) {
          LetterDesignator = "V";
        } else if (56 > lat && lat >= 48) {
          LetterDesignator = "U";
        } else if (48 > lat && lat >= 40) {
          LetterDesignator = "T";
        } else if (40 > lat && lat >= 32) {
          LetterDesignator = "S";
        } else if (32 > lat && lat >= 24) {
          LetterDesignator = "R";
        } else if (24 > lat && lat >= 16) {
          LetterDesignator = "Q";
        } else if (16 > lat && lat >= 8) {
          LetterDesignator = "P";
        } else if (8 > lat && lat >= 0) {
          LetterDesignator = "N";
        } else if (0 > lat && lat >= -8) {
          LetterDesignator = "M";
        } else if (-8 > lat && lat >= -16) {
          LetterDesignator = "L";
        } else if (-16 > lat && lat >= -24) {
          LetterDesignator = "K";
        } else if (-24 > lat && lat >= -32) {
          LetterDesignator = "J";
        } else if (-32 > lat && lat >= -40) {
          LetterDesignator = "H";
        } else if (-40 > lat && lat >= -48) {
          LetterDesignator = "G";
        } else if (-48 > lat && lat >= -56) {
          LetterDesignator = "F";
        } else if (-56 > lat && lat >= -64) {
          LetterDesignator = "E";
        } else if (-64 > lat && lat >= -72) {
          LetterDesignator = "D";
        } else if (-72 > lat && lat >= -80) {
          LetterDesignator = "C";
        }
        return LetterDesignator;
      }
      function encode(utm2, accuracy) {
        var seasting = "00000" + utm2.easting, snorthing = "00000" + utm2.northing;
        return utm2.zoneNumber + utm2.zoneLetter + get100kID(utm2.easting, utm2.northing, utm2.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);
      }
      function get100kID(easting, northing, zoneNumber) {
        var setParm = get100kSetForZone(zoneNumber);
        var setColumn = Math.floor(easting / 1e5);
        var setRow = Math.floor(northing / 1e5) % 20;
        return getLetter100kID(setColumn, setRow, setParm);
      }
      function get100kSetForZone(i) {
        var setParm = i % NUM_100K_SETS;
        if (setParm === 0) {
          setParm = NUM_100K_SETS;
        }
        return setParm;
      }
      function getLetter100kID(column, row, parm) {
        var index = parm - 1;
        var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);
        var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);
        var colInt = colOrigin + column - 1;
        var rowInt = rowOrigin + row;
        var rollover = false;
        if (colInt > Z) {
          colInt = colInt - Z + A - 1;
          rollover = true;
        }
        if (colInt === I || colOrigin < I && colInt > I || (colInt > I || colOrigin < I) && rollover) {
          colInt++;
        }
        if (colInt === O || colOrigin < O && colInt > O || (colInt > O || colOrigin < O) && rollover) {
          colInt++;
          if (colInt === I) {
            colInt++;
          }
        }
        if (colInt > Z) {
          colInt = colInt - Z + A - 1;
        }
        if (rowInt > V) {
          rowInt = rowInt - V + A - 1;
          rollover = true;
        } else {
          rollover = false;
        }
        if (rowInt === I || rowOrigin < I && rowInt > I || (rowInt > I || rowOrigin < I) && rollover) {
          rowInt++;
        }
        if (rowInt === O || rowOrigin < O && rowInt > O || (rowInt > O || rowOrigin < O) && rollover) {
          rowInt++;
          if (rowInt === I) {
            rowInt++;
          }
        }
        if (rowInt > V) {
          rowInt = rowInt - V + A - 1;
        }
        var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);
        return twoLetter;
      }
      function decode(mgrsString) {
        if (mgrsString && mgrsString.length === 0) {
          throw "MGRSPoint coverting from nothing";
        }
        var length = mgrsString.length;
        var hunK = null;
        var sb = "";
        var testChar;
        var i = 0;
        while (!/[A-Z]/.test(testChar = mgrsString.charAt(i))) {
          if (i >= 2) {
            throw "MGRSPoint bad conversion from: " + mgrsString;
          }
          sb += testChar;
          i++;
        }
        var zoneNumber = parseInt(sb, 10);
        if (i === 0 || i + 3 > length) {
          throw "MGRSPoint bad conversion from: " + mgrsString;
        }
        var zoneLetter = mgrsString.charAt(i++);
        if (zoneLetter <= "A" || zoneLetter === "B" || zoneLetter === "Y" || zoneLetter >= "Z" || zoneLetter === "I" || zoneLetter === "O") {
          throw "MGRSPoint zone letter " + zoneLetter + " not handled: " + mgrsString;
        }
        hunK = mgrsString.substring(i, i += 2);
        var set = get100kSetForZone(zoneNumber);
        var east100k = getEastingFromChar(hunK.charAt(0), set);
        var north100k = getNorthingFromChar(hunK.charAt(1), set);
        while (north100k < getMinNorthing(zoneLetter)) {
          north100k += 2e6;
        }
        var remainder = length - i;
        if (remainder % 2 !== 0) {
          throw "MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters" + mgrsString;
        }
        var sep = remainder / 2;
        var sepEasting = 0;
        var sepNorthing = 0;
        var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;
        if (sep > 0) {
          accuracyBonus = 1e5 / Math.pow(10, sep);
          sepEastingString = mgrsString.substring(i, i + sep);
          sepEasting = parseFloat(sepEastingString) * accuracyBonus;
          sepNorthingString = mgrsString.substring(i + sep);
          sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;
        }
        easting = sepEasting + east100k;
        northing = sepNorthing + north100k;
        return {
          easting,
          northing,
          zoneLetter,
          zoneNumber,
          accuracy: accuracyBonus
        };
      }
      function getEastingFromChar(e, set) {
        var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);
        var eastingValue = 1e5;
        var rewindMarker = false;
        while (curCol !== e.charCodeAt(0)) {
          curCol++;
          if (curCol === I) {
            curCol++;
          }
          if (curCol === O) {
            curCol++;
          }
          if (curCol > Z) {
            if (rewindMarker) {
              throw "Bad character: " + e;
            }
            curCol = A;
            rewindMarker = true;
          }
          eastingValue += 1e5;
        }
        return eastingValue;
      }
      function getNorthingFromChar(n, set) {
        if (n > "V") {
          throw "MGRSPoint given invalid Northing " + n;
        }
        var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);
        var northingValue = 0;
        var rewindMarker = false;
        while (curRow !== n.charCodeAt(0)) {
          curRow++;
          if (curRow === I) {
            curRow++;
          }
          if (curRow === O) {
            curRow++;
          }
          if (curRow > V) {
            if (rewindMarker) {
              throw "Bad character: " + n;
            }
            curRow = A;
            rewindMarker = true;
          }
          northingValue += 1e5;
        }
        return northingValue;
      }
      function getMinNorthing(zoneLetter) {
        var northing;
        switch (zoneLetter) {
          case "C":
            northing = 11e5;
            break;
          case "D":
            northing = 2e6;
            break;
          case "E":
            northing = 28e5;
            break;
          case "F":
            northing = 37e5;
            break;
          case "G":
            northing = 46e5;
            break;
          case "H":
            northing = 55e5;
            break;
          case "J":
            northing = 64e5;
            break;
          case "K":
            northing = 73e5;
            break;
          case "L":
            northing = 82e5;
            break;
          case "M":
            northing = 91e5;
            break;
          case "N":
            northing = 0;
            break;
          case "P":
            northing = 8e5;
            break;
          case "Q":
            northing = 17e5;
            break;
          case "R":
            northing = 26e5;
            break;
          case "S":
            northing = 35e5;
            break;
          case "T":
            northing = 44e5;
            break;
          case "U":
            northing = 53e5;
            break;
          case "V":
            northing = 62e5;
            break;
          case "W":
            northing = 7e6;
            break;
          case "X":
            northing = 79e5;
            break;
          default:
            northing = -1;
        }
        if (northing >= 0) {
          return northing;
        } else {
          throw "Invalid zone letter: " + zoneLetter;
        }
      }
      function Point(x, y, z) {
        if (!(this instanceof Point)) {
          return new Point(x, y, z);
        }
        if (Array.isArray(x)) {
          this.x = x[0];
          this.y = x[1];
          this.z = x[2] || 0;
        } else if (typeof x === "object") {
          this.x = x.x;
          this.y = x.y;
          this.z = x.z || 0;
        } else if (typeof x === "string" && typeof y === "undefined") {
          var coords = x.split(",");
          this.x = parseFloat(coords[0], 10);
          this.y = parseFloat(coords[1], 10);
          this.z = parseFloat(coords[2], 10) || 0;
        } else {
          this.x = x;
          this.y = y;
          this.z = z || 0;
        }
        console.warn("proj4.Point will be removed in version 3, use proj4.toPoint");
      }
      Point.fromMGRS = function(mgrsStr) {
        return new Point(toPoint$1(mgrsStr));
      };
      Point.prototype.toMGRS = function(accuracy) {
        return forward$1([this.x, this.y], accuracy);
      };
      var C00 = 1;
      var C02 = 0.25;
      var C04 = 0.046875;
      var C06 = 0.01953125;
      var C08 = 0.01068115234375;
      var C22 = 0.75;
      var C44 = 0.46875;
      var C46 = 0.013020833333333334;
      var C48 = 0.007120768229166667;
      var C66 = 0.3645833333333333;
      var C68 = 0.005696614583333333;
      var C88 = 0.3076171875;
      var pj_enfn = function(es) {
        var en = [];
        en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));
        en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));
        var t = es * es;
        en[2] = t * (C44 - es * (C46 + es * C48));
        t *= es;
        en[3] = t * (C66 - es * C68);
        en[4] = t * es * C88;
        return en;
      };
      var pj_mlfn = function(phi, sphi, cphi, en) {
        cphi *= sphi;
        sphi *= sphi;
        return en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4])));
      };
      var MAX_ITER = 20;
      var pj_inv_mlfn = function(arg, es, en) {
        var k = 1 / (1 - es);
        var phi = arg;
        for (var i = MAX_ITER; i; --i) {
          var s = Math.sin(phi);
          var t = 1 - es * s * s;
          t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;
          phi -= t;
          if (Math.abs(t) < EPSLN) {
            return phi;
          }
        }
        return phi;
      };
      function init$2() {
        this.x0 = this.x0 !== void 0 ? this.x0 : 0;
        this.y0 = this.y0 !== void 0 ? this.y0 : 0;
        this.long0 = this.long0 !== void 0 ? this.long0 : 0;
        this.lat0 = this.lat0 !== void 0 ? this.lat0 : 0;
        if (this.es) {
          this.en = pj_enfn(this.es);
          this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);
        }
      }
      function forward$2(p) {
        var lon = p.x;
        var lat = p.y;
        var delta_lon = adjust_lon(lon - this.long0);
        var con;
        var x, y;
        var sin_phi = Math.sin(lat);
        var cos_phi = Math.cos(lat);
        if (!this.es) {
          var b = cos_phi * Math.sin(delta_lon);
          if (Math.abs(Math.abs(b) - 1) < EPSLN) {
            return 93;
          } else {
            x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;
            y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));
            b = Math.abs(y);
            if (b >= 1) {
              if (b - 1 > EPSLN) {
                return 93;
              } else {
                y = 0;
              }
            } else {
              y = Math.acos(y);
            }
            if (lat < 0) {
              y = -y;
            }
            y = this.a * this.k0 * (y - this.lat0) + this.y0;
          }
        } else {
          var al = cos_phi * delta_lon;
          var als = Math.pow(al, 2);
          var c = this.ep2 * Math.pow(cos_phi, 2);
          var cs = Math.pow(c, 2);
          var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;
          var t = Math.pow(tq, 2);
          var ts = Math.pow(t, 2);
          con = 1 - this.es * Math.pow(sin_phi, 2);
          al = al / Math.sqrt(con);
          var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);
          x = this.a * (this.k0 * al * (1 + als / 6 * (1 - t + c + als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c + als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) + this.x0;
          y = this.a * (this.k0 * (ml - this.ml0 + sin_phi * delta_lon * al / 2 * (1 + als / 12 * (5 - t + 9 * c + 4 * cs + als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c + als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) + this.y0;
        }
        p.x = x;
        p.y = y;
        return p;
      }
      function inverse$2(p) {
        var con, phi;
        var lat, lon;
        var x = (p.x - this.x0) * (1 / this.a);
        var y = (p.y - this.y0) * (1 / this.a);
        if (!this.es) {
          var f = Math.exp(x / this.k0);
          var g = 0.5 * (f - 1 / f);
          var temp = this.lat0 + y / this.k0;
          var h = Math.cos(temp);
          con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));
          lat = Math.asin(con);
          if (y < 0) {
            lat = -lat;
          }
          if (g === 0 && h === 0) {
            lon = 0;
          } else {
            lon = adjust_lon(Math.atan2(g, h) + this.long0);
          }
        } else {
          con = this.ml0 + y / this.k0;
          phi = pj_inv_mlfn(con, this.es, this.en);
          if (Math.abs(phi) < HALF_PI) {
            var sin_phi = Math.sin(phi);
            var cos_phi = Math.cos(phi);
            var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;
            var c = this.ep2 * Math.pow(cos_phi, 2);
            var cs = Math.pow(c, 2);
            var t = Math.pow(tan_phi, 2);
            var ts = Math.pow(t, 2);
            con = 1 - this.es * Math.pow(sin_phi, 2);
            var d = x * Math.sqrt(con) / this.k0;
            var ds = Math.pow(d, 2);
            con = con * tan_phi;
            lat = phi - con * ds / (1 - this.es) * 0.5 * (1 - ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs - ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c - ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));
            lon = adjust_lon(this.long0 + d * (1 - ds / 6 * (1 + 2 * t + c - ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c - ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi);
          } else {
            lat = HALF_PI * sign(y);
            lon = 0;
          }
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$3 = ["Fast_Transverse_Mercator", "Fast Transverse Mercator"];
      var tmerc = {
        init: init$2,
        forward: forward$2,
        inverse: inverse$2,
        names: names$3
      };
      var sinh = function(x) {
        var r = Math.exp(x);
        r = (r - 1 / r) / 2;
        return r;
      };
      var hypot = function(x, y) {
        x = Math.abs(x);
        y = Math.abs(y);
        var a = Math.max(x, y);
        var b = Math.min(x, y) / (a ? a : 1);
        return a * Math.sqrt(1 + Math.pow(b, 2));
      };
      var log1py = function(x) {
        var y = 1 + x;
        var z = y - 1;
        return z === 0 ? x : x * Math.log(y) / z;
      };
      var asinhy = function(x) {
        var y = Math.abs(x);
        y = log1py(y * (1 + y / (hypot(1, y) + 1)));
        return x < 0 ? -y : y;
      };
      var gatg = function(pp, B) {
        var cos_2B = 2 * Math.cos(2 * B);
        var i = pp.length - 1;
        var h1 = pp[i];
        var h2 = 0;
        var h;
        while (--i >= 0) {
          h = -h2 + cos_2B * h1 + pp[i];
          h2 = h1;
          h1 = h;
        }
        return B + h * Math.sin(2 * B);
      };
      var clens = function(pp, arg_r) {
        var r = 2 * Math.cos(arg_r);
        var i = pp.length - 1;
        var hr1 = pp[i];
        var hr2 = 0;
        var hr;
        while (--i >= 0) {
          hr = -hr2 + r * hr1 + pp[i];
          hr2 = hr1;
          hr1 = hr;
        }
        return Math.sin(arg_r) * hr;
      };
      var cosh = function(x) {
        var r = Math.exp(x);
        r = (r + 1 / r) / 2;
        return r;
      };
      var clens_cmplx = function(pp, arg_r, arg_i) {
        var sin_arg_r = Math.sin(arg_r);
        var cos_arg_r = Math.cos(arg_r);
        var sinh_arg_i = sinh(arg_i);
        var cosh_arg_i = cosh(arg_i);
        var r = 2 * cos_arg_r * cosh_arg_i;
        var i = -2 * sin_arg_r * sinh_arg_i;
        var j = pp.length - 1;
        var hr = pp[j];
        var hi1 = 0;
        var hr1 = 0;
        var hi = 0;
        var hr2;
        var hi2;
        while (--j >= 0) {
          hr2 = hr1;
          hi2 = hi1;
          hr1 = hr;
          hi1 = hi;
          hr = -hr2 + r * hr1 - i * hi1 + pp[j];
          hi = -hi2 + i * hr1 + r * hi1;
        }
        r = sin_arg_r * cosh_arg_i;
        i = cos_arg_r * sinh_arg_i;
        return [r * hr - i * hi, r * hi + i * hr];
      };
      function init$3() {
        if (!this.approx && (isNaN(this.es) || this.es <= 0)) {
          throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION["Fast_Transverse_Mercator"] in the WKT.');
        }
        if (this.approx) {
          tmerc.init.apply(this);
          this.forward = tmerc.forward;
          this.inverse = tmerc.inverse;
        }
        this.x0 = this.x0 !== void 0 ? this.x0 : 0;
        this.y0 = this.y0 !== void 0 ? this.y0 : 0;
        this.long0 = this.long0 !== void 0 ? this.long0 : 0;
        this.lat0 = this.lat0 !== void 0 ? this.lat0 : 0;
        this.cgb = [];
        this.cbg = [];
        this.utg = [];
        this.gtu = [];
        var f = this.es / (1 + Math.sqrt(1 - this.es));
        var n = f / (2 - f);
        var np = n;
        this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675))))));
        this.cbg[0] = n * (-2 + n * (2 / 3 + n * (4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));
        np = np * n;
        this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));
        this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * (-13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));
        np = np * n;
        this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));
        this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));
        np = np * n;
        this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));
        this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * (-24832 / 14175)));
        np = np * n;
        this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));
        this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));
        np = np * n;
        this.cgb[5] = np * (601676 / 22275);
        this.cbg[5] = np * (444337 / 155925);
        np = Math.pow(n, 2);
        this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));
        this.utg[0] = n * (-0.5 + n * (2 / 3 + n * (-37 / 96 + n * (1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));
        this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));
        this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));
        this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));
        np = np * n;
        this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720))));
        this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));
        np = np * n;
        this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));
        this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));
        np = np * n;
        this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));
        this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));
        np = np * n;
        this.utg[5] = np * (-20648693 / 638668800);
        this.gtu[5] = np * (212378941 / 319334400);
        var Z2 = gatg(this.cbg, this.lat0);
        this.Zb = -this.Qn * (Z2 + clens(this.gtu, 2 * Z2));
      }
      function forward$3(p) {
        var Ce = adjust_lon(p.x - this.long0);
        var Cn = p.y;
        Cn = gatg(this.cbg, Cn);
        var sin_Cn = Math.sin(Cn);
        var cos_Cn = Math.cos(Cn);
        var sin_Ce = Math.sin(Ce);
        var cos_Ce = Math.cos(Ce);
        Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);
        Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));
        Ce = asinhy(Math.tan(Ce));
        var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);
        Cn = Cn + tmp[0];
        Ce = Ce + tmp[1];
        var x;
        var y;
        if (Math.abs(Ce) <= 2.623395162778) {
          x = this.a * (this.Qn * Ce) + this.x0;
          y = this.a * (this.Qn * Cn + this.Zb) + this.y0;
        } else {
          x = Infinity;
          y = Infinity;
        }
        p.x = x;
        p.y = y;
        return p;
      }
      function inverse$3(p) {
        var Ce = (p.x - this.x0) * (1 / this.a);
        var Cn = (p.y - this.y0) * (1 / this.a);
        Cn = (Cn - this.Zb) / this.Qn;
        Ce = Ce / this.Qn;
        var lon;
        var lat;
        if (Math.abs(Ce) <= 2.623395162778) {
          var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);
          Cn = Cn + tmp[0];
          Ce = Ce + tmp[1];
          Ce = Math.atan(sinh(Ce));
          var sin_Cn = Math.sin(Cn);
          var cos_Cn = Math.cos(Cn);
          var sin_Ce = Math.sin(Ce);
          var cos_Ce = Math.cos(Ce);
          Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));
          Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);
          lon = adjust_lon(Ce + this.long0);
          lat = gatg(this.cgb, Cn);
        } else {
          lon = Infinity;
          lat = Infinity;
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$4 = ["Extended_Transverse_Mercator", "Extended Transverse Mercator", "etmerc", "Transverse_Mercator", "Transverse Mercator", "Gauss Kruger", "Gauss_Kruger", "tmerc"];
      var etmerc = {
        init: init$3,
        forward: forward$3,
        inverse: inverse$3,
        names: names$4
      };
      var adjust_zone = function(zone, lon) {
        if (zone === void 0) {
          zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;
          if (zone < 0) {
            return 0;
          } else if (zone > 60) {
            return 60;
          }
        }
        return zone;
      };
      var dependsOn = "etmerc";
      function init$4() {
        var zone = adjust_zone(this.zone, this.long0);
        if (zone === void 0) {
          throw new Error("unknown utm zone");
        }
        this.lat0 = 0;
        this.long0 = (6 * Math.abs(zone) - 183) * D2R;
        this.x0 = 5e5;
        this.y0 = this.utmSouth ? 1e7 : 0;
        this.k0 = 0.9996;
        etmerc.init.apply(this);
        this.forward = etmerc.forward;
        this.inverse = etmerc.inverse;
      }
      var names$5 = ["Universal Transverse Mercator System", "utm"];
      var utm = {
        init: init$4,
        names: names$5,
        dependsOn
      };
      var srat = function(esinp, exp) {
        return Math.pow((1 - esinp) / (1 + esinp), exp);
      };
      var MAX_ITER$1 = 20;
      function init$6() {
        var sphi = Math.sin(this.lat0);
        var cphi = Math.cos(this.lat0);
        cphi *= cphi;
        this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);
        this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));
        this.phic0 = Math.asin(sphi / this.C);
        this.ratexp = 0.5 * this.C * this.e;
        this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));
      }
      function forward$5(p) {
        var lon = p.x;
        var lat = p.y;
        p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;
        p.x = this.C * lon;
        return p;
      }
      function inverse$5(p) {
        var DEL_TOL = 1e-14;
        var lon = p.x / this.C;
        var lat = p.y;
        var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);
        for (var i = MAX_ITER$1; i > 0; --i) {
          lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), -0.5 * this.e)) - HALF_PI;
          if (Math.abs(lat - p.y) < DEL_TOL) {
            break;
          }
          p.y = lat;
        }
        if (!i) {
          return null;
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$7 = ["gauss"];
      var gauss = {
        init: init$6,
        forward: forward$5,
        inverse: inverse$5,
        names: names$7
      };
      function init$5() {
        gauss.init.apply(this);
        if (!this.rc) {
          return;
        }
        this.sinc0 = Math.sin(this.phic0);
        this.cosc0 = Math.cos(this.phic0);
        this.R2 = 2 * this.rc;
        if (!this.title) {
          this.title = "Oblique Stereographic Alternative";
        }
      }
      function forward$4(p) {
        var sinc, cosc, cosl, k;
        p.x = adjust_lon(p.x - this.long0);
        gauss.forward.apply(this, [p]);
        sinc = Math.sin(p.y);
        cosc = Math.cos(p.y);
        cosl = Math.cos(p.x);
        k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);
        p.x = k * cosc * Math.sin(p.x);
        p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);
        p.x = this.a * p.x + this.x0;
        p.y = this.a * p.y + this.y0;
        return p;
      }
      function inverse$4(p) {
        var sinc, cosc, lon, lat, rho;
        p.x = (p.x - this.x0) / this.a;
        p.y = (p.y - this.y0) / this.a;
        p.x /= this.k0;
        p.y /= this.k0;
        if (rho = hypot(p.x, p.y)) {
          var c = 2 * Math.atan2(rho, this.R2);
          sinc = Math.sin(c);
          cosc = Math.cos(c);
          lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);
          lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);
        } else {
          lat = this.phic0;
          lon = 0;
        }
        p.x = lon;
        p.y = lat;
        gauss.inverse.apply(this, [p]);
        p.x = adjust_lon(p.x + this.long0);
        return p;
      }
      var names$6 = ["Stereographic_North_Pole", "Oblique_Stereographic", "sterea", "Oblique Stereographic Alternative", "Double_Stereographic"];
      var sterea = {
        init: init$5,
        forward: forward$4,
        inverse: inverse$4,
        names: names$6
      };
      function ssfn_(phit, sinphi, eccen) {
        sinphi *= eccen;
        return Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen);
      }
      function init$7() {
        this.x0 = this.x0 || 0;
        this.y0 = this.y0 || 0;
        this.lat0 = this.lat0 || 0;
        this.long0 = this.long0 || 0;
        this.coslat0 = Math.cos(this.lat0);
        this.sinlat0 = Math.sin(this.lat0);
        if (this.sphere) {
          if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {
            this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));
          }
        } else {
          if (Math.abs(this.coslat0) <= EPSLN) {
            if (this.lat0 > 0) {
              this.con = 1;
            } else {
              this.con = -1;
            }
          }
          this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));
          if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN && Math.abs(Math.cos(this.lat_ts)) > EPSLN) {
            this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));
          }
          this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);
          this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;
          this.cosX0 = Math.cos(this.X0);
          this.sinX0 = Math.sin(this.X0);
        }
      }
      function forward$6(p) {
        var lon = p.x;
        var lat = p.y;
        var sinlat = Math.sin(lat);
        var coslat = Math.cos(lat);
        var A2, X, sinX, cosX, ts, rh;
        var dlon = adjust_lon(lon - this.long0);
        if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {
          p.x = NaN;
          p.y = NaN;
          return p;
        }
        if (this.sphere) {
          A2 = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));
          p.x = this.a * A2 * coslat * Math.sin(dlon) + this.x0;
          p.y = this.a * A2 * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;
          return p;
        } else {
          X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;
          cosX = Math.cos(X);
          sinX = Math.sin(X);
          if (Math.abs(this.coslat0) <= EPSLN) {
            ts = tsfnz(this.e, lat * this.con, this.con * sinlat);
            rh = 2 * this.a * this.k0 * ts / this.cons;
            p.x = this.x0 + rh * Math.sin(lon - this.long0);
            p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);
            return p;
          } else if (Math.abs(this.sinlat0) < EPSLN) {
            A2 = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));
            p.y = A2 * sinX;
          } else {
            A2 = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));
            p.y = A2 * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;
          }
          p.x = A2 * cosX * Math.sin(dlon) + this.x0;
        }
        return p;
      }
      function inverse$6(p) {
        p.x -= this.x0;
        p.y -= this.y0;
        var lon, lat, ts, ce, Chi;
        var rh = Math.sqrt(p.x * p.x + p.y * p.y);
        if (this.sphere) {
          var c = 2 * Math.atan(rh / (2 * this.a * this.k0));
          lon = this.long0;
          lat = this.lat0;
          if (rh <= EPSLN) {
            p.x = lon;
            p.y = lat;
            return p;
          }
          lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);
          if (Math.abs(this.coslat0) < EPSLN) {
            if (this.lat0 > 0) {
              lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));
            } else {
              lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));
            }
          } else {
            lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));
          }
          p.x = lon;
          p.y = lat;
          return p;
        } else {
          if (Math.abs(this.coslat0) <= EPSLN) {
            if (rh <= EPSLN) {
              lat = this.lat0;
              lon = this.long0;
              p.x = lon;
              p.y = lat;
              return p;
            }
            p.x *= this.con;
            p.y *= this.con;
            ts = rh * this.cons / (2 * this.a * this.k0);
            lat = this.con * phi2z(this.e, ts);
            lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, -1 * p.y));
          } else {
            ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));
            lon = this.long0;
            if (rh <= EPSLN) {
              Chi = this.X0;
            } else {
              Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);
              lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));
            }
            lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));
          }
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$8 = ["stere", "Stereographic_South_Pole", "Polar Stereographic (variant B)", "Polar_Stereographic"];
      var stere = {
        init: init$7,
        forward: forward$6,
        inverse: inverse$6,
        names: names$8,
        ssfn_
      };
      function init$8() {
        var phy0 = this.lat0;
        this.lambda0 = this.long0;
        var sinPhy0 = Math.sin(phy0);
        var semiMajorAxis = this.a;
        var invF = this.rf;
        var flattening = 1 / invF;
        var e2 = 2 * flattening - Math.pow(flattening, 2);
        var e = this.e = Math.sqrt(e2);
        this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));
        this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));
        this.b0 = Math.asin(sinPhy0 / this.alpha);
        var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));
        var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));
        var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));
        this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;
      }
      function forward$7(p) {
        var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));
        var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));
        var S = -this.alpha * (Sa1 + Sa2) + this.K;
        var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);
        var I2 = this.alpha * (p.x - this.lambda0);
        var rotI = Math.atan(Math.sin(I2) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I2)));
        var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I2));
        p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;
        p.x = this.R * rotI + this.x0;
        return p;
      }
      function inverse$7(p) {
        var Y = p.x - this.x0;
        var X = p.y - this.y0;
        var rotI = Y / this.R;
        var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);
        var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));
        var I2 = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));
        var lambda = this.lambda0 + I2 / this.alpha;
        var S = 0;
        var phy = b;
        var prevPhy = -1e3;
        var iteration = 0;
        while (Math.abs(phy - prevPhy) > 1e-7) {
          if (++iteration > 20) {
            return;
          }
          S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));
          prevPhy = phy;
          phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;
        }
        p.x = lambda;
        p.y = phy;
        return p;
      }
      var names$9 = ["somerc"];
      var somerc = {
        init: init$8,
        forward: forward$7,
        inverse: inverse$7,
        names: names$9
      };
      var TOL = 1e-7;
      function isTypeA(P) {
        var typeAProjections = ["Hotine_Oblique_Mercator", "Hotine_Oblique_Mercator_Azimuth_Natural_Origin"];
        var projectionName = typeof P.PROJECTION === "object" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;
        return "no_uoff" in P || "no_off" in P || typeAProjections.indexOf(projectionName) !== -1;
      }
      function init$9() {
        var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0, gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0;
        this.no_off = isTypeA(this);
        this.no_rot = "no_rot" in this;
        var alp = false;
        if ("alpha" in this) {
          alp = true;
        }
        var gam = false;
        if ("rectified_grid_angle" in this) {
          gam = true;
        }
        if (alp) {
          alpha_c = this.alpha;
        }
        if (gam) {
          gamma = this.rectified_grid_angle * D2R;
        }
        if (alp || gam) {
          lamc = this.longc;
        } else {
          lam1 = this.long1;
          phi1 = this.lat1;
          lam2 = this.long2;
          phi2 = this.lat2;
          if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL || Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL || Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {
            throw new Error();
          }
        }
        var one_es = 1 - this.es;
        com = Math.sqrt(one_es);
        if (Math.abs(this.lat0) > EPSLN) {
          sinph0 = Math.sin(this.lat0);
          cosph0 = Math.cos(this.lat0);
          con = 1 - this.es * sinph0 * sinph0;
          this.B = cosph0 * cosph0;
          this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);
          this.A = this.B * this.k0 * com / con;
          D = this.B * com / (cosph0 * Math.sqrt(con));
          F = D * D - 1;
          if (F <= 0) {
            F = 0;
          } else {
            F = Math.sqrt(F);
            if (this.lat0 < 0) {
              F = -F;
            }
          }
          this.E = F += D;
          this.E *= Math.pow(tsfnz(this.e, this.lat0, sinph0), this.B);
        } else {
          this.B = 1 / com;
          this.A = this.k0;
          this.E = D = F = 1;
        }
        if (alp || gam) {
          if (alp) {
            gamma0 = Math.asin(Math.sin(alpha_c) / D);
            if (!gam) {
              gamma = alpha_c;
            }
          } else {
            gamma0 = gamma;
            alpha_c = Math.asin(D * Math.sin(gamma0));
          }
          this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;
        } else {
          H = Math.pow(tsfnz(this.e, phi1, Math.sin(phi1)), this.B);
          L = Math.pow(tsfnz(this.e, phi2, Math.sin(phi2)), this.B);
          F = this.E / H;
          p = (L - H) / (L + H);
          J = this.E * this.E;
          J = (J - L * H) / (J + L * H);
          con = lam1 - lam2;
          if (con < -Math.pi) {
            lam2 -= TWO_PI;
          } else if (con > Math.pi) {
            lam2 += TWO_PI;
          }
          this.lam0 = adjust_lon(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);
          gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon(lam1 - this.lam0)) / (F - 1 / F));
          gamma = alpha_c = Math.asin(D * Math.sin(gamma0));
        }
        this.singam = Math.sin(gamma0);
        this.cosgam = Math.cos(gamma0);
        this.sinrot = Math.sin(gamma);
        this.cosrot = Math.cos(gamma);
        this.rB = 1 / this.B;
        this.ArB = this.A * this.rB;
        this.BrA = 1 / this.ArB;
        if (this.no_off) {
          this.u_0 = 0;
        } else {
          this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));
          if (this.lat0 < 0) {
            this.u_0 = -this.u_0;
          }
        }
        F = 0.5 * gamma0;
        this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));
        this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));
      }
      function forward$8(p) {
        var coords = {};
        var S, T, U, V2, W, temp, u, v;
        p.x = p.x - this.lam0;
        if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {
          W = this.E / Math.pow(tsfnz(this.e, p.y, Math.sin(p.y)), this.B);
          temp = 1 / W;
          S = 0.5 * (W - temp);
          T = 0.5 * (W + temp);
          V2 = Math.sin(this.B * p.x);
          U = (S * this.singam - V2 * this.cosgam) / T;
          if (Math.abs(Math.abs(U) - 1) < EPSLN) {
            throw new Error();
          }
          v = 0.5 * this.ArB * Math.log((1 - U) / (1 + U));
          temp = Math.cos(this.B * p.x);
          if (Math.abs(temp) < TOL) {
            u = this.A * p.x;
          } else {
            u = this.ArB * Math.atan2(S * this.cosgam + V2 * this.singam, temp);
          }
        } else {
          v = p.y > 0 ? this.v_pole_n : this.v_pole_s;
          u = this.ArB * p.y;
        }
        if (this.no_rot) {
          coords.x = u;
          coords.y = v;
        } else {
          u -= this.u_0;
          coords.x = v * this.cosrot + u * this.sinrot;
          coords.y = u * this.cosrot - v * this.sinrot;
        }
        coords.x = this.a * coords.x + this.x0;
        coords.y = this.a * coords.y + this.y0;
        return coords;
      }
      function inverse$8(p) {
        var u, v, Qp, Sp, Tp, Vp, Up;
        var coords = {};
        p.x = (p.x - this.x0) * (1 / this.a);
        p.y = (p.y - this.y0) * (1 / this.a);
        if (this.no_rot) {
          v = p.y;
          u = p.x;
        } else {
          v = p.x * this.cosrot - p.y * this.sinrot;
          u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;
        }
        Qp = Math.exp(-this.BrA * v);
        Sp = 0.5 * (Qp - 1 / Qp);
        Tp = 0.5 * (Qp + 1 / Qp);
        Vp = Math.sin(this.BrA * u);
        Up = (Vp * this.cosgam + Sp * this.singam) / Tp;
        if (Math.abs(Math.abs(Up) - 1) < EPSLN) {
          coords.x = 0;
          coords.y = Up < 0 ? -HALF_PI : HALF_PI;
        } else {
          coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));
          coords.y = phi2z(this.e, Math.pow(coords.y, 1 / this.B));
          if (coords.y === Infinity) {
            throw new Error();
          }
          coords.x = -this.rB * Math.atan2(Sp * this.cosgam - Vp * this.singam, Math.cos(this.BrA * u));
        }
        coords.x += this.lam0;
        return coords;
      }
      var names$10 = ["Hotine_Oblique_Mercator", "Hotine Oblique Mercator", "Hotine_Oblique_Mercator_Azimuth_Natural_Origin", "Hotine_Oblique_Mercator_Two_Point_Natural_Origin", "Hotine_Oblique_Mercator_Azimuth_Center", "Oblique_Mercator", "omerc"];
      var omerc = {
        init: init$9,
        forward: forward$8,
        inverse: inverse$8,
        names: names$10
      };
      function init$10() {
        if (!this.lat2) {
          this.lat2 = this.lat1;
        }
        if (!this.k0) {
          this.k0 = 1;
        }
        this.x0 = this.x0 || 0;
        this.y0 = this.y0 || 0;
        if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
          return;
        }
        var temp = this.b / this.a;
        this.e = Math.sqrt(1 - temp * temp);
        var sin1 = Math.sin(this.lat1);
        var cos1 = Math.cos(this.lat1);
        var ms1 = msfnz(this.e, sin1, cos1);
        var ts1 = tsfnz(this.e, this.lat1, sin1);
        var sin2 = Math.sin(this.lat2);
        var cos2 = Math.cos(this.lat2);
        var ms2 = msfnz(this.e, sin2, cos2);
        var ts2 = tsfnz(this.e, this.lat2, sin2);
        var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));
        if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
          this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);
        } else {
          this.ns = sin1;
        }
        if (isNaN(this.ns)) {
          this.ns = sin1;
        }
        this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));
        this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);
        if (!this.title) {
          this.title = "Lambert Conformal Conic";
        }
      }
      function forward$9(p) {
        var lon = p.x;
        var lat = p.y;
        if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {
          lat = sign(lat) * (HALF_PI - 2 * EPSLN);
        }
        var con = Math.abs(Math.abs(lat) - HALF_PI);
        var ts, rh1;
        if (con > EPSLN) {
          ts = tsfnz(this.e, lat, Math.sin(lat));
          rh1 = this.a * this.f0 * Math.pow(ts, this.ns);
        } else {
          con = lat * this.ns;
          if (con <= 0) {
            return null;
          }
          rh1 = 0;
        }
        var theta = this.ns * adjust_lon(lon - this.long0);
        p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;
        p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;
        return p;
      }
      function inverse$9(p) {
        var rh1, con, ts;
        var lat, lon;
        var x = (p.x - this.x0) / this.k0;
        var y = this.rh - (p.y - this.y0) / this.k0;
        if (this.ns > 0) {
          rh1 = Math.sqrt(x * x + y * y);
          con = 1;
        } else {
          rh1 = -Math.sqrt(x * x + y * y);
          con = -1;
        }
        var theta = 0;
        if (rh1 !== 0) {
          theta = Math.atan2(con * x, con * y);
        }
        if (rh1 !== 0 || this.ns > 0) {
          con = 1 / this.ns;
          ts = Math.pow(rh1 / (this.a * this.f0), con);
          lat = phi2z(this.e, ts);
          if (lat === -9999) {
            return null;
          }
        } else {
          lat = -HALF_PI;
        }
        lon = adjust_lon(theta / this.ns + this.long0);
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$11 = [
        "Lambert Tangential Conformal Conic Projection",
        "Lambert_Conformal_Conic",
        "Lambert_Conformal_Conic_1SP",
        "Lambert_Conformal_Conic_2SP",
        "lcc",
        "Lambert Conic Conformal (1SP)",
        "Lambert Conic Conformal (2SP)"
      ];
      var lcc = {
        init: init$10,
        forward: forward$9,
        inverse: inverse$9,
        names: names$11
      };
      function init$11() {
        this.a = 6377397155e-3;
        this.es = 0.006674372230614;
        this.e = Math.sqrt(this.es);
        if (!this.lat0) {
          this.lat0 = 0.863937979737193;
        }
        if (!this.long0) {
          this.long0 = 0.7417649320975901 - 0.308341501185665;
        }
        if (!this.k0) {
          this.k0 = 0.9999;
        }
        this.s45 = 0.785398163397448;
        this.s90 = 2 * this.s45;
        this.fi0 = this.lat0;
        this.e2 = this.es;
        this.e = Math.sqrt(this.e2);
        this.alfa = Math.sqrt(1 + this.e2 * Math.pow(Math.cos(this.fi0), 4) / (1 - this.e2));
        this.uq = 1.04216856380474;
        this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);
        this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);
        this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;
        this.k1 = this.k0;
        this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));
        this.s0 = 1.37008346281555;
        this.n = Math.sin(this.s0);
        this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);
        this.ad = this.s90 - this.uq;
      }
      function forward$10(p) {
        var gfi, u, deltav, s, d, eps, ro;
        var lon = p.x;
        var lat = p.y;
        var delta_lon = adjust_lon(lon - this.long0);
        gfi = Math.pow((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat)), this.alfa * this.e / 2);
        u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);
        deltav = -delta_lon * this.alfa;
        s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));
        d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));
        eps = this.n * d;
        ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);
        p.y = ro * Math.cos(eps) / 1;
        p.x = ro * Math.sin(eps) / 1;
        if (!this.czech) {
          p.y *= -1;
          p.x *= -1;
        }
        return p;
      }
      function inverse$10(p) {
        var u, deltav, s, d, eps, ro, fi1;
        var ok;
        var tmp = p.x;
        p.x = p.y;
        p.y = tmp;
        if (!this.czech) {
          p.y *= -1;
          p.x *= -1;
        }
        ro = Math.sqrt(p.x * p.x + p.y * p.y);
        eps = Math.atan2(p.y, p.x);
        d = eps / Math.sin(this.s0);
        s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);
        u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));
        deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));
        p.x = this.long0 - deltav / this.alfa;
        fi1 = u;
        ok = 0;
        var iter = 0;
        do {
          p.y = 2 * (Math.atan(Math.pow(this.k, -1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);
          if (Math.abs(fi1 - p.y) < 1e-10) {
            ok = 1;
          }
          fi1 = p.y;
          iter += 1;
        } while (ok === 0 && iter < 15);
        if (iter >= 15) {
          return null;
        }
        return p;
      }
      var names$12 = ["Krovak", "krovak"];
      var krovak = {
        init: init$11,
        forward: forward$10,
        inverse: inverse$10,
        names: names$12
      };
      var mlfn = function(e0, e1, e2, e3, phi) {
        return e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi);
      };
      var e0fn = function(x) {
        return 1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x));
      };
      var e1fn = function(x) {
        return 0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x));
      };
      var e2fn = function(x) {
        return 0.05859375 * x * x * (1 + 0.75 * x);
      };
      var e3fn = function(x) {
        return x * x * x * (35 / 3072);
      };
      var gN = function(a, e, sinphi) {
        var temp = e * sinphi;
        return a / Math.sqrt(1 - temp * temp);
      };
      var adjust_lat = function(x) {
        return Math.abs(x) < HALF_PI ? x : x - sign(x) * Math.PI;
      };
      var imlfn = function(ml, e0, e1, e2, e3) {
        var phi;
        var dphi;
        phi = ml / e0;
        for (var i = 0; i < 15; i++) {
          dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));
          phi += dphi;
          if (Math.abs(dphi) <= 1e-10) {
            return phi;
          }
        }
        return NaN;
      };
      function init$12() {
        if (!this.sphere) {
          this.e0 = e0fn(this.es);
          this.e1 = e1fn(this.es);
          this.e2 = e2fn(this.es);
          this.e3 = e3fn(this.es);
          this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);
        }
      }
      function forward$11(p) {
        var x, y;
        var lam = p.x;
        var phi = p.y;
        lam = adjust_lon(lam - this.long0);
        if (this.sphere) {
          x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));
          y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);
        } else {
          var sinphi = Math.sin(phi);
          var cosphi = Math.cos(phi);
          var nl = gN(this.a, this.e, sinphi);
          var tl = Math.tan(phi) * Math.tan(phi);
          var al = lam * Math.cos(phi);
          var asq = al * al;
          var cl = this.es * cosphi * cosphi / (1 - this.es);
          var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);
          x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));
          y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);
        }
        p.x = x + this.x0;
        p.y = y + this.y0;
        return p;
      }
      function inverse$11(p) {
        p.x -= this.x0;
        p.y -= this.y0;
        var x = p.x / this.a;
        var y = p.y / this.a;
        var phi, lam;
        if (this.sphere) {
          var dd = y + this.lat0;
          phi = Math.asin(Math.sin(dd) * Math.cos(x));
          lam = Math.atan2(Math.tan(x), Math.cos(dd));
        } else {
          var ml1 = this.ml0 / this.a + y;
          var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);
          if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {
            p.x = this.long0;
            p.y = HALF_PI;
            if (y < 0) {
              p.y *= -1;
            }
            return p;
          }
          var nl1 = gN(this.a, this.e, Math.sin(phi1));
          var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);
          var tl1 = Math.pow(Math.tan(phi1), 2);
          var dl = x * this.a / nl1;
          var dsq = dl * dl;
          phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);
          lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);
        }
        p.x = adjust_lon(lam + this.long0);
        p.y = adjust_lat(phi);
        return p;
      }
      var names$13 = ["Cassini", "Cassini_Soldner", "cass"];
      var cass = {
        init: init$12,
        forward: forward$11,
        inverse: inverse$11,
        names: names$13
      };
      var qsfnz = function(eccent, sinphi) {
        var con;
        if (eccent > 1e-7) {
          con = eccent * sinphi;
          return (1 - eccent * eccent) * (sinphi / (1 - con * con) - 0.5 / eccent * Math.log((1 - con) / (1 + con)));
        } else {
          return 2 * sinphi;
        }
      };
      var S_POLE = 1;
      var N_POLE = 2;
      var EQUIT = 3;
      var OBLIQ = 4;
      function init$13() {
        var t = Math.abs(this.lat0);
        if (Math.abs(t - HALF_PI) < EPSLN) {
          this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;
        } else if (Math.abs(t) < EPSLN) {
          this.mode = this.EQUIT;
        } else {
          this.mode = this.OBLIQ;
        }
        if (this.es > 0) {
          var sinphi;
          this.qp = qsfnz(this.e, 1);
          this.mmf = 0.5 / (1 - this.es);
          this.apa = authset(this.es);
          switch (this.mode) {
            case this.N_POLE:
              this.dd = 1;
              break;
            case this.S_POLE:
              this.dd = 1;
              break;
            case this.EQUIT:
              this.rq = Math.sqrt(0.5 * this.qp);
              this.dd = 1 / this.rq;
              this.xmf = 1;
              this.ymf = 0.5 * this.qp;
              break;
            case this.OBLIQ:
              this.rq = Math.sqrt(0.5 * this.qp);
              sinphi = Math.sin(this.lat0);
              this.sinb1 = qsfnz(this.e, sinphi) / this.qp;
              this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);
              this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);
              this.ymf = (this.xmf = this.rq) / this.dd;
              this.xmf *= this.dd;
              break;
          }
        } else {
          if (this.mode === this.OBLIQ) {
            this.sinph0 = Math.sin(this.lat0);
            this.cosph0 = Math.cos(this.lat0);
          }
        }
      }
      function forward$12(p) {
        var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;
        var lam = p.x;
        var phi = p.y;
        lam = adjust_lon(lam - this.long0);
        if (this.sphere) {
          sinphi = Math.sin(phi);
          cosphi = Math.cos(phi);
          coslam = Math.cos(lam);
          if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
            y = this.mode === this.EQUIT ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;
            if (y <= EPSLN) {
              return null;
            }
            y = Math.sqrt(2 / y);
            x = y * cosphi * Math.sin(lam);
            y *= this.mode === this.EQUIT ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
          } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
            if (this.mode === this.N_POLE) {
              coslam = -coslam;
            }
            if (Math.abs(phi + this.lat0) < EPSLN) {
              return null;
            }
            y = FORTPI - phi * 0.5;
            y = 2 * (this.mode === this.S_POLE ? Math.cos(y) : Math.sin(y));
            x = y * Math.sin(lam);
            y *= coslam;
          }
        } else {
          sinb = 0;
          cosb = 0;
          b = 0;
          coslam = Math.cos(lam);
          sinlam = Math.sin(lam);
          sinphi = Math.sin(phi);
          q = qsfnz(this.e, sinphi);
          if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
            sinb = q / this.qp;
            cosb = Math.sqrt(1 - sinb * sinb);
          }
          switch (this.mode) {
            case this.OBLIQ:
              b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;
              break;
            case this.EQUIT:
              b = 1 + cosb * coslam;
              break;
            case this.N_POLE:
              b = HALF_PI + phi;
              q = this.qp - q;
              break;
            case this.S_POLE:
              b = phi - HALF_PI;
              q = this.qp + q;
              break;
          }
          if (Math.abs(b) < EPSLN) {
            return null;
          }
          switch (this.mode) {
            case this.OBLIQ:
            case this.EQUIT:
              b = Math.sqrt(2 / b);
              if (this.mode === this.OBLIQ) {
                y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);
              } else {
                y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;
              }
              x = this.xmf * b * cosb * sinlam;
              break;
            case this.N_POLE:
            case this.S_POLE:
              if (q >= 0) {
                x = (b = Math.sqrt(q)) * sinlam;
                y = coslam * (this.mode === this.S_POLE ? b : -b);
              } else {
                x = y = 0;
              }
              break;
          }
        }
        p.x = this.a * x + this.x0;
        p.y = this.a * y + this.y0;
        return p;
      }
      function inverse$12(p) {
        p.x -= this.x0;
        p.y -= this.y0;
        var x = p.x / this.a;
        var y = p.y / this.a;
        var lam, phi, cCe, sCe, q, rho, ab;
        if (this.sphere) {
          var cosz = 0, rh, sinz = 0;
          rh = Math.sqrt(x * x + y * y);
          phi = rh * 0.5;
          if (phi > 1) {
            return null;
          }
          phi = 2 * Math.asin(phi);
          if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
            sinz = Math.sin(phi);
            cosz = Math.cos(phi);
          }
          switch (this.mode) {
            case this.EQUIT:
              phi = Math.abs(rh) <= EPSLN ? 0 : Math.asin(y * sinz / rh);
              x *= sinz;
              y = cosz * rh;
              break;
            case this.OBLIQ:
              phi = Math.abs(rh) <= EPSLN ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);
              x *= sinz * this.cosph0;
              y = (cosz - Math.sin(phi) * this.sinph0) * rh;
              break;
            case this.N_POLE:
              y = -y;
              phi = HALF_PI - phi;
              break;
            case this.S_POLE:
              phi -= HALF_PI;
              break;
          }
          lam = y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ) ? 0 : Math.atan2(x, y);
        } else {
          ab = 0;
          if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
            x /= this.dd;
            y *= this.dd;
            rho = Math.sqrt(x * x + y * y);
            if (rho < EPSLN) {
              p.x = this.long0;
              p.y = this.lat0;
              return p;
            }
            sCe = 2 * Math.asin(0.5 * rho / this.rq);
            cCe = Math.cos(sCe);
            x *= sCe = Math.sin(sCe);
            if (this.mode === this.OBLIQ) {
              ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;
              q = this.qp * ab;
              y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;
            } else {
              ab = y * sCe / rho;
              q = this.qp * ab;
              y = rho * cCe;
            }
          } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
            if (this.mode === this.N_POLE) {
              y = -y;
            }
            q = x * x + y * y;
            if (!q) {
              p.x = this.long0;
              p.y = this.lat0;
              return p;
            }
            ab = 1 - q / this.qp;
            if (this.mode === this.S_POLE) {
              ab = -ab;
            }
          }
          lam = Math.atan2(x, y);
          phi = authlat(Math.asin(ab), this.apa);
        }
        p.x = adjust_lon(this.long0 + lam);
        p.y = phi;
        return p;
      }
      var P00 = 0.3333333333333333;
      var P01 = 0.17222222222222222;
      var P02 = 0.10257936507936508;
      var P10 = 0.06388888888888888;
      var P11 = 0.0664021164021164;
      var P20 = 0.016415012942191543;
      function authset(es) {
        var t;
        var APA = [];
        APA[0] = es * P00;
        t = es * es;
        APA[0] += t * P01;
        APA[1] = t * P10;
        t *= es;
        APA[0] += t * P02;
        APA[1] += t * P11;
        APA[2] = t * P20;
        return APA;
      }
      function authlat(beta, APA) {
        var t = beta + beta;
        return beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t);
      }
      var names$14 = ["Lambert Azimuthal Equal Area", "Lambert_Azimuthal_Equal_Area", "laea"];
      var laea = {
        init: init$13,
        forward: forward$12,
        inverse: inverse$12,
        names: names$14,
        S_POLE,
        N_POLE,
        EQUIT,
        OBLIQ
      };
      var asinz = function(x) {
        if (Math.abs(x) > 1) {
          x = x > 1 ? 1 : -1;
        }
        return Math.asin(x);
      };
      function init$14() {
        if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
          return;
        }
        this.temp = this.b / this.a;
        this.es = 1 - Math.pow(this.temp, 2);
        this.e3 = Math.sqrt(this.es);
        this.sin_po = Math.sin(this.lat1);
        this.cos_po = Math.cos(this.lat1);
        this.t1 = this.sin_po;
        this.con = this.sin_po;
        this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);
        this.qs1 = qsfnz(this.e3, this.sin_po);
        this.sin_po = Math.sin(this.lat2);
        this.cos_po = Math.cos(this.lat2);
        this.t2 = this.sin_po;
        this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);
        this.qs2 = qsfnz(this.e3, this.sin_po);
        this.sin_po = Math.sin(this.lat0);
        this.cos_po = Math.cos(this.lat0);
        this.t3 = this.sin_po;
        this.qs0 = qsfnz(this.e3, this.sin_po);
        if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
          this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);
        } else {
          this.ns0 = this.con;
        }
        this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;
        this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;
      }
      function forward$13(p) {
        var lon = p.x;
        var lat = p.y;
        this.sin_phi = Math.sin(lat);
        this.cos_phi = Math.cos(lat);
        var qs = qsfnz(this.e3, this.sin_phi);
        var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;
        var theta = this.ns0 * adjust_lon(lon - this.long0);
        var x = rh1 * Math.sin(theta) + this.x0;
        var y = this.rh - rh1 * Math.cos(theta) + this.y0;
        p.x = x;
        p.y = y;
        return p;
      }
      function inverse$13(p) {
        var rh1, qs, con, theta, lon, lat;
        p.x -= this.x0;
        p.y = this.rh - p.y + this.y0;
        if (this.ns0 >= 0) {
          rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
          con = 1;
        } else {
          rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
          con = -1;
        }
        theta = 0;
        if (rh1 !== 0) {
          theta = Math.atan2(con * p.x, con * p.y);
        }
        con = rh1 * this.ns0 / this.a;
        if (this.sphere) {
          lat = Math.asin((this.c - con * con) / (2 * this.ns0));
        } else {
          qs = (this.c - con * con) / this.ns0;
          lat = this.phi1z(this.e3, qs);
        }
        lon = adjust_lon(theta / this.ns0 + this.long0);
        p.x = lon;
        p.y = lat;
        return p;
      }
      function phi1z(eccent, qs) {
        var sinphi, cosphi, con, com, dphi;
        var phi = asinz(0.5 * qs);
        if (eccent < EPSLN) {
          return phi;
        }
        var eccnts = eccent * eccent;
        for (var i = 1; i <= 25; i++) {
          sinphi = Math.sin(phi);
          cosphi = Math.cos(phi);
          con = eccent * sinphi;
          com = 1 - con * con;
          dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
          phi = phi + dphi;
          if (Math.abs(dphi) <= 1e-7) {
            return phi;
          }
        }
        return null;
      }
      var names$15 = ["Albers_Conic_Equal_Area", "Albers", "aea"];
      var aea = {
        init: init$14,
        forward: forward$13,
        inverse: inverse$13,
        names: names$15,
        phi1z
      };
      function init$15() {
        this.sin_p14 = Math.sin(this.lat0);
        this.cos_p14 = Math.cos(this.lat0);
        this.infinity_dist = 1e3 * this.a;
        this.rc = 1;
      }
      function forward$14(p) {
        var sinphi, cosphi;
        var dlon;
        var coslon;
        var ksp;
        var g;
        var x, y;
        var lon = p.x;
        var lat = p.y;
        dlon = adjust_lon(lon - this.long0);
        sinphi = Math.sin(lat);
        cosphi = Math.cos(lat);
        coslon = Math.cos(dlon);
        g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
        ksp = 1;
        if (g > 0 || Math.abs(g) <= EPSLN) {
          x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;
          y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;
        } else {
          x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);
          y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
        }
        p.x = x;
        p.y = y;
        return p;
      }
      function inverse$14(p) {
        var rh;
        var sinc, cosc;
        var c;
        var lon, lat;
        p.x = (p.x - this.x0) / this.a;
        p.y = (p.y - this.y0) / this.a;
        p.x /= this.k0;
        p.y /= this.k0;
        if (rh = Math.sqrt(p.x * p.x + p.y * p.y)) {
          c = Math.atan2(rh, this.rc);
          sinc = Math.sin(c);
          cosc = Math.cos(c);
          lat = asinz(cosc * this.sin_p14 + p.y * sinc * this.cos_p14 / rh);
          lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);
          lon = adjust_lon(this.long0 + lon);
        } else {
          lat = this.phic0;
          lon = 0;
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$16 = ["gnom"];
      var gnom = {
        init: init$15,
        forward: forward$14,
        inverse: inverse$14,
        names: names$16
      };
      var iqsfnz = function(eccent, q) {
        var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));
        if (Math.abs(Math.abs(q) - temp) < 1e-6) {
          if (q < 0) {
            return -1 * HALF_PI;
          } else {
            return HALF_PI;
          }
        }
        var phi = Math.asin(0.5 * q);
        var dphi;
        var sin_phi;
        var cos_phi;
        var con;
        for (var i = 0; i < 30; i++) {
          sin_phi = Math.sin(phi);
          cos_phi = Math.cos(phi);
          con = eccent * sin_phi;
          dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
          phi += dphi;
          if (Math.abs(dphi) <= 1e-10) {
            return phi;
          }
        }
        return NaN;
      };
      function init$16() {
        if (!this.sphere) {
          this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
        }
      }
      function forward$15(p) {
        var lon = p.x;
        var lat = p.y;
        var x, y;
        var dlon = adjust_lon(lon - this.long0);
        if (this.sphere) {
          x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);
          y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);
        } else {
          var qs = qsfnz(this.e, Math.sin(lat));
          x = this.x0 + this.a * this.k0 * dlon;
          y = this.y0 + this.a * qs * 0.5 / this.k0;
        }
        p.x = x;
        p.y = y;
        return p;
      }
      function inverse$15(p) {
        p.x -= this.x0;
        p.y -= this.y0;
        var lon, lat;
        if (this.sphere) {
          lon = adjust_lon(this.long0 + p.x / this.a / Math.cos(this.lat_ts));
          lat = Math.asin(p.y / this.a * Math.cos(this.lat_ts));
        } else {
          lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);
          lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$17 = ["cea"];
      var cea = {
        init: init$16,
        forward: forward$15,
        inverse: inverse$15,
        names: names$17
      };
      function init$17() {
        this.x0 = this.x0 || 0;
        this.y0 = this.y0 || 0;
        this.lat0 = this.lat0 || 0;
        this.long0 = this.long0 || 0;
        this.lat_ts = this.lat_ts || 0;
        this.title = this.title || "Equidistant Cylindrical (Plate Carre)";
        this.rc = Math.cos(this.lat_ts);
      }
      function forward$16(p) {
        var lon = p.x;
        var lat = p.y;
        var dlon = adjust_lon(lon - this.long0);
        var dlat = adjust_lat(lat - this.lat0);
        p.x = this.x0 + this.a * dlon * this.rc;
        p.y = this.y0 + this.a * dlat;
        return p;
      }
      function inverse$16(p) {
        var x = p.x;
        var y = p.y;
        p.x = adjust_lon(this.long0 + (x - this.x0) / (this.a * this.rc));
        p.y = adjust_lat(this.lat0 + (y - this.y0) / this.a);
        return p;
      }
      var names$18 = ["Equirectangular", "Equidistant_Cylindrical", "eqc"];
      var eqc = {
        init: init$17,
        forward: forward$16,
        inverse: inverse$16,
        names: names$18
      };
      var MAX_ITER$2 = 20;
      function init$18() {
        this.temp = this.b / this.a;
        this.es = 1 - Math.pow(this.temp, 2);
        this.e = Math.sqrt(this.es);
        this.e0 = e0fn(this.es);
        this.e1 = e1fn(this.es);
        this.e2 = e2fn(this.es);
        this.e3 = e3fn(this.es);
        this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);
      }
      function forward$17(p) {
        var lon = p.x;
        var lat = p.y;
        var x, y, el;
        var dlon = adjust_lon(lon - this.long0);
        el = dlon * Math.sin(lat);
        if (this.sphere) {
          if (Math.abs(lat) <= EPSLN) {
            x = this.a * dlon;
            y = -1 * this.a * this.lat0;
          } else {
            x = this.a * Math.sin(el) / Math.tan(lat);
            y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));
          }
        } else {
          if (Math.abs(lat) <= EPSLN) {
            x = this.a * dlon;
            y = -1 * this.ml0;
          } else {
            var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);
            x = nl * Math.sin(el);
            y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));
          }
        }
        p.x = x + this.x0;
        p.y = y + this.y0;
        return p;
      }
      function inverse$17(p) {
        var lon, lat, x, y, i;
        var al, bl;
        var phi, dphi;
        x = p.x - this.x0;
        y = p.y - this.y0;
        if (this.sphere) {
          if (Math.abs(y + this.a * this.lat0) <= EPSLN) {
            lon = adjust_lon(x / this.a + this.long0);
            lat = 0;
          } else {
            al = this.lat0 + y / this.a;
            bl = x * x / this.a / this.a + al * al;
            phi = al;
            var tanphi;
            for (i = MAX_ITER$2; i; --i) {
              tanphi = Math.tan(phi);
              dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);
              phi += dphi;
              if (Math.abs(dphi) <= EPSLN) {
                lat = phi;
                break;
              }
            }
            lon = adjust_lon(this.long0 + Math.asin(x * Math.tan(phi) / this.a) / Math.sin(lat));
          }
        } else {
          if (Math.abs(y + this.ml0) <= EPSLN) {
            lat = 0;
            lon = adjust_lon(this.long0 + x / this.a);
          } else {
            al = (this.ml0 + y) / this.a;
            bl = x * x / this.a / this.a + al * al;
            phi = al;
            var cl, mln, mlnp, ma;
            var con;
            for (i = MAX_ITER$2; i; --i) {
              con = this.e * Math.sin(phi);
              cl = Math.sqrt(1 - con * con) * Math.tan(phi);
              mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);
              mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);
              ma = mln / this.a;
              dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);
              phi -= dphi;
              if (Math.abs(dphi) <= EPSLN) {
                lat = phi;
                break;
              }
            }
            cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);
            lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));
          }
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$19 = ["Polyconic", "poly"];
      var poly = {
        init: init$18,
        forward: forward$17,
        inverse: inverse$17,
        names: names$19
      };
      function init$19() {
        this.A = [];
        this.A[1] = 0.6399175073;
        this.A[2] = -0.1358797613;
        this.A[3] = 0.063294409;
        this.A[4] = -0.02526853;
        this.A[5] = 0.0117879;
        this.A[6] = -55161e-7;
        this.A[7] = 26906e-7;
        this.A[8] = -1333e-6;
        this.A[9] = 67e-5;
        this.A[10] = -34e-5;
        this.B_re = [];
        this.B_im = [];
        this.B_re[1] = 0.7557853228;
        this.B_im[1] = 0;
        this.B_re[2] = 0.249204646;
        this.B_im[2] = 3371507e-9;
        this.B_re[3] = -1541739e-9;
        this.B_im[3] = 0.04105856;
        this.B_re[4] = -0.10162907;
        this.B_im[4] = 0.01727609;
        this.B_re[5] = -0.26623489;
        this.B_im[5] = -0.36249218;
        this.B_re[6] = -0.6870983;
        this.B_im[6] = -1.1651967;
        this.C_re = [];
        this.C_im = [];
        this.C_re[1] = 1.3231270439;
        this.C_im[1] = 0;
        this.C_re[2] = -0.577245789;
        this.C_im[2] = -7809598e-9;
        this.C_re[3] = 0.508307513;
        this.C_im[3] = -0.112208952;
        this.C_re[4] = -0.15094762;
        this.C_im[4] = 0.18200602;
        this.C_re[5] = 1.01418179;
        this.C_im[5] = 1.64497696;
        this.C_re[6] = 1.9660549;
        this.C_im[6] = 2.5127645;
        this.D = [];
        this.D[1] = 1.5627014243;
        this.D[2] = 0.5185406398;
        this.D[3] = -0.03333098;
        this.D[4] = -0.1052906;
        this.D[5] = -0.0368594;
        this.D[6] = 7317e-6;
        this.D[7] = 0.0122;
        this.D[8] = 394e-5;
        this.D[9] = -13e-4;
      }
      function forward$18(p) {
        var n;
        var lon = p.x;
        var lat = p.y;
        var delta_lat = lat - this.lat0;
        var delta_lon = lon - this.long0;
        var d_phi = delta_lat / SEC_TO_RAD * 1e-5;
        var d_lambda = delta_lon;
        var d_phi_n = 1;
        var d_psi = 0;
        for (n = 1; n <= 10; n++) {
          d_phi_n = d_phi_n * d_phi;
          d_psi = d_psi + this.A[n] * d_phi_n;
        }
        var th_re = d_psi;
        var th_im = d_lambda;
        var th_n_re = 1;
        var th_n_im = 0;
        var th_n_re1;
        var th_n_im1;
        var z_re = 0;
        var z_im = 0;
        for (n = 1; n <= 6; n++) {
          th_n_re1 = th_n_re * th_re - th_n_im * th_im;
          th_n_im1 = th_n_im * th_re + th_n_re * th_im;
          th_n_re = th_n_re1;
          th_n_im = th_n_im1;
          z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;
          z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;
        }
        p.x = z_im * this.a + this.x0;
        p.y = z_re * this.a + this.y0;
        return p;
      }
      function inverse$18(p) {
        var n;
        var x = p.x;
        var y = p.y;
        var delta_x = x - this.x0;
        var delta_y = y - this.y0;
        var z_re = delta_y / this.a;
        var z_im = delta_x / this.a;
        var z_n_re = 1;
        var z_n_im = 0;
        var z_n_re1;
        var z_n_im1;
        var th_re = 0;
        var th_im = 0;
        for (n = 1; n <= 6; n++) {
          z_n_re1 = z_n_re * z_re - z_n_im * z_im;
          z_n_im1 = z_n_im * z_re + z_n_re * z_im;
          z_n_re = z_n_re1;
          z_n_im = z_n_im1;
          th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;
          th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;
        }
        for (var i = 0; i < this.iterations; i++) {
          var th_n_re = th_re;
          var th_n_im = th_im;
          var th_n_re1;
          var th_n_im1;
          var num_re = z_re;
          var num_im = z_im;
          for (n = 2; n <= 6; n++) {
            th_n_re1 = th_n_re * th_re - th_n_im * th_im;
            th_n_im1 = th_n_im * th_re + th_n_re * th_im;
            th_n_re = th_n_re1;
            th_n_im = th_n_im1;
            num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
            num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
          }
          th_n_re = 1;
          th_n_im = 0;
          var den_re = this.B_re[1];
          var den_im = this.B_im[1];
          for (n = 2; n <= 6; n++) {
            th_n_re1 = th_n_re * th_re - th_n_im * th_im;
            th_n_im1 = th_n_im * th_re + th_n_re * th_im;
            th_n_re = th_n_re1;
            th_n_im = th_n_im1;
            den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
            den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
          }
          var den2 = den_re * den_re + den_im * den_im;
          th_re = (num_re * den_re + num_im * den_im) / den2;
          th_im = (num_im * den_re - num_re * den_im) / den2;
        }
        var d_psi = th_re;
        var d_lambda = th_im;
        var d_psi_n = 1;
        var d_phi = 0;
        for (n = 1; n <= 9; n++) {
          d_psi_n = d_psi_n * d_psi;
          d_phi = d_phi + this.D[n] * d_psi_n;
        }
        var lat = this.lat0 + d_phi * SEC_TO_RAD * 1e5;
        var lon = this.long0 + d_lambda;
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$20 = ["New_Zealand_Map_Grid", "nzmg"];
      var nzmg = {
        init: init$19,
        forward: forward$18,
        inverse: inverse$18,
        names: names$20
      };
      function init$20() {
      }
      function forward$19(p) {
        var lon = p.x;
        var lat = p.y;
        var dlon = adjust_lon(lon - this.long0);
        var x = this.x0 + this.a * dlon;
        var y = this.y0 + this.a * Math.log(Math.tan(Math.PI / 4 + lat / 2.5)) * 1.25;
        p.x = x;
        p.y = y;
        return p;
      }
      function inverse$19(p) {
        p.x -= this.x0;
        p.y -= this.y0;
        var lon = adjust_lon(this.long0 + p.x / this.a);
        var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$21 = ["Miller_Cylindrical", "mill"];
      var mill = {
        init: init$20,
        forward: forward$19,
        inverse: inverse$19,
        names: names$21
      };
      var MAX_ITER$3 = 20;
      function init$21() {
        if (!this.sphere) {
          this.en = pj_enfn(this.es);
        } else {
          this.n = 1;
          this.m = 0;
          this.es = 0;
          this.C_y = Math.sqrt((this.m + 1) / this.n);
          this.C_x = this.C_y / (this.m + 1);
        }
      }
      function forward$20(p) {
        var x, y;
        var lon = p.x;
        var lat = p.y;
        lon = adjust_lon(lon - this.long0);
        if (this.sphere) {
          if (!this.m) {
            lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;
          } else {
            var k = this.n * Math.sin(lat);
            for (var i = MAX_ITER$3; i; --i) {
              var V2 = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));
              lat -= V2;
              if (Math.abs(V2) < EPSLN) {
                break;
              }
            }
          }
          x = this.a * this.C_x * lon * (this.m + Math.cos(lat));
          y = this.a * this.C_y * lat;
        } else {
          var s = Math.sin(lat);
          var c = Math.cos(lat);
          y = this.a * pj_mlfn(lat, s, c, this.en);
          x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);
        }
        p.x = x;
        p.y = y;
        return p;
      }
      function inverse$20(p) {
        var lat, temp, lon, s;
        p.x -= this.x0;
        lon = p.x / this.a;
        p.y -= this.y0;
        lat = p.y / this.a;
        if (this.sphere) {
          lat /= this.C_y;
          lon = lon / (this.C_x * (this.m + Math.cos(lat)));
          if (this.m) {
            lat = asinz((this.m * lat + Math.sin(lat)) / this.n);
          } else if (this.n !== 1) {
            lat = asinz(Math.sin(lat) / this.n);
          }
          lon = adjust_lon(lon + this.long0);
          lat = adjust_lat(lat);
        } else {
          lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);
          s = Math.abs(lat);
          if (s < HALF_PI) {
            s = Math.sin(lat);
            temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));
            lon = adjust_lon(temp);
          } else if (s - EPSLN < HALF_PI) {
            lon = this.long0;
          }
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$22 = ["Sinusoidal", "sinu"];
      var sinu = {
        init: init$21,
        forward: forward$20,
        inverse: inverse$20,
        names: names$22
      };
      function init$22() {
      }
      function forward$21(p) {
        var lon = p.x;
        var lat = p.y;
        var delta_lon = adjust_lon(lon - this.long0);
        var theta = lat;
        var con = Math.PI * Math.sin(lat);
        while (true) {
          var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));
          theta += delta_theta;
          if (Math.abs(delta_theta) < EPSLN) {
            break;
          }
        }
        theta /= 2;
        if (Math.PI / 2 - Math.abs(lat) < EPSLN) {
          delta_lon = 0;
        }
        var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;
        var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;
        p.x = x;
        p.y = y;
        return p;
      }
      function inverse$21(p) {
        var theta;
        var arg;
        p.x -= this.x0;
        p.y -= this.y0;
        arg = p.y / (1.4142135623731 * this.a);
        if (Math.abs(arg) > 0.999999999999) {
          arg = 0.999999999999;
        }
        theta = Math.asin(arg);
        var lon = adjust_lon(this.long0 + p.x / (0.900316316158 * this.a * Math.cos(theta)));
        if (lon < -Math.PI) {
          lon = -Math.PI;
        }
        if (lon > Math.PI) {
          lon = Math.PI;
        }
        arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;
        if (Math.abs(arg) > 1) {
          arg = 1;
        }
        var lat = Math.asin(arg);
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$23 = ["Mollweide", "moll"];
      var moll = {
        init: init$22,
        forward: forward$21,
        inverse: inverse$21,
        names: names$23
      };
      function init$23() {
        if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
          return;
        }
        this.lat2 = this.lat2 || this.lat1;
        this.temp = this.b / this.a;
        this.es = 1 - Math.pow(this.temp, 2);
        this.e = Math.sqrt(this.es);
        this.e0 = e0fn(this.es);
        this.e1 = e1fn(this.es);
        this.e2 = e2fn(this.es);
        this.e3 = e3fn(this.es);
        this.sinphi = Math.sin(this.lat1);
        this.cosphi = Math.cos(this.lat1);
        this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);
        this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);
        if (Math.abs(this.lat1 - this.lat2) < EPSLN) {
          this.ns = this.sinphi;
        } else {
          this.sinphi = Math.sin(this.lat2);
          this.cosphi = Math.cos(this.lat2);
          this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);
          this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);
          this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);
        }
        this.g = this.ml1 + this.ms1 / this.ns;
        this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);
        this.rh = this.a * (this.g - this.ml0);
      }
      function forward$22(p) {
        var lon = p.x;
        var lat = p.y;
        var rh1;
        if (this.sphere) {
          rh1 = this.a * (this.g - lat);
        } else {
          var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);
          rh1 = this.a * (this.g - ml);
        }
        var theta = this.ns * adjust_lon(lon - this.long0);
        var x = this.x0 + rh1 * Math.sin(theta);
        var y = this.y0 + this.rh - rh1 * Math.cos(theta);
        p.x = x;
        p.y = y;
        return p;
      }
      function inverse$22(p) {
        p.x -= this.x0;
        p.y = this.rh - p.y + this.y0;
        var con, rh1, lat, lon;
        if (this.ns >= 0) {
          rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
          con = 1;
        } else {
          rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
          con = -1;
        }
        var theta = 0;
        if (rh1 !== 0) {
          theta = Math.atan2(con * p.x, con * p.y);
        }
        if (this.sphere) {
          lon = adjust_lon(this.long0 + theta / this.ns);
          lat = adjust_lat(this.g - rh1 / this.a);
          p.x = lon;
          p.y = lat;
          return p;
        } else {
          var ml = this.g - rh1 / this.a;
          lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);
          lon = adjust_lon(this.long0 + theta / this.ns);
          p.x = lon;
          p.y = lat;
          return p;
        }
      }
      var names$24 = ["Equidistant_Conic", "eqdc"];
      var eqdc = {
        init: init$23,
        forward: forward$22,
        inverse: inverse$22,
        names: names$24
      };
      function init$24() {
        this.R = this.a;
      }
      function forward$23(p) {
        var lon = p.x;
        var lat = p.y;
        var dlon = adjust_lon(lon - this.long0);
        var x, y;
        if (Math.abs(lat) <= EPSLN) {
          x = this.x0 + this.R * dlon;
          y = this.y0;
        }
        var theta = asinz(2 * Math.abs(lat / Math.PI));
        if (Math.abs(dlon) <= EPSLN || Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {
          x = this.x0;
          if (lat >= 0) {
            y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);
          } else {
            y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);
          }
        }
        var al = 0.5 * Math.abs(Math.PI / dlon - dlon / Math.PI);
        var asq = al * al;
        var sinth = Math.sin(theta);
        var costh = Math.cos(theta);
        var g = costh / (sinth + costh - 1);
        var gsq = g * g;
        var m = g * (2 / sinth - 1);
        var msq = m * m;
        var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);
        if (dlon < 0) {
          con = -con;
        }
        x = this.x0 + con;
        var q = asq + g;
        con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);
        if (lat >= 0) {
          y = this.y0 + con;
        } else {
          y = this.y0 - con;
        }
        p.x = x;
        p.y = y;
        return p;
      }
      function inverse$23(p) {
        var lon, lat;
        var xx, yy, xys, c1, c2, c3;
        var a1;
        var m1;
        var con;
        var th1;
        var d;
        p.x -= this.x0;
        p.y -= this.y0;
        con = Math.PI * this.R;
        xx = p.x / con;
        yy = p.y / con;
        xys = xx * xx + yy * yy;
        c1 = -Math.abs(yy) * (1 + xys);
        c2 = c1 - 2 * yy * yy + xx * xx;
        c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;
        d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;
        a1 = (c1 - c2 * c2 / 3 / c3) / c3;
        m1 = 2 * Math.sqrt(-a1 / 3);
        con = 3 * d / a1 / m1;
        if (Math.abs(con) > 1) {
          if (con >= 0) {
            con = 1;
          } else {
            con = -1;
          }
        }
        th1 = Math.acos(con) / 3;
        if (p.y >= 0) {
          lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
        } else {
          lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
        }
        if (Math.abs(xx) < EPSLN) {
          lon = this.long0;
        } else {
          lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$25 = ["Van_der_Grinten_I", "VanDerGrinten", "vandg"];
      var vandg = {
        init: init$24,
        forward: forward$23,
        inverse: inverse$23,
        names: names$25
      };
      function init$25() {
        this.sin_p12 = Math.sin(this.lat0);
        this.cos_p12 = Math.cos(this.lat0);
      }
      function forward$24(p) {
        var lon = p.x;
        var lat = p.y;
        var sinphi = Math.sin(p.y);
        var cosphi = Math.cos(p.y);
        var dlon = adjust_lon(lon - this.long0);
        var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;
        if (this.sphere) {
          if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
            p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);
            p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);
            return p;
          } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
            p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);
            p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);
            return p;
          } else {
            cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);
            c = Math.acos(cos_c);
            kp = c ? c / Math.sin(c) : 1;
            p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);
            p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));
            return p;
          }
        } else {
          e0 = e0fn(this.es);
          e1 = e1fn(this.es);
          e2 = e2fn(this.es);
          e3 = e3fn(this.es);
          if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
            Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
            Ml = this.a * mlfn(e0, e1, e2, e3, lat);
            p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);
            p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);
            return p;
          } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
            Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
            Ml = this.a * mlfn(e0, e1, e2, e3, lat);
            p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);
            p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);
            return p;
          } else {
            tanphi = sinphi / cosphi;
            Nl1 = gN(this.a, this.e, this.sin_p12);
            Nl = gN(this.a, this.e, sinphi);
            psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));
            Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));
            if (Az === 0) {
              s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
            } else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {
              s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
            } else {
              s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));
            }
            G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);
            H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);
            GH = G * H;
            Hs = H * H;
            s2 = s * s;
            s3 = s2 * s;
            s4 = s3 * s;
            s5 = s4 * s;
            c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);
            p.x = this.x0 + c * Math.sin(Az);
            p.y = this.y0 + c * Math.cos(Az);
            return p;
          }
        }
      }
      function inverse$24(p) {
        p.x -= this.x0;
        p.y -= this.y0;
        var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A2, B, D, Ee, F, sinpsi;
        if (this.sphere) {
          rh = Math.sqrt(p.x * p.x + p.y * p.y);
          if (rh > 2 * HALF_PI * this.a) {
            return;
          }
          z = rh / this.a;
          sinz = Math.sin(z);
          cosz = Math.cos(z);
          lon = this.long0;
          if (Math.abs(rh) <= EPSLN) {
            lat = this.lat0;
          } else {
            lat = asinz(cosz * this.sin_p12 + p.y * sinz * this.cos_p12 / rh);
            con = Math.abs(this.lat0) - HALF_PI;
            if (Math.abs(con) <= EPSLN) {
              if (this.lat0 >= 0) {
                lon = adjust_lon(this.long0 + Math.atan2(p.x, -p.y));
              } else {
                lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));
              }
            } else {
              lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));
            }
          }
          p.x = lon;
          p.y = lat;
          return p;
        } else {
          e0 = e0fn(this.es);
          e1 = e1fn(this.es);
          e2 = e2fn(this.es);
          e3 = e3fn(this.es);
          if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
            Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
            rh = Math.sqrt(p.x * p.x + p.y * p.y);
            M = Mlp - rh;
            lat = imlfn(M / this.a, e0, e1, e2, e3);
            lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));
            p.x = lon;
            p.y = lat;
            return p;
          } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
            Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
            rh = Math.sqrt(p.x * p.x + p.y * p.y);
            M = rh - Mlp;
            lat = imlfn(M / this.a, e0, e1, e2, e3);
            lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));
            p.x = lon;
            p.y = lat;
            return p;
          } else {
            rh = Math.sqrt(p.x * p.x + p.y * p.y);
            Az = Math.atan2(p.x, p.y);
            N1 = gN(this.a, this.e, this.sin_p12);
            cosAz = Math.cos(Az);
            tmp = this.e * this.cos_p12 * cosAz;
            A2 = -tmp * tmp / (1 - this.es);
            B = 3 * this.es * (1 - A2) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);
            D = rh / N1;
            Ee = D - A2 * (1 + A2) * Math.pow(D, 3) / 6 - B * (1 + 3 * A2) * Math.pow(D, 4) / 24;
            F = 1 - A2 * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;
            psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);
            lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));
            sinpsi = Math.sin(psi);
            lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));
            p.x = lon;
            p.y = lat;
            return p;
          }
        }
      }
      var names$26 = ["Azimuthal_Equidistant", "aeqd"];
      var aeqd = {
        init: init$25,
        forward: forward$24,
        inverse: inverse$24,
        names: names$26
      };
      function init$26() {
        this.sin_p14 = Math.sin(this.lat0);
        this.cos_p14 = Math.cos(this.lat0);
      }
      function forward$25(p) {
        var sinphi, cosphi;
        var dlon;
        var coslon;
        var ksp;
        var g, x, y;
        var lon = p.x;
        var lat = p.y;
        dlon = adjust_lon(lon - this.long0);
        sinphi = Math.sin(lat);
        cosphi = Math.cos(lat);
        coslon = Math.cos(dlon);
        g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
        ksp = 1;
        if (g > 0 || Math.abs(g) <= EPSLN) {
          x = this.a * ksp * cosphi * Math.sin(dlon);
          y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
        }
        p.x = x;
        p.y = y;
        return p;
      }
      function inverse$25(p) {
        var rh;
        var z;
        var sinz, cosz;
        var con;
        var lon, lat;
        p.x -= this.x0;
        p.y -= this.y0;
        rh = Math.sqrt(p.x * p.x + p.y * p.y);
        z = asinz(rh / this.a);
        sinz = Math.sin(z);
        cosz = Math.cos(z);
        lon = this.long0;
        if (Math.abs(rh) <= EPSLN) {
          lat = this.lat0;
          p.x = lon;
          p.y = lat;
          return p;
        }
        lat = asinz(cosz * this.sin_p14 + p.y * sinz * this.cos_p14 / rh);
        con = Math.abs(this.lat0) - HALF_PI;
        if (Math.abs(con) <= EPSLN) {
          if (this.lat0 >= 0) {
            lon = adjust_lon(this.long0 + Math.atan2(p.x, -p.y));
          } else {
            lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));
          }
          p.x = lon;
          p.y = lat;
          return p;
        }
        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));
        p.x = lon;
        p.y = lat;
        return p;
      }
      var names$27 = ["ortho"];
      var ortho = {
        init: init$26,
        forward: forward$25,
        inverse: inverse$25,
        names: names$27
      };
      var FACE_ENUM = {
        FRONT: 1,
        RIGHT: 2,
        BACK: 3,
        LEFT: 4,
        TOP: 5,
        BOTTOM: 6
      };
      var AREA_ENUM = {
        AREA_0: 1,
        AREA_1: 2,
        AREA_2: 3,
        AREA_3: 4
      };
      function init$27() {
        this.x0 = this.x0 || 0;
        this.y0 = this.y0 || 0;
        this.lat0 = this.lat0 || 0;
        this.long0 = this.long0 || 0;
        this.lat_ts = this.lat_ts || 0;
        this.title = this.title || "Quadrilateralized Spherical Cube";
        if (this.lat0 >= HALF_PI - FORTPI / 2) {
          this.face = FACE_ENUM.TOP;
        } else if (this.lat0 <= -(HALF_PI - FORTPI / 2)) {
          this.face = FACE_ENUM.BOTTOM;
        } else if (Math.abs(this.long0) <= FORTPI) {
          this.face = FACE_ENUM.FRONT;
        } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {
          this.face = this.long0 > 0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;
        } else {
          this.face = FACE_ENUM.BACK;
        }
        if (this.es !== 0) {
          this.one_minus_f = 1 - (this.a - this.b) / this.a;
          this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;
        }
      }
      function forward$26(p) {
        var xy = { x: 0, y: 0 };
        var lat, lon;
        var theta, phi;
        var t, mu;
        var area = { value: 0 };
        p.x -= this.long0;
        if (this.es !== 0) {
          lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));
        } else {
          lat = p.y;
        }
        lon = p.x;
        if (this.face === FACE_ENUM.TOP) {
          phi = HALF_PI - lat;
          if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
            area.value = AREA_ENUM.AREA_0;
            theta = lon - HALF_PI;
          } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {
            area.value = AREA_ENUM.AREA_1;
            theta = lon > 0 ? lon - SPI : lon + SPI;
          } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {
            area.value = AREA_ENUM.AREA_2;
            theta = lon + HALF_PI;
          } else {
            area.value = AREA_ENUM.AREA_3;
            theta = lon;
          }
        } else if (this.face === FACE_ENUM.BOTTOM) {
          phi = HALF_PI + lat;
          if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
            area.value = AREA_ENUM.AREA_0;
            theta = -lon + HALF_PI;
          } else if (lon < FORTPI && lon >= -FORTPI) {
            area.value = AREA_ENUM.AREA_1;
            theta = -lon;
          } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {
            area.value = AREA_ENUM.AREA_2;
            theta = -lon - HALF_PI;
          } else {
            area.value = AREA_ENUM.AREA_3;
            theta = lon > 0 ? -lon + SPI : -lon - SPI;
          }
        } else {
          var q, r, s;
          var sinlat, coslat;
          var sinlon, coslon;
          if (this.face === FACE_ENUM.RIGHT) {
            lon = qsc_shift_lon_origin(lon, +HALF_PI);
          } else if (this.face === FACE_ENUM.BACK) {
            lon = qsc_shift_lon_origin(lon, +SPI);
          } else if (this.face === FACE_ENUM.LEFT) {
            lon = qsc_shift_lon_origin(lon, -HALF_PI);
          }
          sinlat = Math.sin(lat);
          coslat = Math.cos(lat);
          sinlon = Math.sin(lon);
          coslon = Math.cos(lon);
          q = coslat * coslon;
          r = coslat * sinlon;
          s = sinlat;
          if (this.face === FACE_ENUM.FRONT) {
            phi = Math.acos(q);
            theta = qsc_fwd_equat_face_theta(phi, s, r, area);
          } else if (this.face === FACE_ENUM.RIGHT) {
            phi = Math.acos(r);
            theta = qsc_fwd_equat_face_theta(phi, s, -q, area);
          } else if (this.face === FACE_ENUM.BACK) {
            phi = Math.acos(-q);
            theta = qsc_fwd_equat_face_theta(phi, s, -r, area);
          } else if (this.face === FACE_ENUM.LEFT) {
            phi = Math.acos(-r);
            theta = qsc_fwd_equat_face_theta(phi, s, q, area);
          } else {
            phi = theta = 0;
            area.value = AREA_ENUM.AREA_0;
          }
        }
        mu = Math.atan(12 / SPI * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));
        t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));
        if (area.value === AREA_ENUM.AREA_1) {
          mu += HALF_PI;
        } else if (area.value === AREA_ENUM.AREA_2) {
          mu += SPI;
        } else if (area.value === AREA_ENUM.AREA_3) {
          mu += 1.5 * SPI;
        }
        xy.x = t * Math.cos(mu);
        xy.y = t * Math.sin(mu);
        xy.x = xy.x * this.a + this.x0;
        xy.y = xy.y * this.a + this.y0;
        p.x = xy.x;
        p.y = xy.y;
        return p;
      }
      function inverse$26(p) {
        var lp = { lam: 0, phi: 0 };
        var mu, nu, cosmu, tannu;
        var tantheta, theta, cosphi, phi;
        var t;
        var area = { value: 0 };
        p.x = (p.x - this.x0) / this.a;
        p.y = (p.y - this.y0) / this.a;
        nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));
        mu = Math.atan2(p.y, p.x);
        if (p.x >= 0 && p.x >= Math.abs(p.y)) {
          area.value = AREA_ENUM.AREA_0;
        } else if (p.y >= 0 && p.y >= Math.abs(p.x)) {
          area.value = AREA_ENUM.AREA_1;
          mu -= HALF_PI;
        } else if (p.x < 0 && -p.x >= Math.abs(p.y)) {
          area.value = AREA_ENUM.AREA_2;
          mu = mu < 0 ? mu + SPI : mu - SPI;
        } else {
          area.value = AREA_ENUM.AREA_3;
          mu += HALF_PI;
        }
        t = SPI / 12 * Math.tan(mu);
        tantheta = Math.sin(t) / (Math.cos(t) - 1 / Math.sqrt(2));
        theta = Math.atan(tantheta);
        cosmu = Math.cos(mu);
        tannu = Math.tan(nu);
        cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));
        if (cosphi < -1) {
          cosphi = -1;
        } else if (cosphi > 1) {
          cosphi = 1;
        }
        if (this.face === FACE_ENUM.TOP) {
          phi = Math.acos(cosphi);
          lp.phi = HALF_PI - phi;
          if (area.value === AREA_ENUM.AREA_0) {
            lp.lam = theta + HALF_PI;
          } else if (area.value === AREA_ENUM.AREA_1) {
            lp.lam = theta < 0 ? theta + SPI : theta - SPI;
          } else if (area.value === AREA_ENUM.AREA_2) {
            lp.lam = theta - HALF_PI;
          } else {
            lp.lam = theta;
          }
        } else if (this.face === FACE_ENUM.BOTTOM) {
          phi = Math.acos(cosphi);
          lp.phi = phi - HALF_PI;
          if (area.value === AREA_ENUM.AREA_0) {
            lp.lam = -theta + HALF_PI;
          } else if (area.value === AREA_ENUM.AREA_1) {
            lp.lam = -theta;
          } else if (area.value === AREA_ENUM.AREA_2) {
            lp.lam = -theta - HALF_PI;
          } else {
            lp.lam = theta < 0 ? -theta - SPI : -theta + SPI;
          }
        } else {
          var q, r, s;
          q = cosphi;
          t = q * q;
          if (t >= 1) {
            s = 0;
          } else {
            s = Math.sqrt(1 - t) * Math.sin(theta);
          }
          t += s * s;
          if (t >= 1) {
            r = 0;
          } else {
            r = Math.sqrt(1 - t);
          }
          if (area.value === AREA_ENUM.AREA_1) {
            t = r;
            r = -s;
            s = t;
          } else if (area.value === AREA_ENUM.AREA_2) {
            r = -r;
            s = -s;
          } else if (area.value === AREA_ENUM.AREA_3) {
            t = r;
            r = s;
            s = -t;
          }
          if (this.face === FACE_ENUM.RIGHT) {
            t = q;
            q = -r;
            r = t;
          } else if (this.face === FACE_ENUM.BACK) {
            q = -q;
            r = -r;
          } else if (this.face === FACE_ENUM.LEFT) {
            t = q;
            q = r;
            r = -t;
          }
          lp.phi = Math.acos(-s) - HALF_PI;
          lp.lam = Math.atan2(r, q);
          if (this.face === FACE_ENUM.RIGHT) {
            lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);
          } else if (this.face === FACE_ENUM.BACK) {
            lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);
          } else if (this.face === FACE_ENUM.LEFT) {
            lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);
          }
        }
        if (this.es !== 0) {
          var invert_sign;
          var tanphi, xa;
          invert_sign = lp.phi < 0 ? 1 : 0;
          tanphi = Math.tan(lp.phi);
          xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);
          lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));
          if (invert_sign) {
            lp.phi = -lp.phi;
          }
        }
        lp.lam += this.long0;
        p.x = lp.lam;
        p.y = lp.phi;
        return p;
      }
      function qsc_fwd_equat_face_theta(phi, y, x, area) {
        var theta;
        if (phi < EPSLN) {
          area.value = AREA_ENUM.AREA_0;
          theta = 0;
        } else {
          theta = Math.atan2(y, x);
          if (Math.abs(theta) <= FORTPI) {
            area.value = AREA_ENUM.AREA_0;
          } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {
            area.value = AREA_ENUM.AREA_1;
            theta -= HALF_PI;
          } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {
            area.value = AREA_ENUM.AREA_2;
            theta = theta >= 0 ? theta - SPI : theta + SPI;
          } else {
            area.value = AREA_ENUM.AREA_3;
            theta += HALF_PI;
          }
        }
        return theta;
      }
      function qsc_shift_lon_origin(lon, offset) {
        var slon = lon + offset;
        if (slon < -SPI) {
          slon += TWO_PI;
        } else if (slon > +SPI) {
          slon -= TWO_PI;
        }
        return slon;
      }
      var names$28 = ["Quadrilateralized Spherical Cube", "Quadrilateralized_Spherical_Cube", "qsc"];
      var qsc = {
        init: init$27,
        forward: forward$26,
        inverse: inverse$26,
        names: names$28
      };
      var COEFS_X = [
        [1, 22199e-21, -715515e-10, 31103e-10],
        [0.9986, -482243e-9, -24897e-9, -13309e-10],
        [0.9954, -83103e-8, -448605e-10, -986701e-12],
        [0.99, -135364e-8, -59661e-9, 36777e-10],
        [0.9822, -167442e-8, -449547e-11, -572411e-11],
        [0.973, -214868e-8, -903571e-10, 18736e-12],
        [0.96, -305085e-8, -900761e-10, 164917e-11],
        [0.9427, -382792e-8, -653386e-10, -26154e-10],
        [0.9216, -467746e-8, -10457e-8, 481243e-11],
        [0.8962, -536223e-8, -323831e-10, -543432e-11],
        [0.8679, -609363e-8, -113898e-9, 332484e-11],
        [0.835, -698325e-8, -640253e-10, 934959e-12],
        [0.7986, -755338e-8, -500009e-10, 935324e-12],
        [0.7597, -798324e-8, -35971e-9, -227626e-11],
        [0.7186, -851367e-8, -701149e-10, -86303e-10],
        [0.6732, -986209e-8, -199569e-9, 191974e-10],
        [0.6213, -0.010418, 883923e-10, 624051e-11],
        [0.5722, -906601e-8, 182e-6, 624051e-11],
        [0.5322, -677797e-8, 275608e-9, 624051e-11]
      ];
      var COEFS_Y = [
        [-520417e-23, 0.0124, 121431e-23, -845284e-16],
        [0.062, 0.0124, -126793e-14, 422642e-15],
        [0.124, 0.0124, 507171e-14, -160604e-14],
        [0.186, 0.0123999, -190189e-13, 600152e-14],
        [0.248, 0.0124002, 710039e-13, -224e-10],
        [0.31, 0.0123992, -264997e-12, 835986e-13],
        [0.372, 0.0124029, 988983e-12, -311994e-12],
        [0.434, 0.0123893, -369093e-11, -435621e-12],
        [0.4958, 0.0123198, -102252e-10, -345523e-12],
        [0.5571, 0.0121916, -154081e-10, -582288e-12],
        [0.6176, 0.0119938, -241424e-10, -525327e-12],
        [0.6769, 0.011713, -320223e-10, -516405e-12],
        [0.7346, 0.0113541, -397684e-10, -609052e-12],
        [0.7903, 0.0109107, -489042e-10, -104739e-11],
        [0.8435, 0.0103431, -64615e-9, -140374e-14],
        [0.8936, 969686e-8, -64636e-9, -8547e-9],
        [0.9394, 840947e-8, -192841e-9, -42106e-10],
        [0.9761, 616527e-8, -256e-6, -42106e-10],
        [1, 328947e-8, -319159e-9, -42106e-10]
      ];
      var FXC = 0.8487;
      var FYC = 1.3523;
      var C1 = R2D / 5;
      var RC1 = 1 / C1;
      var NODES = 18;
      var poly3_val = function(coefs, x) {
        return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));
      };
      var poly3_der = function(coefs, x) {
        return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);
      };
      function newton_rapshon(f_df, start2, max_err, iters) {
        var x = start2;
        for (; iters; --iters) {
          var upd = f_df(x);
          x -= upd;
          if (Math.abs(upd) < max_err) {
            break;
          }
        }
        return x;
      }
      function init$28() {
        this.x0 = this.x0 || 0;
        this.y0 = this.y0 || 0;
        this.long0 = this.long0 || 0;
        this.es = 0;
        this.title = this.title || "Robinson";
      }
      function forward$27(ll) {
        var lon = adjust_lon(ll.x - this.long0);
        var dphi = Math.abs(ll.y);
        var i = Math.floor(dphi * C1);
        if (i < 0) {
          i = 0;
        } else if (i >= NODES) {
          i = NODES - 1;
        }
        dphi = R2D * (dphi - RC1 * i);
        var xy = {
          x: poly3_val(COEFS_X[i], dphi) * lon,
          y: poly3_val(COEFS_Y[i], dphi)
        };
        if (ll.y < 0) {
          xy.y = -xy.y;
        }
        xy.x = xy.x * this.a * FXC + this.x0;
        xy.y = xy.y * this.a * FYC + this.y0;
        return xy;
      }
      function inverse$27(xy) {
        var ll = {
          x: (xy.x - this.x0) / (this.a * FXC),
          y: Math.abs(xy.y - this.y0) / (this.a * FYC)
        };
        if (ll.y >= 1) {
          ll.x /= COEFS_X[NODES][0];
          ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;
        } else {
          var i = Math.floor(ll.y * NODES);
          if (i < 0) {
            i = 0;
          } else if (i >= NODES) {
            i = NODES - 1;
          }
          for (; ; ) {
            if (COEFS_Y[i][0] > ll.y) {
              --i;
            } else if (COEFS_Y[i + 1][0] <= ll.y) {
              ++i;
            } else {
              break;
            }
          }
          var coefs = COEFS_Y[i];
          var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i + 1][0] - coefs[0]);
          t = newton_rapshon(function(x) {
            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);
          }, t, EPSLN, 100);
          ll.x /= poly3_val(COEFS_X[i], t);
          ll.y = (5 * i + t) * D2R;
          if (xy.y < 0) {
            ll.y = -ll.y;
          }
        }
        ll.x = adjust_lon(ll.x + this.long0);
        return ll;
      }
      var names$29 = ["Robinson", "robin"];
      var robin = {
        init: init$28,
        forward: forward$27,
        inverse: inverse$27,
        names: names$29
      };
      function init$29() {
        this.name = "geocent";
      }
      function forward$28(p) {
        var point = geodeticToGeocentric(p, this.es, this.a);
        return point;
      }
      function inverse$28(p) {
        var point = geocentricToGeodetic(p, this.es, this.a, this.b);
        return point;
      }
      var names$30 = ["Geocentric", "geocentric", "geocent", "Geocent"];
      var geocent = {
        init: init$29,
        forward: forward$28,
        inverse: inverse$28,
        names: names$30
      };
      var mode = {
        N_POLE: 0,
        S_POLE: 1,
        EQUIT: 2,
        OBLIQ: 3
      };
      var params = {
        h: { def: 1e5, num: true },
        // default is Karman line, no default in PROJ.7
        azi: { def: 0, num: true, degrees: true },
        // default is North
        tilt: { def: 0, num: true, degrees: true },
        // default is Nadir
        long0: { def: 0, num: true },
        // default is Greenwich, conversion to rad is automatic
        lat0: { def: 0, num: true }
        // default is Equator, conversion to rad is automatic
      };
      function init$30() {
        Object.keys(params).forEach(function(p) {
          if (typeof this[p] === "undefined") {
            this[p] = params[p].def;
          } else if (params[p].num && isNaN(this[p])) {
            throw new Error("Invalid parameter value, must be numeric " + p + " = " + this[p]);
          } else if (params[p].num) {
            this[p] = parseFloat(this[p]);
          }
          if (params[p].degrees) {
            this[p] = this[p] * D2R;
          }
        }.bind(this));
        if (Math.abs(Math.abs(this.lat0) - HALF_PI) < EPSLN) {
          this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;
        } else if (Math.abs(this.lat0) < EPSLN) {
          this.mode = mode.EQUIT;
        } else {
          this.mode = mode.OBLIQ;
          this.sinph0 = Math.sin(this.lat0);
          this.cosph0 = Math.cos(this.lat0);
        }
        this.pn1 = this.h / this.a;
        if (this.pn1 <= 0 || this.pn1 > 1e10) {
          throw new Error("Invalid height");
        }
        this.p = 1 + this.pn1;
        this.rp = 1 / this.p;
        this.h1 = 1 / this.pn1;
        this.pfact = (this.p + 1) * this.h1;
        this.es = 0;
        var omega = this.tilt;
        var gamma = this.azi;
        this.cg = Math.cos(gamma);
        this.sg = Math.sin(gamma);
        this.cw = Math.cos(omega);
        this.sw = Math.sin(omega);
      }
      function forward$29(p) {
        p.x -= this.long0;
        var sinphi = Math.sin(p.y);
        var cosphi = Math.cos(p.y);
        var coslam = Math.cos(p.x);
        var x, y;
        switch (this.mode) {
          case mode.OBLIQ:
            y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;
            break;
          case mode.EQUIT:
            y = cosphi * coslam;
            break;
          case mode.S_POLE:
            y = -sinphi;
            break;
          case mode.N_POLE:
            y = sinphi;
            break;
        }
        y = this.pn1 / (this.p - y);
        x = y * cosphi * Math.sin(p.x);
        switch (this.mode) {
          case mode.OBLIQ:
            y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
            break;
          case mode.EQUIT:
            y *= sinphi;
            break;
          case mode.N_POLE:
            y *= -(cosphi * coslam);
            break;
          case mode.S_POLE:
            y *= cosphi * coslam;
            break;
        }
        var yt, ba;
        yt = y * this.cg + x * this.sg;
        ba = 1 / (yt * this.sw * this.h1 + this.cw);
        x = (x * this.cg - y * this.sg) * this.cw * ba;
        y = yt * ba;
        p.x = x * this.a;
        p.y = y * this.a;
        return p;
      }
      function inverse$29(p) {
        p.x /= this.a;
        p.y /= this.a;
        var r = { x: p.x, y: p.y };
        var bm, bq, yt;
        yt = 1 / (this.pn1 - p.y * this.sw);
        bm = this.pn1 * p.x * yt;
        bq = this.pn1 * p.y * this.cw * yt;
        p.x = bm * this.cg + bq * this.sg;
        p.y = bq * this.cg - bm * this.sg;
        var rh = hypot(p.x, p.y);
        if (Math.abs(rh) < EPSLN) {
          r.x = 0;
          r.y = p.y;
        } else {
          var cosz, sinz;
          sinz = 1 - rh * rh * this.pfact;
          sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);
          cosz = Math.sqrt(1 - sinz * sinz);
          switch (this.mode) {
            case mode.OBLIQ:
              r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);
              p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;
              p.x *= sinz * this.cosph0;
              break;
            case mode.EQUIT:
              r.y = Math.asin(p.y * sinz / rh);
              p.y = cosz * rh;
              p.x *= sinz;
              break;
            case mode.N_POLE:
              r.y = Math.asin(cosz);
              p.y = -p.y;
              break;
            case mode.S_POLE:
              r.y = -Math.asin(cosz);
              break;
          }
          r.x = Math.atan2(p.x, p.y);
        }
        p.x = r.x + this.long0;
        p.y = r.y;
        return p;
      }
      var names$31 = ["Tilted_Perspective", "tpers"];
      var tpers = {
        init: init$30,
        forward: forward$29,
        inverse: inverse$29,
        names: names$31
      };
      function init$31() {
        this.flip_axis = this.sweep === "x" ? 1 : 0;
        this.h = Number(this.h);
        this.radius_g_1 = this.h / this.a;
        if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {
          throw new Error();
        }
        this.radius_g = 1 + this.radius_g_1;
        this.C = this.radius_g * this.radius_g - 1;
        if (this.es !== 0) {
          var one_es = 1 - this.es;
          var rone_es = 1 / one_es;
          this.radius_p = Math.sqrt(one_es);
          this.radius_p2 = one_es;
          this.radius_p_inv2 = rone_es;
          this.shape = "ellipse";
        } else {
          this.radius_p = 1;
          this.radius_p2 = 1;
          this.radius_p_inv2 = 1;
          this.shape = "sphere";
        }
        if (!this.title) {
          this.title = "Geostationary Satellite View";
        }
      }
      function forward$30(p) {
        var lon = p.x;
        var lat = p.y;
        var tmp, v_x, v_y, v_z;
        lon = lon - this.long0;
        if (this.shape === "ellipse") {
          lat = Math.atan(this.radius_p2 * Math.tan(lat));
          var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));
          v_x = r * Math.cos(lon) * Math.cos(lat);
          v_y = r * Math.sin(lon) * Math.cos(lat);
          v_z = r * Math.sin(lat);
          if ((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2 < 0) {
            p.x = Number.NaN;
            p.y = Number.NaN;
            return p;
          }
          tmp = this.radius_g - v_x;
          if (this.flip_axis) {
            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));
            p.y = this.radius_g_1 * Math.atan(v_z / tmp);
          } else {
            p.x = this.radius_g_1 * Math.atan(v_y / tmp);
            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));
          }
        } else if (this.shape === "sphere") {
          tmp = Math.cos(lat);
          v_x = Math.cos(lon) * tmp;
          v_y = Math.sin(lon) * tmp;
          v_z = Math.sin(lat);
          tmp = this.radius_g - v_x;
          if (this.flip_axis) {
            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));
            p.y = this.radius_g_1 * Math.atan(v_z / tmp);
          } else {
            p.x = this.radius_g_1 * Math.atan(v_y / tmp);
            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));
          }
        }
        p.x = p.x * this.a;
        p.y = p.y * this.a;
        return p;
      }
      function inverse$30(p) {
        var v_x = -1;
        var v_y = 0;
        var v_z = 0;
        var a, b, det, k;
        p.x = p.x / this.a;
        p.y = p.y / this.a;
        if (this.shape === "ellipse") {
          if (this.flip_axis) {
            v_z = Math.tan(p.y / this.radius_g_1);
            v_y = Math.tan(p.x / this.radius_g_1) * hypot(1, v_z);
          } else {
            v_y = Math.tan(p.x / this.radius_g_1);
            v_z = Math.tan(p.y / this.radius_g_1) * hypot(1, v_y);
          }
          var v_zp = v_z / this.radius_p;
          a = v_y * v_y + v_zp * v_zp + v_x * v_x;
          b = 2 * this.radius_g * v_x;
          det = b * b - 4 * a * this.C;
          if (det < 0) {
            p.x = Number.NaN;
            p.y = Number.NaN;
            return p;
          }
          k = (-b - Math.sqrt(det)) / (2 * a);
          v_x = this.radius_g + k * v_x;
          v_y *= k;
          v_z *= k;
          p.x = Math.atan2(v_y, v_x);
          p.y = Math.atan(v_z * Math.cos(p.x) / v_x);
          p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));
        } else if (this.shape === "sphere") {
          if (this.flip_axis) {
            v_z = Math.tan(p.y / this.radius_g_1);
            v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1 + v_z * v_z);
          } else {
            v_y = Math.tan(p.x / this.radius_g_1);
            v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1 + v_y * v_y);
          }
          a = v_y * v_y + v_z * v_z + v_x * v_x;
          b = 2 * this.radius_g * v_x;
          det = b * b - 4 * a * this.C;
          if (det < 0) {
            p.x = Number.NaN;
            p.y = Number.NaN;
            return p;
          }
          k = (-b - Math.sqrt(det)) / (2 * a);
          v_x = this.radius_g + k * v_x;
          v_y *= k;
          v_z *= k;
          p.x = Math.atan2(v_y, v_x);
          p.y = Math.atan(v_z * Math.cos(p.x) / v_x);
        }
        p.x = p.x + this.long0;
        return p;
      }
      var names$32 = ["Geostationary Satellite View", "Geostationary_Satellite", "geos"];
      var geos = {
        init: init$31,
        forward: forward$30,
        inverse: inverse$30,
        names: names$32
      };
      var includedProjections = function(proj4) {
        proj4.Proj.projections.add(tmerc);
        proj4.Proj.projections.add(etmerc);
        proj4.Proj.projections.add(utm);
        proj4.Proj.projections.add(sterea);
        proj4.Proj.projections.add(stere);
        proj4.Proj.projections.add(somerc);
        proj4.Proj.projections.add(omerc);
        proj4.Proj.projections.add(lcc);
        proj4.Proj.projections.add(krovak);
        proj4.Proj.projections.add(cass);
        proj4.Proj.projections.add(laea);
        proj4.Proj.projections.add(aea);
        proj4.Proj.projections.add(gnom);
        proj4.Proj.projections.add(cea);
        proj4.Proj.projections.add(eqc);
        proj4.Proj.projections.add(poly);
        proj4.Proj.projections.add(nzmg);
        proj4.Proj.projections.add(mill);
        proj4.Proj.projections.add(sinu);
        proj4.Proj.projections.add(moll);
        proj4.Proj.projections.add(eqdc);
        proj4.Proj.projections.add(vandg);
        proj4.Proj.projections.add(aeqd);
        proj4.Proj.projections.add(ortho);
        proj4.Proj.projections.add(qsc);
        proj4.Proj.projections.add(robin);
        proj4.Proj.projections.add(geocent);
        proj4.Proj.projections.add(tpers);
        proj4.Proj.projections.add(geos);
      };
      proj4$1.defaultDatum = "WGS84";
      proj4$1.Proj = Projection;
      proj4$1.WGS84 = new proj4$1.Proj("WGS84");
      proj4$1.Point = Point;
      proj4$1.toPoint = toPoint;
      proj4$1.defs = defs;
      proj4$1.nadgrid = nadgrid;
      proj4$1.transform = transform;
      proj4$1.mgrs = mgrs;
      proj4$1.version = "2.10.0";
      includedProjections(proj4$1);
      return proj4$1;
    });
  }
});

// node_modules/proj4js-definitions/proj4js-definitions.js
var require_proj4js_definitions = __commonJS({
  "node_modules/proj4js-definitions/proj4js-definitions.js"(exports2, module2) {
    var A = " +no_defs";
    var B = " +towgs84=0,0,0,0,0,0,0";
    var C = " +ellps=GRS80";
    var D = "+proj=tmerc";
    var E = " +units=m";
    var F = " +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12";
    var G = " +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22";
    var H = "+proj=lcc";
    var I = "+proj=utm";
    var J = " +units=us-ft";
    var K = "+proj=longlat";
    var L = " +lat_0=0";
    var M = " +ellps=krass";
    var N = " +y_0=0";
    var O = " +x_0=500000";
    var P = " +towgs84=0,0,4.5,0,0,0.554,0.2263";
    var Q = " +towgs84=0,0,1.9,0,0,0.814,-0.38";
    var R = " +ellps=intl";
    var S = " +datum=WGS84";
    var T = " +ellps=WGS72";
    var U = " +towgs84=15.8,-154.4,-82.3,0,0,0,0";
    var V = " +k=0.9999";
    var W = " +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993";
    var X = " +datum=NAD27";
    var Y = " +ellps=bessel";
    var Z = " +x_0=609601.2192024384";
    var a = " +x_0=600000";
    var b = " +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84";
    var c = " +ellps=clrk80";
    var d = " +b=6356755.288157528";
    var e = " +x_0=152400.3048006096";
    var f = " +lat_0=36.66666666666666";
    var g = " +towgs84=-146.414,507.337,680.507,0,0,0,0";
    var h = " +x_0=200000";
    var i = " +ellps=clrk66";
    var j = " +ellps=WGS84";
    var k = " +x_0=500000.001016002";
    var l = " +x_0=240000";
    var m = " +lat_0=-90";
    var n = " +towgs84=-87,-98,-121,0,0,0,0";
    var o = " +south";
    var p = " +lat_0=41.66666666666666";
    var q = " +y_0=36000";
    var r = " +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29";
    var s = " +x_0=0";
    var t = " +units=ft";
    var u = " +x_0=400000";
    var v = " +towgs84=-115.854,-99.0583,-152.462,0,0,0,0";
    var w = " +towgs84=-208.406,-109.878,-2.5764,0,0,0,0";
    var x = " +ellps=aust_SA";
    var y = " +lat_0=39.33333333333334";
    var z = " +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232";
    var AA = " +lat_0=37.66666666666666";
    var AB = " +lat_0=36.33333333333334";
    var AC = " +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7";
    var AD = " +y_0=500000.0001016001";
    var AE = " +x_0=200000.0001016002";
    var AF = " +x_0=500000.0001016001";
    var AG = " +x_0=500000.00001016";
    var AH = " +y_0=1000000";
    var AI = " +x_0=300000";
    var AJ = " +lon_0=-120.5";
    var AK = " +lat_0=43.66666666666666";
    var AL = " +lat_0=43.83333333333334";
    var AM = " +lat_1=-68.66666666666667";
    var AN = " +lat_2=-71.33333333333333";
    var AO = " +k=0.999966667";
    var AP = " +k=0.9996";
    var AQ = " +lat_0=38.33333333333334";
    var AR = " +lat_1=73.66666666666667";
    var AS = " +lat_2=70.33333333333333";
    var AT = " +lat_0=72.02500919444445";
    var AU = " +a=6378249.2";
    var AV = " +x_0=1500000";
    var AW = " +lat_ts=-80.23861111111111";
    var AX = " +towgs84=-288,175,-376,0,0,0,0";
    var AY = " +lat_1=41.78333333333333";
    var AZ = " +lat_2=-75.33333333333333";
    var Aa = " +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21";
    var Ab = " +x_0=304800";
    var Ac = " +x_0=2000000.0001016";
    var Ad = " +k=0.9999375";
    var Ae = " +y_0=500000";
    var Af = " +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547";
    var Ag = " +lon_0=-100.3333333333333";
    var Ah = " +lat_1=-72.66666666666667";
    var Ai = " +lat_1=-76.66666666666667";
    var Aj = " +lat_2=-79.33333333333333";
    var Ak = " +y_0=10000000";
    var Al = " +towgs84=-57,1,-41,0,0,0,0";
    var Am = " +k=0.999941177";
    var An = " +x_0=800000.0000101599";
    var Ao = " +y_0=99999.99998983997";
    var Ap = " +lat_1=38.43333333333333";
    var Aq = " +lat_0=24.33333333333333";
    var Ar = " +towgs84=26,-121,-78,0,0,0,0";
    var As = " +a=6378140";
    var At = " +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496";
    var Au = " +x_0=399999.99998984";
    var Av = " +towgs84=-24,-15,5,0,0,0,0";
    var Aw = " +towgs84=682,-203,480,0,0,0,0";
    var Ax = " +towgs84=-136,-108,-292,0,0,0,0";
    var Ay = " +b=6356075.41314024";
    var Az = " +lat_1=37.96666666666667";
    var BA = " +lat_0=38.83333333333334";
    var BB = " +lat_0=40.16666666666666";
    var BC = " +lat_0=34.33333333333334";
    var BD = " +lat_0=42.83333333333334";
    var BE = " +lon_0=-84.36666666666666";
    var BF = " +x_0=300000.0000000001";
    var BG = " +k=0.999933333";
    var BH = " +lat_1=48.73333333333333";
    var BI = " +lon_0=-111.5";
    var BJ = " +k=0.9999473679999999";
    var BK = " +towgs84=-67.35,3.88,-38.22,0,0,0,0";
    var BL = " +lat_2=73.66666666666667";
    var BM = " +lat_0=75.36440330555556";
    var BN = " +b=6356515";
    var BO = " +towgs84=25,-141,-78.5,-0,0.35,0.736,0";
    var BP = "+proj=stere";
    var BQ = " +lat_1=-64.66666666666667";
    var BR = " +lat_2=-67.33333333333333";
    var BS = " +b=6356514.966398753";
    var BT = " +towgs84=295,736,257,0,0,0,0";
    var BU = " +x_0=100000";
    var BV = " +towgs84=-11,851,5,0,0,0,0";
    var BW = " +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0";
    var BX = " +towgs84=-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06";
    var BY = " +lat_0=39.66666666666666";
    var BZ = " +x_0=1000000";
    var Ba = " +lon_0=-105.5";
    var Bb = " +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15";
    var Bc = " +a=6378249.145";
    var Bd = " +x_0=2000000";
    var Be = " +lat_0=45.66666666666666";
    var Bf = " +lat_1=80.33333333333333";
    var Bg = " +lat_0=78.70733752777778";
    var Bh = " +b=6356774.50408554";
    var Bi = " +lon_0=-91.33333333333333";
    var Bj = " +lon_0=-123.3333333333333";
    var Bk = " +towgs84=-168,-60,320,0,0,0,0";
    var Bl = " +lat_0=31";
    var Bm = " +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093";
    var Bn = " +x_0=150000";
    var Bo = " +x_0=3500000";
    var Bp = " +towgs84=213.11,9.37,-74.95,0,0,0,0";
    var Bq = " +lat_1=43.66666666666666";
    var Br = " +lat_0=40.33333333333334";
    var Bs = " +towgs84=-148,136,90,0,0,0,0";
    var Bt = " +towgs84=616,97,-251,0,0,0,0";
    var Bu = " +lon_0=-90";
    var Bv = " +x_0=250000";
    var Bw = " +x_0=914401.8288036576";
    var Bx = " +lon_0=-90.33333333333333";
    var By = " +a=6377276.345";
    var Bz = " +b=6356103.038993155";
    var CA = " +lat_0=40.5";
    var CB = " +towgs84=-134,-48,149,0,0,0,0";
    var CC = " +towgs84=25,-141,-78.5,0,0.35,0.736,0";
    var CD = " +lat_1=27.83333333333333";
    var CE = " +lat_2=26.16666666666667";
    var CF = " +lat_2=40.71666666666667";
    var CG = " +lat_2=39.01666666666667";
    var CH = " +lat_2=37.21666666666667";
    var CI = " +lat_1=70.33333333333333";
    var CJ = " +lat_0=68.68747555555557";
    var CK = " +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68";
    var CL = " +y_0=304800.6096012192";
    var CM = " +x_0=699999.9998983998";
    var CN = " +y_0=999999.9998983998";
    var CO = " +y_0=800000";
    var CP = " +k=0.99995";
    var CQ = " +lat_0=34.75";
    var CR = " +lon_0=-81";
    var CS = " +lon_0=-100";
    var CT = " +b=6356098.145120132";
    var CU = "+proj=omerc";
    var CV = " +lon_0=-98.5";
    var CW = " +towgs84=-103.746,-9.614,-255.95,0,0,0,0";
    var CX = " +x_0=800000";
    var CY = " +lat_0=37.83333333333334";
    var CZ = " +lat_2=44.33333333333334";
    var Ca = " +lat_2=42.33333333333334";
    var Cb = " +lat_0=29.66666666666667";
    var Cc = " +lat_0=25.66666666666667";
    var Cd = " +lat_0=35.83333333333334";
    var Ce = " +lat_1=83.66666666666667";
    var Cf = " +lat_2=80.33333333333333";
    var Cg = " +lat_0=82.05842488888888";
    var Ch = " +lat_0=38";
    var Ci = " +x_0=2500000";
    var Cj = " +towgs84=-377,681,-50,0,0,0,0";
    var Ck = "+proj=cass";
    var Cl = " +y_0=2000000";
    var Cm = " +towgs84=-143,-236,7,0,0,0,0";
    var Cn = " +lon_0=-110.1666666666667";
    var Co = " +lon_0=-111.9166666666667";
    var Cp = " +lon_0=-75.41666666666667";
    var Cq = " +lon_0=-82.16666666666667";
    var Cr = " +lon_0=-84.16666666666667";
    var Cs = " +lon_0=-112.1666666666667";
    var Ct = " +lon_0=-88.83333333333333";
    var Cu = " +lon_0=-104.3333333333333";
    var Cv = " +lon_0=-107.8333333333333";
    var Cw = " +lon_0=-76.58333333333333";
    var Cx = " +lon_0=-78.58333333333333";
    var Cy = " +lon_0=-120.8333333333333";
    var Cz = " +lon_0=-88.33333333333333";
    var DA = " +lon_0=-90.16666666666667";
    var DB = " +lon_0=-85.66666666666667";
    var DC = " +lon_0=-87.08333333333333";
    var DD = " +lon_0=-70.16666666666667";
    var DE = " +lon_0=-93.09999999999999";
    var DF = " +lon_0=-115.5833333333333";
    var DG = " +lon_0=-116.6666666666667";
    var DH = " +lon_0=-118.5833333333333";
    var DI = " +lon_0=-71.66666666666667";
    var DJ = " +lon_0=-105.1666666666667";
    var DK = " +lon_0=-107.3333333333333";
    var DL = " +lon_0=-110.0833333333333";
    var DM = " +lat_0=37.5";
    var DN = " +y_0=700000";
    var DO = " +towgs84=-242.2,-144.9,370.3,0,0,0,0";
    var DP = " +x_0=4500000";
    var DQ = " +y_0=1500000";
    var DR = " +x_0=599999.9999976";
    var DS = " +towgs84=-275.722,94.7824,340.894,-8.001,-4.42,-11.821,1";
    var DT = "+proj=aea";
    var DU = " +y_0=-2500000";
    var DV = " +lat_2=38.96666666666667";
    var DW = " +lat_1=41.66666666666666";
    var DX = " +lat_1=39.83333333333334";
    var DY = " +lat_2=38.33333333333334";
    var DZ = " +lat_2=37.06666666666667";
    var Da = " +lat_0=35.33333333333334";
    var Db = " +lat_1=35.46666666666667";
    var Dc = " +lat_2=34.03333333333333";
    var Dd = " +lat_1=33.88333333333333";
    var De = " +lat_2=32.78333333333333";
    var Df = " +lat_0=32.16666666666666";
    var Dg = " +lat_2=37.23333333333333";
    var Dh = " +lat_1=41.86666666666667";
    var Di = " +lat_0=40.83333333333334";
    var Dj = " +lat_2=29.58333333333333";
    var Dk = " +lat_2=41.71666666666667";
    var Dl = " +lat_1=41.03333333333333";
    var Dm = " +lat_2=40.66666666666666";
    var Dn = " +lat_1=36.76666666666667";
    var Do = " +lat_0=33.33333333333334";
    var Dp = " +lat_1=40.96666666666667";
    var Dq = " +lat_2=39.93333333333333";
    var Dr = " +lat_0=31.83333333333333";
    var Ds = " +lat_0=31.66666666666667";
    var Dt = " +lat_0=27.83333333333333";
    var Du = " +lat_2=36.76666666666667";
    var Dv = " +lat_0=45.33333333333334";
    var Dw = " +lat_0=45.16666666666666";
    var Dx = " +lat_1=36.23333333333333";
    var Dy = " +lat_2=34.93333333333333";
    var Dz = " +lat_1=34.76666666666667";
    var EA = " +lat_0=32.66666666666666";
    var EB = " +lat_1=43.26666666666667";
    var EC = " +lat_2=42.06666666666667";
    var ED = " +lat_2=40.61666666666667";
    var EE = " +lat_1=39.78333333333333";
    var EF = " +lat_2=38.71666666666667";
    var EG = " +lat_1=38.56666666666667";
    var EH = " +lat_2=37.26666666666667";
    var EI = " +lat_0=41.08333333333334";
    var EJ = " +lat_0=42.33333333333334";
    var EK = " +y_0=100000";
    var EL = " +b=6356173.508712696";
    var EM = " +y_0=5500000";
    var EN = " +lon_0=105";
    var EO = " +y_0=-5000000";
    var EP = " +k=0.9995000000000001";
    var EQ = " +k=0.9999749999999999";
    var ER = " +towgs84=-160,-6,-302,0,0,0,0";
    var ES = " +towgs84=307,304,-318,0,0,0,0";
    var ET = " +lon_0=-82.5";
    var EU = " +towgs84=70.995,-335.916,262.898,0,0,0,0";
    var EV = " +towgs84=-304.046,-60.576,103.64,0,0,0,0";
    var EW = " +x_0=700000";
    var EX = " +x_0=213360";
    var EY = " +lon_0=-85.75";
    var EZ = " +lon_0=-100.5";
    var Ea = " +lon_0=-77.75";
    var Eb = " +x_0=999999.9999898402";
    var Ec = " +towgs84=-151.99,287.04,-147.45,0,0,0,0";
    var Ed = " +lon_0=129";
    var Ee = " +a=6378293.645208759";
    var Ef = " +b=6356617.987679838";
    var Eg = " +x_0=5500000";
    var Eh = " +lat_1=40.78333333333333";
    var Ei = " +lat_2=39.71666666666667";
    var Ej = " +lat_1=37.93333333333333";
    var Ek = " +lat_2=36.73333333333333";
    var El = " +lat_1=42.68333333333333";
    var Em = " +lat_1=41.48333333333333";
    var En = " +lat_2=41.28333333333333";
    var Eo = " +lat_1=47.08333333333334";
    var Ep = " +lat_2=45.48333333333333";
    var Eq = " +lat_0=44.78333333333333";
    var Er = " +lat_2=44.18333333333333";
    var Es = " +lat_0=43.31666666666667";
    var Et = " +lat_1=36.16666666666666";
    var Eu = " +lat_2=34.33333333333334";
    var Ev = " +lat_2=47.43333333333333";
    var Ew = " +lat_1=47.48333333333333";
    var Ex = " +lat_2=46.18333333333333";
    var Ey = " +lat_2=35.56666666666667";
    var Ez = " +lat_1=35.23333333333333";
    var FA = " +lat_2=33.93333333333333";
    var FB = " +lat_2=40.88333333333333";
    var FC = " +lat_1=34.83333333333334";
    var FD = " +lat_1=36.41666666666666";
    var FE = " +lat_1=36.18333333333333";
    var FF = " +lat_1=33.96666666666667";
    var FG = " +lat_2=32.13333333333333";
    var FH = " +lat_1=31.88333333333333";
    var FI = " +lat_2=30.11666666666667";
    var FJ = " +lat_1=30.28333333333333";
    var FK = " +lat_2=28.38333333333333";
    var FL = " +lat_2=38.03333333333333";
    var FM = " +lat_1=47.33333333333334";
    var FN = " +lat_2=45.83333333333334";
    var FO = " +lat_1=46.76666666666667";
    var FP = " +lat_2=45.56666666666667";
    var FQ = " +lat_1=44.06666666666667";
    var FR = " +lat_2=42.73333333333333";
    var FS = " +lat_1=32.66666666666666";
    var FT = " +lat_2=31.16666666666667";
    var FU = " +lat_1=48.63333333333333";
    var FV = " +lat_2=47.03333333333333";
    var FW = " +lat_2=45.61666666666667";
    var FX = " +lat_1=45.21666666666667";
    var FY = " +lat_2=43.78333333333333";
    var FZ = " +lat_0=39.83333333333334";
    var Fa = " +lat_2=40.43333333333333";
    var Fb = " +lat_1=40.03333333333333";
    var Fc = " +lat_2=38.73333333333333";
    var Fd = " +lat_1=45.68333333333333";
    var Fe = " +lat_2=44.41666666666666";
    var Ff = " +lat_2=42.83333333333334";
    var Fg = " +lat_1=38.88333333333333";
    var Fh = " +lat_2=37.48333333333333";
    var Fi = " +lat_1=37.08333333333334";
    var Fj = " +lat_2=38.66666666666666";
    var Fk = " +lat_0=58";
    var Fl = " +lon_0=-98";
    var Fm = " +lon_0=117";
    var Fn = " +lon_0=135";
    var Fo = " +lat_0=41.5";
    var Fp = " +lat_0=42.5";
    var Fq = " +y_0=3000000";
    var Fr = " +lon_0=123";
    var Fs = " +lat_0=40";
    var Ft = " +lat_0=54";
    var Fu = " +towgs84=-192.873,-39.382,-111.202,-0.00205,-0.0005,0.00335,0.0188";
    var Fv = " +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725";
    var Fw = " +x_0=914401.8289";
    var Fx = " +y_0=304800.6096";
    var Fy = " +lon_0=111";
    var Fz = " +k_0=0.99878641";
    var GA = " +lon_0=-66.43333333333334";
    var GB = " +towgs84=61,-285,-181,0,0,0,0";
    var GC = " +towgs84=-133,-77,-51,0,0,0,0";
    var GD = " +towgs84=-679,669,-48,0,0,0,0";
    var GE = " +lon_0=-71.5";
    var GF = " +lon_0=-78.5";
    var GG = " +lon_0=-93.5";
    var GH = " +lat_0=41.75";
    var GI = " +y_0=249999.9998983998";
    var GJ = " +y_0=999999.9999898402";
    var GK = " +to_meter=1.0000135965";
    var GL = " +a=6377304.063";
    var GM = " +lat_0=36";
    var GN = " +towgs84=-79.9,-158,-168.9,0,0,0,0";
    var GO = " +towgs84=-50.9,-347.6,-231,0,0,0,0";
    var GP = " +towgs84=-106.869,52.2978,-103.724,0.3366,-0.457,1.8422,-1.2747";
    var GQ = " +towgs84=283,682,231,0,0,0,0";
    var GR = " +towgs84=-206,172,-6,0,0,0,0";
    var GS = " +towgs84=-92,-93,122,0,0,0,0";
    var GT = " +to_meter=0.9143985307444408";
    var GU = "+proj=sterea";
    var GV = " +lat_0=21.16666666666667";
    var GW = " +lat_1=18.43333333333333";
    var GX = " +lat_2=18.03333333333333";
    var GY = " +lat_0=17.83333333333333";
    var GZ = " +gamma=323.1301023611111";
    var Ga = " +lon_0=-79.5";
    var Gb = " +y_0=4500000";
    var Gc = " +x_0=31500000";
    var Gd = " +x_0=500000.0001504";
    var Ge = " +b=6356514.96582849";
    var Gf = " +towgs84=674.4,15.1,405.3,0,0,0,0";
    var Gg = " +towgs84=-180.624,-225.516,173.919,-0.81,-1.898,8.336,16.7101";
    var Gh = " +towgs84=589,76,480,0,0,0,0";
    var Gi = " +towgs84=-263,6,431,0,0,0,0";
    var Gj = " +lon_0=15";
    var Gk = " +axis=wsu";
    var Gl = " +lon_0=21";
    var Gm = " +lat_0=30";
    var Gn = " +ellps=helmert";
    var Go = " +a=6377299.151";
    var Gp = " +lon_0=-74.5";
    var Gq = " +b=6356750.304921594";
    var Gr = " +y_0=2000000.0001016";
    var Gs = " +x_0=3500000.0001016";
    var Gt = " +y_0=399999.99998984";
    var Gu = " +x_0=200000.00001016";
    var Gv = " +b=6356098.359005156";
    var Gw = " +x_0=14500000";
    var Gx = " +x_0=29500000";
    var Gy = " +towgs84=-117,-132,-164,0,0,0,0";
    var Gz = " +zone=20";
    var HA = " +lon_0=-122";
    var HB = " +ellps=bess_nam";
    var HC = " +lon_0=-86.15000000000001";
    var HD = " +towgs84=-189,-242,-91,0,0,0,0";
    var HE = " +towgs84=-265,120,-358,0,0,0,0";
    var HF = " +towgs84=-73.472,-51.66,-112.482,0.953,4.6,-2.368,0.586";
    var HG = " +towgs84=-17.51,-108.32,-62.39,0,0,0,0";
    var HH = " +towgs84=-10.18,-350.43,291.37,0,0,0,0";
    var HI = " +towgs84=-190.421,8.532,238.69,0,0,0,0";
    var HJ = " +lon_0=-68.5";
    var HK = " +a=6377299.36559538";
    var HL = " +x_0=79999.99999968";
    var HM = " +x_0=50000.00001504";
    var HN = " +lon_0=0";
    var HO = " +lon_0=27";
    var HP = " +lon_0=75";
    var HQ = " +lon_0=81";
    var HR = " +lon_0=93";
    var HS = " +lon_0=99";
    var HT = " +x_0=900000";
    var HU = " +x_0=13500000";
    var HV = " +x_0=20500000";
    var HW = " +x_0=22500000";
    var HX = " +towgs84=-166,-15,204,0,0,0,0";
    var HY = " +towgs84=-130,110,-13,0,0,0,0";
    var HZ = " +towgs84=-587.8,519.75,145.76,0,0,0,0";
    var Ha = " +lat_2=83.66666666666667";
    var Hb = " +lat_0=85.43711833333333";
    var Hc = " +towgs84=-273.5,110.6,-357.9,0,0,0,0";
    var Hd = " +lon_0=87";
    var He = "+proj=laea";
    var Hf = " +towgs84=-403,684,41,0,0,0,0";
    var Hg = " +lon_0=-92.5";
    var Hh = " +y_0=6000000";
    var Hi = " +zone=19";
    var Hj = " +lat_0=29.5";
    var Hk = " +y_0=300000";
    var Hl = " +lat_2=45.5";
    var Hm = " +k=0.999909091";
    var Hn = " +a=6377492.018";
    var Ho = " +b=6356751.689189189";
    var Hp = " +b=6356100.230165384";
    var Hq = " +lon_0=90";
    var Hr = " +lat_0=90";
    var Hs = " +x_0=18500000";
    var Ht = " +x_0=19500000";
    var Hu = " +x_0=15500000";
    var Hv = " +x_0=16500000";
    var Hw = " +x_0=21500000";
    var Hx = " +x_0=23500000";
    var Hy = " +x_0=25500000";
    var Hz = " +x_0=26500000";
    var IA = " +x_0=27500000";
    var IB = " +x_0=28500000";
    var IC = " +zone=18";
    var ID = " +zone=21";
    var IE = " +towgs84=-124.76,53,466.79,0,0,0,0";
    var IF = " +lon_0=-92";
    var IG = " +lon_0=33";
    var IH = " +lon_0=12";
    var II = " +lon_0=24";
    var IJ = " +lat_2=77";
    var IK = " +y_0=200000";
    var IL = " +lon_0=-70.5";
    var IM = " +x_0=7500000";
    var IN = " +y_0=3500000";
    var IO = " +towgs84=31,146,47,0,0,0,0";
    var IP = " +lat_0=45";
    var IQ = " +lat_0=26";
    var IR = " +a=6378160";
    var IS = " +lon_0=-109.5";
    var IT = " +x_0=30500000";
    var IU = " +x_0=32500000";
    var IV = " +lon_0=-85.83333333333333";
    var IW = " +lon_0=-118.3333333333333";
    var IX = " +y_0=0.003048006096012192";
    var IY = " +lat_0=30.5";
    var IZ = " +lat_0=44";
    var Ia = " +lon_0=30";
    var Ib = " +lat_0=47";
    var Ic = " +lat_1=77";
    var Id = " +lat_0=36.16666666666666";
    var Ie = " +lat_0=4.596200416666666";
    var If = " +gamma=53.13010236111111";
    var Ig = " +lon_0=13.33333333333333";
    var Ih = " +lat_0=81.31722600000001";
    var Ii = " +lat_0=73.15574086111111";
    var Ij = " +lat_0=65.10127088888888";
    var Ik = " +zone=17";
    var Il = " +lon_0=132";
    var Im = " +lon_0=114";
    var In = " +towgs84=-143,-90,-294,0,0,0,0";
    var Io = " +zone=22";
    var Ip = " +lat_0=41";
    var Iq = " +lat_0=46.5";
    var Ir = " +lon_0=-118";
    var Is = " +y_0=400000";
    var It = " +x_0=17500000";
    var Iu = " +x_0=33500000";
    var Iv = " +lon_0=-113.75";
    var Iw = " +lon_0=-116.25";
    var Ix = " +lon_0=-115.75";
    var Iy = " +lon_0=-106.25";
    var Iz = " +k=0.999916667";
    var JA = " +k=0.999964286";
    var JB = " +lon_0=-108.75";
    var JC = " +towgs84=-73,-247,227,0,0,0,0";
    var JD = " +towgs84=265.025,384.929,-194.046,0,0,0,0";
    var JE = " +k=0.99998";
    var JF = " +lat_1=40.65";
    var JG = " +lat_1=38.35";
    var JH = " +y_0=2500000";
    var JI = " +y_0=6500000";
    var JJ = " +x_0=39999.99999984";
    var JK = " +towgs84=-61.702,284.488,472.052,0,0,0,0";
    var JL = " +towgs84=-223.237,110.193,36.649,0,0,0,0";
    var JM = " +zone=39";
    var JN = " +zone=32";
    var JO = " +towgs84=-125,53,467,0,0,0,0";
    var JP = " +towgs84=198,881,317,0,0,0,0";
    var JQ = " +towgs84=214,804,268,0,0,0,0";
    var JR = " +towgs84=217,823,299,0,0,0,0";
    var JS = " +lon_0=45";
    var JT = " +lat_1=43";
    var JU = "+proj=merc";
    var JV = " +x_0=99999.99998983997";
    var JW = " +x_0=99999.99999960001";
    var JX = " +x_0=2743195.592233322";
    var JY = " +y_0=914398.5307444407";
    var JZ = " +zone=38";
    var Ja = " +zone=28";
    var Jb = " +lon_0=-114";
    var Jc = " +lat_1=45.5";
    var Jd = " +towgs84=-73,46,-86,0,0,0,0";
    var Je = " +towgs84=11,72,-101,0,0,0,0";
    var Jf = " +towgs84=287.58,177.78,-135.41,0,0,0,0";
    var Jg = " +towgs84=-162.619,-276.959,-161.764,0.067753,-2.24365,-1.15883,-1.09425";
    var Jh = " +lon_0=-87";
    var Ji = " +lon_0=-99";
    var Jj = " +lon_0=102";
    var Jk = " +lon_0=126";
    var Jl = " +k=0.99999";
    var Jm = " +x_0=50000";
    var Jn = " +lat_2=40";
    var Jo = " +lon_0=-84.25";
    var Jp = " +x_0=11500000";
    var Jq = " +lon_0=-72.75";
    var Jr = " +lon_0=-101.5";
    var Js = " +lon_0=-94.25";
    var Jt = " +x_0=6500000";
    var Ju = " +y_0=5000000";
    var Jv = " +x_0=1700000";
    var Jw = " +towgs84=31.95,300.99,419.19,0,0,0,0";
    var Jx = " +towgs84=-189.681,18.3463,-42.7695,-0.33746,-3.09264,2.53861,0.4598";
    var Jy = " +towgs84=-119.425,-303.659,-11.0006,1.1643,0.174458,1.09626,3.65706";
    var Jz = " +towgs84=982.609,552.753,-540.873,6.68163,-31.6115,-19.8482,16.805";
    var KA = " +zone=29";
    var KB = " +lon_0=9";
    var KC = " +zone=33";
    var KD = " +zone=37";
    var KE = " +no_uoff";
    var KF = " +lon_0=120";
    var KG = " +lon_0=177";
    var KH = " +lon_0=-177";
    var KI = " +lon_0=-158";
    var KJ = " +y_0=250000";
    var KK = " +lon_0=-111";
    var KL = " +x_0=2500000.0001424";
    var KM = " +x_0=1500000.0001464";
    var KN = " +lon_0=-71.60561777777777";
    var KO = " +lon_0=-156.6666666666667";
    var KP = " +lon_0=-160.1666666666667";
    var KQ = " +lat_0=0.1166666666666667";
    var KR = " +towgs84=0,0,0,-0,-0,-0,0";
    var KS = " +lon_0=-117.8333333333333";
    var KT = " +lon_0=-123.1666666666667";
    var KU = " +lon_0=-122.3333333333333";
    var KV = " +lon_0=-119.1666666666667";
    var KW = " +lon_0=-123.0833333333333";
    var KX = " +lon_0=-85.84999999999999";
    var KY = " +lon_0=-87.09999999999999";
    var KZ = " +lon_0=-86.90000000000001";
    var Ka = " +lon_0=-89.24166666666667";
    var Kb = " +lon_0=-92.63333333333334";
    var Kc = " +towgs84=347.103,1078.12,2623.92,-33.8875,70.6773,-9.3943,186.074";
    var Kd = " +towgs84=8.846,-4.394,-1.122,-0.00237,-0.146528,0.130428,0.783926";
    var Ke = " +towgs84=-480.26,-438.32,-643.429,16.3119,20.1721,-4.0349,-111.7";
    var Kf = " +towgs84=-0.293,766.95,87.713,0.195704,1.69507,3.47302,-0.039338";
    var Kg = " +towgs84=221.525,152.948,176.768,-2.3847,-1.3896,-0.877,11.4741";
    var Kh = " +towgs84=215.525,149.593,176.229,-3.2624,-1.692,-1.1571,10.4773";
    var Ki = " +zone=35";
    var Kj = " +lat_0=46.95240555555556";
    var Kk = " +alpha=30.28813972222222";
    var Kl = " +lat_1=10.16666666666667";
    var Km = " +lat_0=10.16666666666667";
    var Kn = " +lat_0=18.83333333333333";
    var Ko = " +lat_0=20.33333333333333";
    var Kp = " +lat_0=21.83333333333333";
    var Kq = " +lat_0=21.66666666666667";
    var Kr = " +lat_0=45.30916666666666";
    var Ks = " +lat_1=49.83333333333334";
    var Kt = " +lat_2=51.16666666666666";
    var Ku = " +lonc=-133.6666666666667";
    var Kv = " +alpha=323.1301023611111";
    var Kw = " +lat_1=53.83333333333334";
    var Kx = " +lat_2=51.83333333333334";
    var Ky = " +lat_1=44.66666666666666";
    var Kz = " +lat_0=44.66666666666666";
    var LA = " +lat_1=45.66666666666666";
    var LB = " +lat_0=45.91666666666666";
    var LC = " +lat_0=45.08333333333334";
    var LD = " +lat_0=44.33333333333334";
    var LE = " +lat_0=44.08333333333334";
    var LF = " +lat_1=48.33333333333334";
    var LG = " +lat_0=48.33333333333334";
    var LH = " +lat_0=31.73409694444445";
    var LI = " +lon_0=35.21208055555556";
    var LJ = " +lat_0=44.03611111111111";
    var LK = " +lat_0=4.599047222222222";
    var LL = " +lat_0=40.66666666666666";
    var LM = " +lat_1=49";
    var LN = " +lon_0=39";
    var LO = " +lat_1=37.25";
    var LP = " +lat_1=39.75";
    var LQ = " +lat_2=38.45";
    var LR = " +lat_1=30.75";
    var LS = " +lon_0=-84.5";
    var LT = " +lat_0=33.75";
    var LU = " +x_0=4000000";
    var LV = " +y_0=4000000";
    var LW = " +lon_0=-72.5";
    var LX = " +x_0=5000000";
    var LY = " +x_0=10500000";
    var LZ = " +x_0=12500000";
    var La = " +x_0=24500000";
    var Lb = " +k=0.99999375";
    var Lc = " +x_0=399999.9999984";
    var Ld = " +lon_0=-77";
    var Le = " +lon_0=108";
    var Lf = " +lon_0=171";
    var Lg = " +towgs84=-179.483,-69.379,-27.584,-7.862,8.163,6.042,-13.925";
    var Lh = " +lon_0=-171";
    var Li = " +lat_0=32.5";
    var Lj = " +lon_0=-117";
    var Lk = " +k=1.000015";
    var Ll = " +k=1.000034";
    var Lm = " +k=1.000031";
    var Ln = " +k=1.000026";
    var Lo = " +ellps=evrstSS";
    var Lp = " +a=6377301.243";
    var Lq = " +towgs84=410.721,55.049,80.746,2.5779,2.3514,0.6664,17.3311";
    var Lr = " +towgs84=72.438,345.918,79.486,1.6045,0.8823,0.5565,1.3746";
    var Ls = " +pm=ferro";
    var Lt = " +lon_0=78";
    var Lu = " +lon_0=10";
    var Lv = " +pm=paris";
    var Lw = " +towgs84=0.055,-0.541,-0.185,0.0183,-0.0003,-0.007,-0.014";
    var Lx = " +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489";
    var Ly = " +towgs84=8.853,-52.644,180.304,-0.393,-2.323,2.96,-24.081";
    var Lz = " +towgs84=572.213,85.334,461.94,4.9732,1.529,5.2484,3.5378";
    var MA = " +zone=58";
    var MB = " +zone=23";
    var MC = " +x_0=304800.6096012192";
    var MD = " +y_0=152400.3048006096";
    var ME = " +x_0=800000.0001016001";
    var MF = " +x_0=399999.9998983998";
    var MG = " +x_0=7999999.999968001";
    var MH = " +x_0=5999999.999976001";
    var MI = " +x_0=830000.0001016001";
    var MJ = " +x_0=249999.9998983998";
    var MK = " +x_0=350000.0001016001";
    var ML = " +to_meter=0.3047972654";
    var MM = " +x_0=99999.99989839978";
    var MN = " +y_0=8000000.000010163";
    var MO = " +x_0=699999.9999898402";
    var MP = " +lon_0=-69";
    var MQ = " +lon_0=-86";
    var MR = " +towgs84=-3.2,-5.7,2.8,0,0,0,0";
    var MS = " +x_0=8500000";
    var MT = " +x_0=9500000";
    var MU = " +lat_1=39.45";
    var MV = " +lat_0=44.25";
    var MW = " +lat_1=41.95";
    var MX = " +lat_2=35.25";
    var MY = " +lat_2=34.65";
    var MZ = " +lat_2=44.25";
    var Ma = " +lat_1=47.05";
    var Mb = " +lat_1=40.25";
    var Mc = " +k_0=1.00012";
    var Md = " +lat_0=40.25";
    var Me = " +zone=40";
    var Mf = " +zone=36";
    var Mg = " +zone=51";
    var Mh = " +zone=48";
    var Mi = " +zone=49";
    var Mj = " +lon_0=96";
    var Mk = " +y_0=750000";
    var Ml = " +lat_0=36.5";
    var Mm = " +lon_0=-119";
    var Mn = " +lat_0=33.5";
    var Mo = " +lat_2=41.2";
    var Mp = " +k=0.999995";
    var Mq = " +lat_2=33.3";
    var Mr = " +lat_0=38.5";
    var Ms = " +lon_0=-154";
    var Mt = " +lon_0=-120";
    var Mu = " +x_0=34500000";
    var Mv = " +x_0=35500000";
    var Mw = " +x_0=36500000";
    var Mx = " +x_0=37500000";
    var My = " +x_0=38500000";
    var Mz = " +x_0=39500000";
    var NA = " +x_0=40500000";
    var NB = " +x_0=41500000";
    var NC = " +x_0=43500000";
    var ND = " +x_0=45500000";
    var NE = " +y_0=3999999.99998984";
    var NF = " +y_0=2000000.00001016";
    var NG = " +towgs84=164,138,-189,0,0,0,0";
    var NH = " +towgs84=-186,230,110,0,0,0,0";
    var NI = " +towgs84=-199,32,322,0,0,0,0";
    var NJ = " +to_meter=0.3047997101815088";
    var NK = " +towgs84=-76,-138,67,0,0,0,0";
    var NL = " +towgs84=-43,-163,45,0,0,0,0";
    var NM = " +towgs84=-346,-1,224,0,0,0,0";
    var NN = " +towgs84=210,814,289,0,0,0,0";
    var NO = " +towgs84=-74,-130,42,0,0,0,0";
    var NP = " +zone=15";
    var NQ = " +zone=16";
    var NR = " +zone=34";
    var NS = " +zone=50";
    var NT = " +zone=52";
    var NU = " +lon_0=-62";
    var NV = " +lon_0=-84";
    var NW = " +lon_0=-79";
    var NX = " +lon_0=131";
    var NY = " +lon_0=153";
    var NZ = " +lon_0=165";
    var Na = " +lon_0=-94";
    var Nb = " +lon_0=-54";
    var Nc = " +a=6378300.789";
    var Nd = " +b=6356566.435";
    var Ne = " +y_0=3999999.9998984";
    var Nf = " +y_0=5000000.0001016";
    var Ng = " +x_0=150000.00001464";
    var Nh = " +lat_2=46";
    var Ni = " +lon_0=84";
    var Nj = " +lat_0=43";
    var Nk = " +k_0=0.999625769";
    var Nl = " +towgs84=51,391,-36,0,0,0,0";
    var Nm = " +towgs84=-83,37,124,0,0,0,0";
    var Nn = " +towgs84=-355,21,72,0,0,0,0";
    var No = " +towgs84=-23,259,-9,0,0,0,0";
    var Np = " +towgs84=174.05,-25.49,112.57,-0,-0,0.554,0.2263";
    var Nq = " +zone=59";
    var Nr = " +zone=25";
    var Ns = " +zone=11";
    var Nt = " +zone=12";
    var Nu = " +zone=13";
    var Nv = " +zone=54";
    var Nw = " +zone=14";
    var Nx = " +zone=24";
    var Ny = " +zone=47";
    var Nz = " +lat_2=38.3";
    var OA = " +lat_1=45.7";
    var OB = " +lat_2=42.1";
    var OC = " +x_0=165000";
    var OD = " +lat_2=32.5";
    var OE = " +x_0=609600";
    var OF = " +lat_1=39.2";
    var OG = " +lat_2=47.5";
    var OH = " +lat_1=30.7";
    var OI = " +lat_2=29.3";
    var OJ = " +lat_0=28.5";
    var OK = " +lat_1=41.7";
    var OL = " +lat_1=44.4";
    var OM = " +lat_1=27.5";
    var ON = " +lon_0=-150";
    var OO = " +lat_0=44.5";
    var OP = " +k=1.000027";
    var OQ = " +k=1.000038";
    var OR = " +k=1.000036";
    var OS = " +lon_0=-87.5";
    var OT = " +x_0=3999999.999984";
    var OU = " +x_0=199999.9999992";
    var OV = " +towgs84=16,196,93,0,0,0,0";
    var OW = " +towgs84=-88,4,101,0,0,0,0";
    var OX = " +lat_0=18";
    var OY = " +lat_2=67";
    var OZ = " +lon_0=-96";
    var Oa = " +x_0=80000";
    var Ob = " +lon_0=-82";
    var Oc = " +lon_0=-74";
    var Od = " +lon_0=147";
    var Oe = " +lon_0=150";
    var Of = " +x_0=40000";
    var Og = " +k=1.00002";
    var Oh = " +x_0=42500000";
    var Oi = " +x_0=44500000";
    var Oj = " +lon_0=-85.05";
    var Ok = " +ellps=mod_airy";
    var Ol = " +lat_0=0.1333333333333333";
    var Om = " +lat_1=-60.66666666666666";
    var On = " +lat_2=-63.33333333333334";
    var Oo = " +lon_0=-91.91666666666667";
    var Op = " +y_0=0.003352806705613411";
    var Oq = " +zone=30";
    var Or = " +lon_0=3";
    var Os = " +zone=26";
    var Ot = " +zone=53";
    var Ou = " +lat_0=31.73439361111111";
    var Ov = " +lon_0=35.20451694444445";
    var Ow = " +lon_0=7.439583333333333";
    var Ox = " +lon_0=132.1666666666667";
    var Oy = " +lon_0=134.3333333333333";
    var Oz = " +lon_0=137.1666666666667";
    var PA = " +lon_0=139.8333333333333";
    var PB = " +lon_0=140.8333333333333";
    var PC = " +lon_0=3.192280555555556";
    var PD = " +lat_1=49.50000000000001";
    var PE = " +lat_0=49.50000000000001";
    var PF = " +alpha=53.31582047222222";
    var PG = " +lon_0=10.33333333333333";
    var PH = " +lon_0=16.33333333333333";
    var PI = " +towgs84=-502.862,-247.438,312.724,0,0,0,0";
    var PJ = " +towgs84=-381.788,-57.501,-256.673,0,0,0,0";
    var PK = " +towgs84=-43.685,-179.785,-267.721,0,0,0,0";
    var PL = " +zone=60";
    var PM = " +zone=55";
    var PN = " +lon_0=36";
    var PO = " +lon_0=42";
    var PP = " +lat_1=46";
    var PQ = " +lat_1=44";
    var PR = " +lat_0=42";
    var PS = " +lon_0=51";
    var PT = " +lat_0=33";
    var PU = " +lat_0=52";
    var PV = " +ellps=airy";
    var PW = " +pm=jakarta";
    var PX = " +x_0=2743195.5";
    var PY = " +y_0=-4354009.816";
    var PZ = " +k_0=0.9987864078000001";
    var Pa = " +towgs84=-106.226,166.366,-37.893,0,0,0,0";
    var Pb = " +towgs84=508.088,-191.042,565.223,0,0,0,0";
    var Pc = " +k=0.99996";
    var Pd = " +a=6378135";
    var Pe = " +lon_0=-66";
    var Pf = " +lon_0=141";
    var Pg = " +lon_0=159";
    var Ph = " +k=0.99984";
    var Pi = " +lat_0=-22";
    var Pj = " +lon_0=127.5";
    var Pk = " +x_0=6000000";
    var Pl = " +x_0=3900000";
    var Pm = " +y_0=1300000";
    var Pn = " +lat_0=44.75";
    var Po = " +lat_0=37.75";
    var Pp = " +lat_0=40.55";
    var Pq = " +lon_0=-87.3";
    var Pr = " +lon_0=-86.5";
    var Ps = " +towgs84=195.671,332.517,274.607,0,0,0,0";
    var Pt = " +towgs84=-204.619,140.176,55.226,0,0,0,0";
    var Pu = "+proj=somerc";
    var Pv = " +y_0=30480.06096012192";
    var Pw = " +y_0=999999.9999960001";
    var Px = " +x_0=182880.3657607315";
    var Py = " +towgs84=674.374,15.056,405.346,0,0,0,0";
    var Pz = " +towgs84=-133.63,-157.5,-158.62,0,0,0,0";
    var QA = " +towgs84=-0.465,372.095,171.736,0,0,0,0";
    var QB = " +towgs84=-56.263,16.136,-22.856,0,0,0,0";
    var QC = " +towgs84=-241.54,-163.64,396.06,0,0,0,0";
    var QD = " +zone=31";
    var QE = " +zone=10";
    var QF = " +zone=46";
    var QG = " +x_0=304800.6096";
    var QH = " +y_0=152400.3048";
    var QI = " +alpha=337.25556";
    var QJ = " +x_0=2546731.496";
    var QK = " +gamma=337.25556";
    var QL = " +k_0=0.999625544";
    var QM = " +towgs84=335.47,222.58,-230.94,0,0,0,0";
    var QN = " +towgs84=217.037,86.959,23.956,0,0,0,0";
    var QO = " +towgs84=-128.16,-282.42,21.93,0,0,0,0";
    var QP = " +towgs84=103.25,-100.4,-307.19,0,0,0,0";
    var QQ = " +lon_0=31";
    var QR = " +lon_0=18";
    var QS = " +lat_2=36";
    var QT = " +lat_0=29";
    var QU = " +lat_0=35";
    var QV = " +lat_0=34";
    var QW = " +lon_0=63";
    var QX = " +lat_0=37";
    var QY = " +lat_2=65";
    var QZ = " +y_0=-4000000";
    var Qa = " +y_0=914398.5";
    var Qb = " +towgs84=-199.87,74.79,246.62,0,0,0,0";
    var Qc = " +towgs84=-11.64,-348.6,291.98,0,0,0,0";
    var Qd = " +towgs84=-254.1,-5.36,-100.29,0,0,0,0";
    var Qe = " +towgs84=-206.1,-174.7,-87.7,0,0,0,0";
    var Qf = " +towgs84=-770.1,158.4,-498.2,0,0,0,0";
    var Qg = " +towgs84=-146.21,112.63,4.05,0,0,0,0";
    var Qh = " +towgs84=-294.7,-200.1,525.5,0,0,0,0";
    var Qi = " +lat_0=4";
    var Qj = " +a=6378300";
    var Qk = " +lon_0=-63";
    var Ql = " +lon_0=162";
    var Qm = " +lat_ts=90";
    var Qn = " +y_0=600000";
    var Qo = " +x_0=350000";
    var Qp = " +y_0=900000";
    var Qq = " +lat_1=32.5";
    var Qr = " +lon_0=-147";
    var Qs = " +k=1.000043";
    var Qt = " +lat_0=48.5";
    var Qu = " +lat_0=40.9";
    var Qv = " +k=1.000028";
    var Qw = " +k=1.000025";
    var Qx = " +x_0=170251.555";
    var Qy = " +b=6356657.142669561";
    var Qz = " +b=6356094.667915204";
    var RA = " +b=6355862.933255573";
    var RB = " +a=6378249.144808011";
    var RC = " +b=6356514.966204134";
    var RD = " +towgs84=-70.9,-151.8,-41.4,0,0,0,0";
    var RE = " +towgs84=52.17,-71.82,-14.9,0,0,0,0";
    var RF = " +towgs84=283.7,735.9,261.1,0,0,0,0";
    var RG = " +zone=5";
    var RH = " +zone=7";
    var RI = " +lon_0=19";
    var RJ = " +lon_0=25";
    var RK = " +lat_2=45";
    var RL = " +lon_0=57";
    var RM = " +lon_0=69";
    var RN = " +lat_2=39";
    var RO = " +lat_2=35";
    var RP = " +lon_0=28";
    var RQ = " +lon_0=-61.5";
    var RR = " +lon_0=-64.5";
    var RS = " +lon_0=-90.5";
    var RT = " +lon_0=-94.5";
    var RU = " +y_0=2800000";
    var RV = " +x_0=4321000";
    var RW = " +y_0=3210000";
    var RX = " +y_0=14743.5";
    var RY = " +y_0=1999999.999992";
    var RZ = " +y_0=2999999.999988";
    var Ra = " +y_0=50000.00001504";
    var Rb = " +zone=41";
    var Rc = " +zone=42";
    var Rd = " +k=0.994";
    var Re = " +zone=56";
    var Rf = " +lon_0=-67.875";
    var Rg = " +lon_0=-70.375";
    var Rh = " +x_0=609601.22";
    var Ri = " +b=6356889.449";
    var Rj = " +lon_0=-69.125";
    var Rk = " +lon_0=-121.75";
    var Rl = " +lon_0=-121.25";
    var Rm = " +lon_0=-119.75";
    var Rn = " +lon_0=-122.75";
    var Ro = " +zone=6";
    var Rp = "+proj=krovak";
    var Rq = " +towgs84=-637,-549,-203,0,0,0,0";
    var Rr = " +towgs84=-20.8,11.3,2.4,0,0,0,0";
    var Rs = " +lon_0=-93";
    var Rt = " +lon_0=127";
    var Ru = " +lon_0=125";
    var Rv = " +k=0.99975";
    var Rw = " +lon_0=136";
    var Rx = " +lon_0=138";
    var Ry = " +lon_0=180";
    var Rz = " +y_0=50000";
    var SA = " +lon_0=-85";
    var SB = " +k=1.00016";
    var SC = " +lon_0=2.7";
    var SD = " +towgs84=27.5,14,186.4,0,0,0,0";
    var SE = " +towgs84=-499,-249,314,0,0,0,0";
    var SF = " +towgs84=-467,-16,-300,0,0,0,0";
    var SG = " +towgs84=-382,-59,-262,0,0,0,0";
    var SH = " +towgs84=253,-132,-127,0,0,0,0";
    var SI = " +towgs84=-963,510,-359,0,0,0,0";
    var SJ = " +towgs84=94,-948,-1262,0,0,0,0";
    var SK = " +zone=1";
    var SL = " +zone=27";
    var SM = " +zone=57";
    var SN = " +pm=oslo";
    var SO = " +zone=43";
    var SP = " +lon_0=23";
    var SQ = " +lon_0=48";
    var SR = " +lon_0=54";
    var SS = " +lat_0=49.5";
    var ST = " +k=0.999912";
    var SU = " +lon_0=-174";
    var SV = " +lon_0=-168";
    var SW = " +lon_0=-170";
    var SX = " +lon_0=-165";
    var SY = " +lat_2=40.5";
    var SZ = " +lon_0=-115";
    var Sa = " +lat_1=29.5";
    var Sb = " +k=1.000045";
    var Sc = " +lat_1=39.5";
    var Sd = " +lat_1=33.3";
    var Se = " +lat_0=33.3";
    var Sf = " +lon_0=-155.5";
    var Sg = " +lon_0=-159.5";
    var Sh = " +y_0=-4480000";
    var Si = " +lon_0=-176.5";
    var Sj = " +lon_0=-89.75";
    var Sk = " +k_0=1.000008";
    var Sl = " +lonc=-124.05";
    var Sm = " +k_0=1.000002";
    var Sn = " +lon_0=-122.5";
    var So = " +lon_0=-98.25";
    var Sp = " +lon_0=-112.5";
    var Sq = " +lon_0=-84.95";
    var Sr = " +lon_0=-86.95";
    var Ss = " +lon_0=-85.45";
    var St = " +lon_0=-87.45";
    var Su = " +lon_0=-87.55";
    var Sv = " +towgs84=-149,128,296,0,0,0,0";
    var Sw = " +towgs84=-425,-169,81,0,0,0,0";
    var Sx = " +towgs84=-104,167,-38,0,0,0,0";
    var Sy = " +towgs84=-106,-87,188,0,0,0,0";
    var Sz = " +towgs84=-289,-124,60,0,0,0,0";
    var TA = " +towgs84=137,248,-430,0,0,0,0";
    var TB = " +towgs84=-13,-348,292,0,0,0,0";
    var TC = " +towgs84=-115,118,426,0,0,0,0";
    var TD = " +towgs84=0,-0.15,0.68,0,0,0,0";
    var TE = " +towgs84=145,-187,103,0,0,0,0";
    var TF = " +towgs84=-134,229,-29,0,0,0,0";
    var TG = " +towgs84=70,207,389.5,0,0,0,0";
    var TH = " +towgs84=-148,51,-291,0,0,0,0";
    var TI = " +towgs84=-255,-15,71,0,0,0,0";
    var TJ = " +towgs84=725,685,536,0,0,0,0";
    var TK = " +towgs84=72,213.7,93,0,0,0,0";
    var TL = " +towgs84=174,359,365,0,0,0,0";
    var TM = " +towgs84=-173,253,27,0,0,0,0";
    var TN = " +towgs84=-203,141,53,0,0,0,0";
    var TO = " +towgs84=186,482,151,0,0,0,0";
    var TP = " +towgs84=162,117,154,0,0,0,0";
    var TQ = " +towgs84=-73,213,296,0,0,0,0";
    var TR = " +towgs84=-130,29,364,0,0,0,0";
    var TS = " +towgs84=-10,375,165,0,0,0,0";
    var TT = " +towgs84=175,-38,113,0,0,0,0";
    var TU = " +to_meter=0.9143984146160287";
    var TV = " +zone=2";
    var TW = " +zone=8";
    var TX = " +zone=9";
    var TY = " +zone=4";
    var TZ = " +towgs84=30,430,368,0,0,0,0";
    var Ta = " +towgs84=185,165,42,0,0,0,0";
    var Tb = " +towgs84=-97,787,86,0,0,0,0";
    var Tc = " +towgs84=639,405,60,0,0,0,0";
    var Td = " +zone=44";
    var Te = " +zone=45";
    var Tf = " +lon_0=-58.5";
    var Tg = " +lon_0=-67.5";
    var Th = " +lon_0=-73.5";
    var Ti = " +lon_0=-76.5";
    var Tj = " +y_0=1200000";
    var Tk = " +lon_0=133.5";
    var Tl = " +x_0=8000000";
    var Tm = " +y_0=8000000";
    var Tn = " +k=0.9998335";
    var To = " +lon_0=-85.5";
    var Tp = " +x_0=7000000";
    var Tq = " +lat_0=43.75";
    var Tr = " +lat_0=43.25";
    var Ts = " +lat_0=45.25";
    var Tt = " +lon_0=-86.3";
    var Tu = " +lat_0=38.15";
    var Tv = " +lat_0=39.15";
    var Tw = " +lat_0=41.25";
    var Tx = " +lat_0=40.65";
    var Ty = " +lat_0=39.25";
    var Tz = " +lat_0=40.35";
    var UA = " +lon_0=-85.8";
    var UB = " +towgs84=9,183,236,0,0,0,0";
    var UC = " +towgs84=-48,55,52,0,0,0,0";
    var UD = " +towgs84=84,274,65,0,0,0,0";
    var UE = " +lon_0=17";
    var UF = " +lat_1=60";
    var UG = " +k=0.9998";
    var UH = " +lon_0=66";
    var UI = " +lon_0=20";
    var UJ = " +lon_0=26";
    var UK = " +lat_0=51";
    var UL = " +lat_1=87";
    var UM = " +lat_1=26";
    var UN = " +lon_0=144";
    var UO = " +lon_0=168";
    var UP = " +lon_0=174";
    var UQ = " +lon_0=-72";
    var UR = " +lon_0=-75";
    var US = " +lon_0=-60";
    var UT = " +lon_0=-39";
    var UU = "+proj=poly";
    var UV = " +x_0=219529.584";
    var UW = " +a=6378306.3696";
    var UX = " +lon_0=-61.33333333333334";
    var UY = " +lon_0=-91.86666666666666";
    var UZ = " +lon_0=-8.131906111111112";
    var Ua = " +lon_0=-83.66666666666667";
    var Ub = " +lon_0=-108.4166666666667";
    var Uc = " +lon_0=-108.3333333333333";
    var Ud = " +lon_0=-85.40000000000001";
    var Ue = " +lon_0=-86.65000000000001";
    var Uf = " +lon_0=-86.40000000000001";
    var Ug = " +lon_0=-85.59999999999999";
    var Uh = " +lon_0=-87.15000000000001";
    var Ui = " +lon_0=-86.59999999999999";
    var Uj = " +lon_0=-84.90000000000001";
    var Uk = " +lon_0=-85.65000000000001";
    var Ul = " +lon_0=-87.65000000000001";
    var Um = " +lon_0=-85.34999999999999";
    var Un = " +lon_0=-87.40000000000001";
    var Uo = " +lon_0=-87.34999999999999";
    var Up = " +lon_0=-85.90000000000001";
    var Uq = " +lon_0=-90.62222222222222";
    var Ur = " +lon_0=-91.84999999999999";
    var Us = " +lon_0=-91.15277777777779";
    var Ut = " +lon_0=-91.79722222222222";
    var Uu = " +lon_0=-92.45777777777778";
    var Uv = " +lon_0=-91.29444444444444";
    var Uw = " +lon_0=-90.70833333333334";
    var Ux = " +lon_0=-89.39444444444445";
    var Uy = " +lon_0=-89.42222222222223";
    var Uz = " +lon_0=-88.77500000000001";
    var VA = " +lon_0=-87.27222222222223";
    var VB = " +lon_0=-91.89444444444445";
    var VC = " +lon_0=-91.28888888888889";
    var VD = " +lon_0=-88.14166666666668";
    var VE = " +lon_0=-88.63333333333334";
    var VF = " +lon_0=-89.83888888888889";
    var VG = " +lon_0=-90.16111111111111";
    var VH = " +lon_0=-90.25555555555556";
    var VI = " +lon_0=-90.84429651944444";
    var VJ = " +lon_0=-87.89444444444445";
    var VK = " +lon_0=-91.31666666666666";
    var VL = " +lon_0=-89.03333333333333";
    var VM = " +lon_0=-89.73333333333333";
    var VN = " +lon_0=-87.71111111111111";
    var VO = " +lon_0=-88.41666666666667";
    var VP = " +lon_0=-90.64166666666668";
    var VQ = " +lon_0=-87.90833333333335";
    var VR = " +lon_0=-89.54444444444444";
    var VS = " +lon_0=-92.22777777777777";
    var VT = " +lon_0=-90.48888888888889";
    var VU = " +lon_0=-90.43055555555556";
    var VV = " +lon_0=-89.07222222222222";
    var VW = " +lon_0=-91.06666666666666";
    var VX = " +lon_0=-89.90000000000001";
    var VY = " +lon_0=-91.11666666666666";
    var VZ = " +lon_0=-88.60555555555555";
    var Va = " +lon_0=-90.48333333333333";
    var Vb = " +lon_0=-91.36666666666666";
    var Vc = " +lon_0=-90.78333333333333";
    var Vd = " +lon_0=-89.48888888888889";
    var Ve = " +lon_0=-88.54166666666667";
    var Vf = " +lon_0=-91.78333333333333";
    var Vg = " +lon_0=-88.06388888888888";
    var Vh = " +lon_0=-88.22499999999999";
    var Vi = " +lon_0=-88.81666666666666";
    var Vj = " +y_0=0.004876809753619507";
    var Vk = " +y_0=0.008534417068834137";
    var Vl = " +y_0=0.003962407924815849";
    var Vm = " +y_0=0.005791211582423164";
    var Vn = " +lon_0=-55.68333333333333";
    var Vo = " +to_meter=0.201166195164";
    var Vp = " +lat_0=4.666666666666667";
    var Vq = " +lat_0=6.666666666666667";
    var Vr = " +lon_0=6.166666666666667";
    var Vs = " +lat_0=10.44166666666667";
    var Vt = " +lat_0=22.31213333333334";
    var Vu = " +lon_0=114.1785555555556";
    var Vv = " +lon_0=51.21666666666667";
    var Vw = " +lon_0=11.30827777777778";
    var Vx = " +lon_0=13.55827777777778";
    var Vy = " +lon_0=15.80827777777778";
    var Vz = " +lon_0=18.05827777777778";
    var WA = " +lon_0=20.30827777777778";
    var WB = " +lon_0=22.55827777777778";
    var WC = " +lat_1=27.41666666666667";
    var WD = " +lat_2=34.91666666666666";
    var WE = " +lat_0=31.16666666666667";
    var WF = " +lat_1=59.33333333333334";
    var WG = " +lat_0=57.51755393055556";
    var WH = " +lon_0=4.359215833333333";
    var WI = " +lat_1=61.66666666666666";
    var WJ = " +lat_0=29.02626833333333";
    var WK = " +lat_1=48.66666666666666";
    var WL = " +lat_2=53.66666666666666";
    var WM = " +lon_0=127.0028902777778";
    var WN = " +lon_0=89.84999999999999";
    var WO = " +lon_0=91.56666666666666";
    var WP = " +lon_0=24.83333333333333";
    var WQ = " +lat_2=63.66666666666666";
    var WR = " +lat_0=65.35103930555555";
    var WS = " +lat_1=63.66666666666666";
    var WT = " +lat_2=60.33333333333334";
    var WU = " +lat_0=62.01530688888889";
    var WV = " +lat_1=45.78333333333333";
    var WW = " +lat_0=45.78333333333333";
    var WX = " +lat_0=42.66666666666666";
    var WY = " +lat_0=43.36666666666667";
    var WZ = " +lat_0=45.70611111111111";
    var Wa = " +lat_0=45.13333333333333";
    var Wb = " +lat_1=46.66964837722222";
    var Wc = " +lat_0=46.66964837722222";
    var Wd = " +lat_0=43.48138888888889";
    var We = " +lat_1=45.89871486583333";
    var Wf = " +lat_0=45.89871486583333";
    var Wg = " +lat_0=42.71944444444445";
    var Wh = " +lat_1=44.97785689861112";
    var Wi = " +lat_0=44.97785689861112";
    var Wj = " +lat_1=43.46254664583333";
    var Wk = " +lat_0=43.46254664583333";
    var Wl = " +lon_0=-90.9388888888889";
    var Wm = " +lat_0=41.47222222222222";
    var Wn = " +lat_0=45.88333333333333";
    var Wo = " +lat_0=44.40833333333333";
    var Wp = " +lat_1=44.87228112638889";
    var Wq = " +lat_0=44.87228112638889";
    var Wr = " +lat_0=45.43888888888888";
    var Ws = " +lat_0=44.00555555555555";
    var Wt = " +lat_0=41.41111111111111";
    var Wu = " +lat_1=42.63756227694444";
    var Wv = " +lat_0=42.63756227694444";
    var Ww = " +lat_1=43.80700011777778";
    var Wx = " +lat_0=43.80700011777778";
    var Wy = " +lat_0=42.53888888888888";
    var Wz = " +lat_0=45.43333333333333";
    var XA = " +lat_0=44.25333512777778";
    var XB = " +lat_0=42.21666666666667";
    var XC = " +lat_0=43.26666666666667";
    var XD = " +lat_0=43.45111111111111";
    var XE = " +lat_1=45.15423710527778";
    var XF = " +lat_0=45.15423710527778";
    var XG = " +lat_0=44.84444444444445";
    var XH = " +lat_1=44.90090442361111";
    var XI = " +lat_0=44.90090442361111";
    var XJ = " +lat_0=44.69166666666666";
    var XK = " +lat_0=44.71666666666667";
    var XL = " +lat_1=44.00007392861111";
    var XM = " +lat_0=44.00007392861111";
    var XN = " +lat_0=44.39722222222222";
    var XO = " +lat_1=45.70422377027778";
    var XP = " +lat_0=45.70422377027778";
    var XQ = " +lat_1=44.63614887194444";
    var XR = " +lat_0=44.63614887194444";
    var XS = " +lat_0=44.66111111111111";
    var XT = " +lat_1=44.41682397527777";
    var XU = " +lat_0=44.41682397527777";
    var XV = " +lat_0=44.55555555555555";
    var XW = " +lat_0=41.94444444444444";
    var XX = " +lat_0=43.91944444444444";
    var XY = " +lat_0=42.81944444444445";
    var XZ = " +lat_1=45.90009913138888";
    var Xa = " +lat_0=45.90009913138888";
    var Xb = " +lat_1=45.17782208583333";
    var Xc = " +lat_0=45.17782208583333";
    var Xd = " +lat_0=43.16111111111111";
    var Xe = " +lat_1=43.57503293972223";
    var Xf = " +lat_0=43.57503293972223";
    var Xg = " +lat_1=46.07784409055556";
    var Xh = " +lat_0=46.07784409055556";
    var Xi = " +lat_1=42.66946209694444";
    var Xj = " +lat_0=42.66946209694444";
    var Xk = " +lat_1=45.96121983333334";
    var Xl = " +lat_0=45.96121983333334";
    var Xm = " +lat_0=42.91805555555555";
    var Xn = " +lat_0=42.56944444444445";
    var Xo = " +lat_0=43.42027777777778";
    var Xp = " +lat_1=44.11394404583334";
    var Xq = " +lat_0=44.11394404583334";
    var Xr = " +lat_1=44.36259546944444";
    var Xs = " +lat_0=44.36259546944444";
    var Xt = " +lat_1=44.10000000000001";
    var Xu = " +lat_0=44.10000000000001";
    var Xv = " +lat_1=42.16500000000001";
    var Xw = " +lat_0=42.16500000000001";
    var Xx = " +lat_0=52.15616055555555";
    var Xy = " +lat_2=48.73333333333333";
    var Xz = " +zone=3";
    var YA = " +lat_0=53.5";
    var YB = " +k=0.999923";
    var YC = " +x_0=850000";
    var YD = " +x_0=830000";
    var YE = " +lon_0=16.5";
    var YF = " +x_0=520000";
    var YG = " +lat_2=31.5";
    var YH = " +lon_0=10.5";
    var YI = " +lat_1=44.5";
    var YJ = " +lon_0=-153";
    var YK = " +lon_0=-135";
    var YL = " +x_0=750000";
    var YM = " +lat_0=43.5";
    var YN = " +lon_0=-142";
    var YO = " +lon_0=-146";
    var YP = " +lon_0=-162";
    var YQ = " +lon_0=-166";
    var YR = " +lon_0=-176";
    var YS = " +lat_2=39.5";
    var YT = " +lon_0=-129";
    var YU = " +k_0=1.0002";
    var YV = " +k=1.000023";
    var YW = " +lon_0=-121";
    var YX = " +k=1.000175";
    var YY = " +lat_0=45.5";
    var YZ = " +k=1.000155";
    var Ya = " +lat_2=37.5";
    var Yb = " +lat_1=48.5";
    var Yc = " +k=1.000029";
    var Yd = " +lat_0=39.6";
    var Ye = " +k=1.000013";
    var Yf = " +k=1.000022";
    var Yg = " +lat_0=40.7";
    var Yh = " +lat_0=39.3";
    var Yi = " +lat_0=37.8";
    var Yj = " +lat_0=38.9";
    var Yk = " +lon_0=-5.4";
    var Yl = " +y_0=626907.39";
    var Ym = " +b=6356571.996";
    var Yn = " +a=6377295.664";
    var Yo = " +lon_0=5.38763888888889";
    var Yp = " +y_0=-4600000.00001208";
    var Yq = " +y_0=1889763.779527559";
    var Yr = " +y_0=99999.99999960001";
    var Ys = " +x_0=120091.4401828804";
    var Yt = " +lon_0=72";
    var Yu = " +lat_0=50";
    var Yv = " +lat_1=50";
    var Yw = " +lat_1=35";
    var Yx = " +lon_0=22";
    var Yy = " +lat_1=34";
    var Yz = " +lonc=115";
    var ZA = " +lat_0=-9";
    var ZB = " +lat_0=23";
    var ZC = " +lat_1=85";
    var ZD = " +lat_2=69";
    var ZE = " +lat_1=69";
    var ZF = " +lat_2=61";
    var ZG = " +lon_0=34";
    var ZH = " +lon_0=140.25";
    var ZI = " +lon_0=142.25";
    var ZJ = " +lon_0=144.25";
    var ZK = " +x_0=47500000";
    var ZL = " +y_0=-3000000";
    var ZM = " +pm=2.337208333333333";
    var ZN = " +x_0=7000000.00000248";
    var ZO = " +lon_0=6";
    var ZP = " +k=0.997";
    var ZQ = " +lon_0=106";
    var ZR = " +lon_0=154";
    var ZS = " +lon_0=156";
    var ZT = " +lat_2=-36";
    var ZU = " +lon_0=119";
    var ZV = " +lon_0=121";
    var ZW = " +lon_0=166";
    var ZX = " +a=6371228";
    var ZY = " +b=6371228";
    var ZZ = " +a=6378273";
    var Za = " +lat_0=-44";
    var Zb = " +pm=lisbon";
    var Zc = " +lon_0=-57";
    var Zd = " +lon_0=-56";
    var Ze = " +k=1.00007";
    var Zf = " +lonc=-123";
    var Zg = " +alpha=295";
    var Zh = " +gamma=295";
    var Zi = " +k=1.00011";
    var Zj = " +k=1.00005";
    var Zk = " +k=1.00013";
    var Zl = " +x_0=30000";
    var Zm = " +k=1.00001";
    var Zn = " +k=1.00003";
    var Zo = " +y_0=130000.00001472";
    var Zp = " +x_0=119999.99999952";
    var Zq = " +y_0=-2999999.999988";
    var Zr = " +x_0=-299999.9999988";
    var Zs = " +lat_1=43.0695160375";
    var Zt = " +lat_0=43.0695160375";
    var Zu = " +lat_1=43.3223129275";
    var Zv = " +lat_0=43.3223129275";
    var Zw = " +k=1.0000067";
    var Zx = " +a=6378298.3";
    var Zy = " +lon_0=-66.5";
    var Zz = " +lon_0=129.5";
    var aA = " +lon_0=138.5";
    var aB = " +x_0=2300000";
    var aC = " +x_0=3300000";
    var aD = " +x_0=4300000";
    var aE = " +y_0=7500000";
    var aF = " +lonc=102.25";
    var aG = " +y_0=1166200";
    var aH = " +x_0=3000000";
    var aI = " +lat_1=46.25";
    var aJ = " +ellps=WGS66";
    var aK = " +ellps=GRS67";
    var aL = " +lat_1=34.65";
    var aM = " +y_0=59999.99999976";
    var aN = " +y_0=30000.00001512";
    var aO = " +x_0=59999.99999976";
    var aP = " +x_0=30000.00001512";
    var aQ = " +lat_1=43.200055605";
    var aR = " +lat_0=43.200055605";
    var aS = " +y_0=65379.0134283";
    var aT = " +alpha=323.0257905";
    var aU = " +alpha=53.31580995";
    var aV = " +x_0=10000.0000152";
    module2.exports = [2e3, D + L + NU + EP + u + N + c + E + A, 1, D + L + NU + EP + u + N + c + TI + E + A, 1, D + L + NU + EP + u + N + c + TJ + E + A, 1, D + L + NU + EP + u + N + c + TK + E + A, 1, D + L + NU + EP + u + N + c + TL + E + A, 1, D + L + NU + EP + u + N + c + UB + E + A, 1, D + L + NU + EP + u + N + c + Sv + E + A, 1, D + L + NU + EP + u + N + c + Ps + E + A, 2, D + L + Tf + V + Ab + N + i + E + A, 1, D + L + RQ + V + Ab + N + i + E + A, 1, D + L + RR + V + Ab + N + i + E + A, 1, D + L + Tg + V + Ab + N + i + E + A, 1, D + L + IL + V + Ab + N + i + E + A, 1, D + L + Th + V + Ab + N + i + E + A, 1, D + L + Ti + V + Ab + N + i + E + A, 1, D + L + Ga + V + Ab + N + i + E + A, 1, D + L + Th + V + Ab + N + i + E + A, 1, D + L + Ti + V + Ab + N + i + E + A, 1, D + L + Ga + V + Ab + N + i + E + A, 1, D + L + ET + V + Ab + N + i + E + A, 1, D + L + CR + V + Ab + N + i + E + A, 1, D + L + NV + V + Ab + N + i + E + A, 1, D + L + Jh + V + Ab + N + i + E + A, 1, D + L + Bu + V + Ab + N + i + E + A, 1, D + L + Rs + V + Ab + N + i + E + A, 1, D + L + OZ + V + Ab + N + i + E + A, 1, I + NP + i + E + A, 1, I + NQ + i + E + A, 1, I + Ik + i + E + A, 1, I + IC + i + E + A, 1, I + Ik + i + E + A, 1, I + IC + i + E + A, 1, I + Hi + i + E + A, 1, I + Gz + i + E + A, 1, I + ID + i + E + A, 4, D + Ou + Ov + Zw + UV + Yl + C + UC + E + A, 1, I + Oq + c + JO + E + A, 1, I + Oq + c + IE + E + A, 1, I + KA + c + JO + E + A, 1, I + KA + c + IE + E + A, 1, D + L + EN + " +k=1" + Hs + N + M + HG + E + A, 1, D + L + Fy + " +k=1" + Ht + N + M + HG + E + A, 1, D + L + Gj + " +k=1" + s + N + Gk + j + B + E + A, 1, D + L + UE + " +k=1" + s + N + Gk + j + B + E + A, 1, D + L + RI + " +k=1" + s + N + Gk + j + B + E + A, 1, D + L + Gl + " +k=1" + s + N + Gk + j + B + E + A, 1, D + L + SP + " +k=1" + s + N + Gk + j + B + E + A, 1, D + L + RJ + " +k=1" + s + N + Gk + j + B + E + A, 1, D + L + HO + " +k=1" + s + N + Gk + j + B + E + A, 1, D + L + " +lon_0=29 +k=1" + s + N + Gk + j + B + E + A, 1, D + L + QQ + " +k=1" + s + N + Gk + j + B + E + A, 1, D + L + IG + " +k=1" + s + N + Gk + j + B + E + A, 1, Pu + Kj + Ow + " +k_0=1 +x_0=2600000" + Tj + Y + Py + E + A, 1, CU + " +lat_0=27.51882880555555 +lonc=52.60353916666667 +alpha=0.5716611944444444 +k=0.999895934 +x_0=658377.437 +y_0=3044969.194 +gamma=0.5716611944444444" + R + Pz + E + A, 1, I + JZ + R + Gy + E + A, 1, I + JM + R + Gy + E + A, 1, I + Me + R + Gy + E + A, 1, I + Rb + R + Gy + E + A, 1, H + " +lat_1=40" + Fs + HN + " +k_0=0.9988085293" + a + Qn + Zx + Qy + " +pm=madrid" + E + A, 3, Rp + SS + " +lon_0=42.5" + Kk + V + s + N + Y + Gh + Ls + E + A, 1, Ck + " +lat_0=11.25217861111111 +lon_0=-60.68600888888889 +x_0=37718.66159325 +y_0=36209.91512952" + Ee + Ef + Vo + A, 1, I + Gz + R + QA + E + A, 1, D + L + KB + V + h + N + R + v + E + A, 1, D + L + " +lon_0=11" + V + h + N + R + v + E + A, 1, D + L + " +lon_0=13" + V + h + N + R + v + E + A, 1, D + L + Gj + V + h + N + R + v + E + A, 1, D + L + UE + V + h + N + R + v + E + A, 1, D + L + RI + V + h + N + R + v + E + A, 1, D + L + Gl + V + h + N + R + v + E + A, 1, D + L + SP + V + h + N + R + v + E + A, 1, D + L + RJ + V + h + N + R + v + E + A, 1, I + JN + R + v + E + A, 1, I + KC + R + v + E + A, 1, I + NR + R + v + E + A, 1, I + Ki + R + v + E + A, 1, D + m + MP + " +k=1" + Ci + N + R + E + A, 1, D + m + MP + " +k=1" + Ci + N + R + SD + E + A, 1, D + m + MP + " +k=1" + Ci + N + R + OV + E + A, 1, I + Hi + o + R + OV + E + A, 3, D + L + IH + AP + O + N + R + v + E + A, 1, D + L + " +lon_0=11" + AP + O + N + AU + BN + Gi + E + A, 1, I + JZ + j + B + E + A, 1, I + JM + j + B + E + A, 3, D + L + ZQ + " +k=1" + O + N + M + HG + E + A, 1, D + L + ZQ + AP + O + N + T + Q + E + A, 1, I + Ja + R + TM + E + A, 1, D + Ch + Ed + " +k=1" + h + Ae + Y + E + A, 1, D + Ch + Rt + " +k=1" + h + Ae + Y + E + A, 1, D + Ch + Ru + " +k=1" + h + Ae + Y + E + A, 1, Ck + " +lat_0=25.38236111111111 +lon_0=50.76138888888889" + BU + EK + Gn + E + A, 1, D + L + II + AP + O + N + C + Qb + E + A, 1, H + Kl + Km + KN + " +k_0=1" + s + " +y_0=-52684.972" + R + E + A, 1, H + Kl + Km + KN + " +k_0=1" + h + " +y_0=147315.028" + R + E + A, 1, H + Kl + Km + KN + " +k_0=1" + O + " +y_0=447315.028" + R + E + A, 1, H + Kl + Km + KN + " +k_0=1 +x_0=-17044 +y_0=-23139.97" + R + E + A, 1, D + " +lat_0=-36.87972222222222 +lon_0=174.7641666666667" + V + u + CO + C + B + E + A, 1, D + " +lat_0=-37.76111111111111 +lon_0=176.4661111111111 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-38.62444444444444 +lon_0=177.8855555555556 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-39.65083333333333 +lon_0=176.6736111111111 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-39.13555555555556 +lon_0=174.2277777777778 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-39.51222222222222 +lon_0=175.64 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-40.24194444444444 +lon_0=175.4880555555555 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-40.92527777777777 +lon_0=175.6472222222222 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-41.3011111111111 +lon_0=174.7763888888889 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-40.71472222222223 +lon_0=172.6719444444444 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-41.27444444444444 +lon_0=173.2991666666667 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-41.28972222222222 +lon_0=172.1088888888889 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-41.81055555555555 +lon_0=171.5811111111111 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-42.33361111111111 +lon_0=171.5497222222222 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-42.68888888888888 +lon_0=173.01 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-41.54444444444444 +lon_0=173.8019444444444 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-42.88611111111111 +lon_0=170.9797222222222 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-43.11 +lon_0=170.2608333333333 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-43.97777777777778 +lon_0=168.6061111111111 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-43.59055555555556 +lon_0=172.7269444444445 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-43.74861111111111 +lon_0=171.3605555555555 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-44.40194444444445 +lon_0=171.0572222222222 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-44.735 +lon_0=169.4675 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-45.13277777777778 +lon_0=168.3986111111111 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-45.56361111111111 +lon_0=167.7386111111111 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-45.81611111111111 +lon_0=170.6283333333333 +k=1" + u + CO + C + B + E + A, 1, D + " +lat_0=-45.86138888888889 +lon_0=170.2825" + Pc + u + CO + C + B + E + A, 1, D + " +lat_0=-46.6 +lon_0=168.3427777777778 +k=1" + u + CO + C + B + E + A, 1, I + MA + o + C + B + E + A, 1, I + Nq + o + C + B + E + A, 1, I + PL + o + C + B + E + A, 1, D + Vp + " +lon_0=-1" + Rv + " +x_0=274319.7391633579" + N + Qj + Ho + NI + NJ + A, 1, D + L + " +lon_0=-1" + AP + O + N + Qj + Ho + NI + E + A, 1, H + UF + Nh + IZ + HJ + s + N + i + E + A, 16, H + LM + " +lat_2=44" + Iq + Or + EW + " +y_0=6600000" + C + B + E + A, 3, D + YA + " +lon_0=-8 +k=0.99982" + a + Mk + C + B + E + A, 1, I + KA + C + B + E + A, 1, D + Vq + " +lon_0=-12 +k=1 +x_0=152399.8550907544" + N + Qj + Ho + NJ + A, 1, D + Vq + " +lon_0=-12 +k=1 +x_0=243839.7681452071 +y_0=182879.8261089053" + Qj + Ho + NJ + A, 1, I + Ja + c + OW + E + A, 1, I + KA + c + OW + E + A, 1, He + IP + CS + s + N + " +a=6370997 +b=6370997" + E + A, 1, D + L + " +lon_0=-5" + AP + O + N + c + JO + E + A, 1, D + L + " +lon_0=-5" + AP + O + N + c + IE + E + A, 4, D + " +lat_0=49.83333333333334" + Vr + " +k=1" + Oa + EK + R + Jx + E + A, 3, GU + " +lat_0=53.00194444444445 +lon_0=21.50277777777778" + UG + " +x_0=4603000 +y_0=5806000" + M + b + E + A, 1, GU + " +lat_0=53.58333333333334 +lon_0=17.00833333333333" + UG + " +x_0=3501000 +y_0=5999000" + M + b + E + A, 1, GU + " +lat_0=51.67083333333333 +lon_0=16.67222222222222" + UG + " +x_0=3703000 +y_0=5627000" + M + b + E + A, 1, D + L + " +lon_0=18.95833333333333 +k=0.999983 +x_0=237000 +y_0=-4700000" + M + b + E + A, 1, D + L + Gj + YB + Eg + N + C + B + E + A, 1, D + L + QR + YB + Jt + N + C + B + E + A, 1, D + L + Gl + YB + IM + N + C + B + E + A, 1, D + L + II + YB + MS + N + C + B + E + A, 1, D + L + RI + " +k=0.9993" + O + " +y_0=-5300000" + C + B + E + A, 8, I + Nr + R + Sw + E + A, 1, I + Os + R + Sx + E + A, 1, I + Os + R + TN + E + A, 3, D + L + " +lon_0=173" + AP + " +x_0=1600000" + Ak + C + B + E + A, 2, I + TV + o + C + B + E + A, 1, D + L + " +lon_0=9.5" + CP + h + N + C + B + E + A, 1, D + L + IH + CP + O + N + C + B + E + A, 1, D + L + Gj + " +k=1" + HT + N + C + B + E + A, 2, GU + Iq + Zy + ST + AI + CO + Pd + Gq + E + A, 1, I + IC + C + B + E + A, 1, I + Hi + C + B + E + A, 1, I + Gz + C + B + E + A, 1, H + " +lat_1=35.25 +lat_2=36.41666666666666 +lat_0=34.66666666666666" + MQ + Z + Pv + X + J + A, 1, H + Az + DV + DM + Jo + O + N + C + B + E + A, 1, D + L + HO + " +k=1" + MT + N + R + n + E + A, 1, D + L + Ia + " +k=1" + LY + N + R + n + E + A, 1, D + L + IG + " +k=1" + Jp + N + R + n + E + A, 1, D + L + PN + " +k=1" + LZ + N + R + n + E + A, 1, D + L + LN + " +k=1" + HU + N + R + n + E + A, 1, D + L + PO + " +k=1" + Gw + N + R + n + E + A, 1, D + L + JS + " +k=1" + Hu + N + R + n + E + A, 1, D + L + Ia + AP + O + N + C + B + E + A, 2, I + JN + AU + BN + RD + E + A, 1, I + Io + R + NG + E + A, 1, I + MB + R + NG + E + A, 2, I + Hi + Pd + Gq + E + A, 1, I + Gz + Pd + Gq + E + A, 2, D + Bl + Cn + V + EX + N + C + B + t + A, 1, D + Bl + Co + V + EX + N + C + B + t + A, 1, D + Bl + Iv + BG + EX + N + C + B + t + A, 1, H + DW + Jn + y + HA + Ac + AD + C + B + J + A, 1, H + DX + DY + AA + HA + Ac + AD + C + B + J + A, 1, H + Ap + DZ + Ml + AJ + Ac + AD + C + B + J + A, 1, H + LO + QS + Da + Mm + Ac + AD + C + B + J + A, 1, H + Db + Dc + Mn + Ir + Ac + AD + C + B + J + A, 1, H + Dd + De + Df + Iw + Ac + AD + C + B + J + A, 1, H + Eh + Ei + y + Ba + Bw + CL + C + B + J + A, 1, H + LP + LQ + CY + Ba + Bw + CL + C + B + J + A, 1, H + Ap + Dg + f + Ba + Bw + CL + C + B + J + A, 1, H + Dh + Mo + Di + Jq + MC + MD + C + B + J + A, 1, D + Ch + Cp + Mp + AE + N + C + B + J + A, 1, D + Aq + CR + Am + AE + N + C + B + J + A, 1, D + Aq + Ob + Am + AE + N + C + B + J + A, 1, H + LR + Dj + QT + LS + a + N + C + B + J + A, 1, D + Gm + Cq + V + AE + N + C + B + J + A, 1, D + Gm + Cr + V + CM + N + C + B + J + A, 1, D + p + Cs + BJ + AE + N + C + B + J + A, 1, D + p + Jb + BJ + AF + N + C + B + J + A, 1, D + p + Ix + BG + ME + N + C + B + J + A, 3, H + Az + DV + DM + Jo + AF + N + C + B + J + A, 1, H + Ej + Ek + AB + EY + AF + AD + C + B + J + A, 1, H + MU + Nz + AA + Ld + MF + N + C + B + J + A, 1, H + El + Dk + Ip + GE + AE + Mk + C + B + J + A, 1, H + Em + En + Ip + IL + AF + N + C + B + J + A, 1, H + Eo + Ep + Eq + Jh + MG + N + C + B + t + A, 1, H + OA + Er + Es + BE + MH + N + C + B + t + A, 1, H + Bq + OB + Fo + BE + OT + N + C + B + t + A, 1, D + Hj + Ct + CP + BF + N + C + B + J + A, 1, D + Hj + Bx + CP + CM + N + C + B + J + A, 1, H + LM + RK + MV + IS + DR + N + C + B + t + A, 1, D + Bl + Cu + Hm + OC + N + C + B + J + A, 1, D + Bl + Iy + V + AF + N + C + B + J + A, 1, D + Bl + Cv + Iz + MI + N + C + B + J + A, 1, D + BA + Gp + V + Bn + N + C + B + J + A, 1, D + Fs + Cw + Ad + MJ + N + C + B + J + A, 1, D + Fs + Cx + Ad + MK + N + C + B + J + A, 1, H + Dl + Dm + BB + Oc + BF + N + C + B + J + A, 1, H + Et + Eu + LT + NW + Z + N + C + B + J + A, 1, H + BH + Ev + Ib + EZ + DR + N + C + B + t + A, 1, H + Ew + Ex + Be + EZ + DR + N + C + B + t + A, 1, H + Dn + Ey + QU + Fl + a + N + C + B + J + A, 1, H + Ez + FA + Do + Fl + a + N + C + B + J + A, 1, H + PP + CZ + AK + AJ + KL + N + C + B + t + A, 1, H + PQ + Ca + p + AJ + KM + N + C + B + t + A, 1, H + MW + FB + BB + Ea + a + N + C + B + J + A, 1, H + Dp + Dq + y + Ea + a + N + C + B + J + A, 1, H + FC + OD + Dr + CR + OE + N + C + B + t + A, 1, H + FD + MX + BC + MQ + a + N + C + B + J + A, 1, H + FE + MY + QV + Jr + AE + CN + C + B + J + A, 1, H + FF + FG + Ds + CV + a + Gr + C + B + J + A, 1, H + FH + FI + Cb + Ag + CM + Fq + C + B + J + A, 1, H + FJ + FK + Dt + Ji + a + Ne + C + B + J + A, 1, H + CD + CE + Cc + CV + BF + Nf + C + B + J + A, 1, H + AY + CF + Br + BI + Gd + Pw + C + B + t + A, 1, H + JF + CG + AQ + BI + Gd + RY + C + B + t + A, 1, H + JG + CH + f + BI + Gd + RZ + C + B + t + A, 1, H + OF + FL + AA + GF + Gs + Gr + C + B + J + A, 1, H + Az + Du + AB + GF + Gs + CN + C + B + J + A, 1, H + BH + OG + Ib + Cy + AF + N + C + B + J + A, 1, H + FM + FN + Dv + AJ + AF + N + C + B + J + A, 1, H + FO + FP + Dw + Bu + a + N + C + B + J + A, 1, H + Jc + MZ + AL + Bu + a + N + C + B + J + A, 1, H + FQ + FR + PR + Bu + a + N + C + B + J + A, 1, GU + " +lat_0=47.25" + Qk + ST + EW + Is + Pd + Gq + E + A, 4, D + L + RQ + V + DP + N + Pd + Gq + E + A, 1, D + L + RR + V + Eg + N + Pd + Gq + E + A, 13, D + L + " +lon_0=109" + AP + O + Ak + Y + Cj + E + A, 1, D + L + " +lon_0=116" + AP + O + Ak + S + E + A, 1, D + L + Il + AP + O + Ak + S + E + A, 1, D + L + ZO + AP + O + N + S + E + A, 1, I + KC + c + E + A, 1, I + KC + c + E + A, 1, Ck + Vs + UX + " +x_0=86501.46392052001" + aS + Ee + Ef + JK + ML + A, 1, I + Hi + o + R + Bs + E + A, 1, I + Gz + o + R + Bs + E + A, 1, H + " +lat_1=9 +lat_2=3 +lat_0=6" + Pe + BZ + AH + R + AX + E + A, 1, H + " +lat_1=17 +lat_2=33 +lat_0=25.08951" + SQ + s + N + R + Cm + E + A, 1, D + L + HO + " +k=1" + O + N + R + n + E + A, 1, D + L + Ia + " +k=1" + O + N + R + n + E + A, 1, D + L + IG + " +k=1" + O + N + R + n + E + A, 1, D + L + PN + " +k=1" + O + N + R + n + E + A, 1, D + L + LN + " +k=1" + O + N + R + n + E + A, 1, D + L + PO + " +k=1" + O + N + R + n + E + A, 1, D + L + JS + " +k=1" + O + N + R + n + E + A, 1, D + Vt + Vu + " +k=1 +x_0=836694.05 +y_0=819069.8" + R + Jg + E + A, 1, D + L + HP + " +k=1" + HU + N + As + d + E + A, 1, D + L + HQ + " +k=1" + Gw + N + As + d + E + A, 1, D + L + Hd + " +k=1" + Hu + N + As + d + E + A, 1, D + L + HR + " +k=1" + Hv + N + As + d + E + A, 1, D + L + HS + " +k=1" + It + N + As + d + E + A, 1, D + L + EN + " +k=1" + Hs + N + As + d + E + A, 1, D + L + Fy + " +k=1" + Ht + N + As + d + E + A, 1, D + L + Fm + " +k=1" + HV + N + As + d + E + A, 1, D + L + Fr + " +k=1" + Hw + N + As + d + E + A, 1, D + L + Ed + " +k=1" + HW + N + As + d + E + A, 1, D + L + Fn + " +k=1" + Hx + N + As + d + E + A, 1, D + L + HP + " +k=1" + O + N + As + d + E + A, 1, D + L + HQ + " +k=1" + O + N + As + d + E + A, 1, D + L + Hd + " +k=1" + O + N + As + d + E + A, 1, D + L + HR + " +k=1" + O + N + As + d + E + A, 1, D + L + HS + " +k=1" + O + N + As + d + E + A, 1, D + L + EN + " +k=1" + O + N + As + d + E + A, 1, D + L + Fy + " +k=1" + O + N + As + d + E + A, 1, D + L + Fm + " +k=1" + O + N + As + d + E + A, 1, D + L + Fr + " +k=1" + O + N + As + d + E + A, 1, D + L + Ed + " +k=1" + O + N + As + d + E + A, 1, D + L + Fn + " +k=1" + O + N + As + d + E + A, 1, D + L + HP + " +k=1" + Hy + N + As + d + E + A, 1, D + L + Lt + " +k=1" + Hz + N + As + d + E + A, 1, D + L + HQ + " +k=1" + IA + N + As + d + E + A, 1, D + L + Ni + " +k=1" + IB + N + As + d + E + A, 1, D + L + Hd + " +k=1" + Gx + N + As + d + E + A, 1, D + L + Hq + " +k=1" + IT + N + As + d + E + A, 1, D + L + HR + " +k=1" + Gc + N + As + d + E + A, 1, D + L + Mj + " +k=1" + IU + N + As + d + E + A, 1, D + L + HS + " +k=1" + Iu + N + As + d + E + A, 1, D + L + Jj + " +k=1" + Mu + N + As + d + E + A, 1, D + L + EN + " +k=1" + Mv + N + As + d + E + A, 1, D + L + Le + " +k=1" + Mw + N + As + d + E + A, 1, D + L + Fy + " +k=1" + Mx + N + As + d + E + A, 1, D + L + Im + " +k=1" + My + N + As + d + E + A, 1, D + L + Fm + " +k=1" + Mz + N + As + d + E + A, 1, D + L + KF + " +k=1" + NA + N + As + d + E + A, 1, D + L + Fr + " +k=1" + NB + N + As + d + E + A, 1, D + L + Jk + " +k=1" + Oh + N + As + d + E + A, 1, D + L + Ed + " +k=1" + NC + N + As + d + E + A, 1, D + L + Il + " +k=1" + Oi + N + As + d + E + A, 1, D + L + Fn + " +k=1" + ND + N + As + d + E + A, 1, D + L + HP + " +k=1" + O + N + As + d + E + A, 1, D + L + Lt + " +k=1" + O + N + As + d + E + A, 1, D + L + HQ + " +k=1" + O + N + As + d + E + A, 1, D + L + Ni + " +k=1" + O + N + As + d + E + A, 1, D + L + Hd + " +k=1" + O + N + As + d + E + A, 1, D + L + Hq + " +k=1" + O + N + As + d + E + A, 1, D + L + HR + " +k=1" + O + N + As + d + E + A, 1, D + L + Mj + " +k=1" + O + N + As + d + E + A, 1, D + L + HS + " +k=1" + O + N + As + d + E + A, 1, D + L + Jj + " +k=1" + O + N + As + d + E + A, 1, D + L + EN + " +k=1" + O + N + As + d + E + A, 1, D + L + Le + " +k=1" + O + N + As + d + E + A, 1, D + L + Fy + " +k=1" + O + N + As + d + E + A, 1, D + L + Im + " +k=1" + O + N + As + d + E + A, 1, D + L + Fm + " +k=1" + O + N + As + d + E + A, 1, D + L + KF + " +k=1" + O + N + As + d + E + A, 1, D + L + Fr + " +k=1" + O + N + As + d + E + A, 1, D + L + Jk + " +k=1" + O + N + As + d + E + A, 1, D + L + Ed + " +k=1" + O + N + As + d + E + A, 1, D + L + Il + " +k=1" + O + N + As + d + E + A, 1, D + L + Fn + " +k=1" + O + N + As + d + E + A, 1, D + L + Gl + " +k=1" + AV + N + R + At + E + A, 1, D + L + II + " +k=1" + Ci + N + R + At + E + A, 1, D + L + HO + " +k=1" + Bo + N + R + At + E + A, 1, D + L + Ia + " +k=1" + DP + N + R + At + E + A, 1, D + L + JS + " +k=1" + MS + N + M + NK + E + A, 1, D + L + PS + " +k=1" + MT + N + M + NK + E + A, 1, D + L + KB + " +k=1" + Bo + N + M + Ar + E + A, 1, D + L + IH + " +k=1" + DP + N + M + Ar + E + A, 1, D + L + Gj + " +k=1" + Eg + N + M + Ar + E + A, 2, D + L + HP + " +k=1" + Hy + N + M + U + E + A, 1, D + L + Lt + " +k=1" + Hz + N + M + U + E + A, 1, D + L + HQ + " +k=1" + IA + N + M + U + E + A, 1, D + L + Ni + " +k=1" + IB + N + M + U + E + A, 1, D + L + Hd + " +k=1" + Gx + N + M + U + E + A, 1, D + L + Hq + " +k=1" + IT + N + M + U + E + A, 1, D + L + HR + " +k=1" + Gc + N + M + U + E + A, 1, D + L + Mj + " +k=1" + IU + N + M + U + E + A, 1, D + L + HS + " +k=1" + Iu + N + M + U + E + A, 1, D + L + Jj + " +k=1" + Mu + N + M + U + E + A, 1, D + L + EN + " +k=1" + Mv + N + M + U + E + A, 1, D + L + Le + " +k=1" + Mw + N + M + U + E + A, 1, D + L + Fy + " +k=1" + Mx + N + M + U + E + A, 1, D + L + Im + " +k=1" + My + N + M + U + E + A, 1, D + L + Fm + " +k=1" + Mz + N + M + U + E + A, 1, D + L + KF + " +k=1" + NA + N + M + U + E + A, 1, D + L + Fr + " +k=1" + NB + N + M + U + E + A, 1, D + L + Jk + " +k=1" + Oh + N + M + U + E + A, 1, D + L + Ed + " +k=1" + NC + N + M + U + E + A, 1, D + L + Il + " +k=1" + Oi + N + M + U + E + A, 1, D + L + Fn + " +k=1" + ND + N + M + U + E + A, 1, D + L + HP + " +k=1" + O + N + M + U + E + A, 1, D + L + Lt + " +k=1" + O + N + M + U + E + A, 1, D + L + HQ + " +k=1" + O + N + M + U + E + A, 1, D + L + Ni + " +k=1" + O + N + M + U + E + A, 1, D + L + Hd + " +k=1" + O + N + M + U + E + A, 1, D + L + Hq + " +k=1" + O + N + M + U + E + A, 1, D + L + HR + " +k=1" + O + N + M + U + E + A, 1, D + L + Mj + " +k=1" + O + N + M + U + E + A, 1, D + L + HS + " +k=1" + O + N + M + U + E + A, 1, D + L + Jj + " +k=1" + O + N + M + U + E + A, 1, D + L + EN + " +k=1" + O + N + M + U + E + A, 1, D + L + Le + " +k=1" + O + N + M + U + E + A, 1, D + L + Fy + " +k=1" + O + N + M + U + E + A, 1, D + L + Im + " +k=1" + O + N + M + U + E + A, 1, D + L + Fm + " +k=1" + O + N + M + U + E + A, 1, D + L + KF + " +k=1" + O + N + M + U + E + A, 1, D + L + Fr + " +k=1" + O + N + M + U + E + A, 1, D + L + Jk + " +k=1" + O + N + M + U + E + A, 1, D + L + Ed + " +k=1" + O + N + M + U + E + A, 1, D + L + Il + " +k=1" + O + N + M + U + E + A, 1, D + L + Fn + " +k=1" + O + N + M + U + E + A, 1, D + PT + Zz + V + s + N + C + B + E + A, 1, D + PT + NX + V + s + N + C + B + E + A, 1, D + GM + Ox + V + s + N + C + B + E + A, 1, D + PT + Tk + V + s + N + C + B + E + A, 1, D + GM + Oy + V + s + N + C + B + E + A, 1, D + GM + Rw + V + s + N + C + B + E + A, 1, D + GM + Oz + V + s + N + C + B + E + A, 1, D + GM + aA + V + s + N + C + B + E + A, 1, D + GM + PA + V + s + N + C + B + E + A, 1, D + Fs + PB + V + s + N + C + B + E + A, 1, D + IZ + ZH + V + s + N + C + B + E + A, 1, D + IZ + ZI + V + s + N + C + B + E + A, 1, D + IZ + ZJ + V + s + N + C + B + E + A, 1, D + IQ + " +lon_0=142" + V + s + N + C + B + E + A, 1, D + IQ + Pj + V + s + N + C + B + E + A, 1, D + IQ + " +lon_0=124" + V + s + N + C + B + E + A, 1, D + IQ + NX + V + s + N + C + B + E + A, 1, D + " +lat_0=20" + Rw + V + s + N + C + B + E + A, 1, D + IQ + ZR + V + s + N + C + B + E + A, 1, D + L + Gl + " +k=1" + DP + N + M + E + A, 1, D + L + Gl + " +k=1" + O + N + M + G + E + A, 1, D + L + HO + " +k=1" + O + N + M + G + E + A, 1, D + L + IG + " +k=1" + O + N + M + G + E + A, 1, D + L + LN + " +k=1" + O + N + M + G + E + A, 1, D + L + JS + " +k=1" + O + N + M + G + E + A, 1, D + L + PS + " +k=1" + O + N + M + G + E + A, 1, D + L + RL + " +k=1" + O + N + M + G + E + A, 1, D + L + QW + " +k=1" + O + N + M + G + E + A, 1, D + L + RM + " +k=1" + O + N + M + G + E + A, 1, D + L + HP + " +k=1" + O + N + M + G + E + A, 1, D + L + HQ + " +k=1" + O + N + M + G + E + A, 1, D + L + Hd + " +k=1" + O + N + M + G + E + A, 1, D + L + HR + " +k=1" + O + N + M + G + E + A, 1, D + L + HS + " +k=1" + O + N + M + G + E + A, 1, D + L + EN + " +k=1" + O + N + M + G + E + A, 1, D + L + Fy + " +k=1" + O + N + M + G + E + A, 1, D + L + Fm + " +k=1" + O + N + M + G + E + A, 1, D + L + Fr + " +k=1" + O + N + M + G + E + A, 1, D + L + Ed + " +k=1" + O + N + M + G + E + A, 1, D + L + Fn + " +k=1" + O + N + M + G + E + A, 1, D + L + Pf + " +k=1" + O + N + M + G + E + A, 1, D + L + Od + " +k=1" + O + N + M + G + E + A, 1, D + L + NY + " +k=1" + O + N + M + G + E + A, 1, D + L + Pg + " +k=1" + O + N + M + G + E + A, 1, D + L + NZ + " +k=1" + O + N + M + G + E + A, 1, D + L + Lf + " +k=1" + O + N + M + G + E + A, 1, D + L + KG + " +k=1" + O + N + M + G + E + A, 1, D + L + KH + " +k=1" + O + N + M + G + E + A, 1, D + L + Lh + " +k=1" + O + N + M + G + E + A, 3, D + L + Gl + " +k=1" + O + N + M + F + E + A, 1, D + L + HO + " +k=1" + O + N + M + F + E + A, 1, D + L + IG + " +k=1" + O + N + M + F + E + A, 1, D + L + LN + " +k=1" + O + N + M + F + E + A, 1, D + L + JS + " +k=1" + O + N + M + F + E + A, 1, D + L + PS + " +k=1" + O + N + M + F + E + A, 1, D + L + RL + " +k=1" + O + N + M + F + E + A, 1, D + L + QW + " +k=1" + O + N + M + F + E + A, 1, D + L + RM + " +k=1" + O + N + M + F + E + A, 1, D + L + HP + " +k=1" + O + N + M + F + E + A, 1, D + L + HQ + " +k=1" + O + N + M + F + E + A, 1, D + L + Hd + " +k=1" + O + N + M + F + E + A, 1, D + L + HR + " +k=1" + O + N + M + F + E + A, 1, D + L + HS + " +k=1" + O + N + M + F + E + A, 1, D + L + EN + " +k=1" + O + N + M + F + E + A, 1, D + L + Fy + " +k=1" + O + N + M + F + E + A, 1, D + L + Fm + " +k=1" + O + N + M + F + E + A, 1, D + L + Fr + " +k=1" + O + N + M + F + E + A, 1, D + L + Ed + " +k=1" + O + N + M + F + E + A, 1, D + L + Fn + " +k=1" + O + N + M + F + E + A, 1, D + L + Pf + " +k=1" + O + N + M + F + E + A, 1, D + L + Od + " +k=1" + O + N + M + F + E + A, 1, D + L + NY + " +k=1" + O + N + M + F + E + A, 1, D + L + Pg + " +k=1" + O + N + M + F + E + A, 1, D + L + NZ + " +k=1" + O + N + M + F + E + A, 1, D + L + Lf + " +k=1" + O + N + M + F + E + A, 1, D + L + KG + " +k=1" + O + N + M + F + E + A, 1, D + L + KH + " +k=1" + O + N + M + F + E + A, 1, D + L + Lh + " +k=1" + O + N + M + F + E + A, 1, D + L + Gl + " +k=1" + IM + N + M + F + E + A, 1, D + L + II + " +k=1" + MS + N + M + F + E + A, 1, D + L + HO + " +k=1" + MT + N + M + F + E + A, 1, D + L + Ia + " +k=1" + LY + N + M + F + E + A, 1, D + L + IG + " +k=1" + Jp + N + M + F + E + A, 1, D + L + PN + " +k=1" + LZ + N + M + F + E + A, 1, D + L + LN + " +k=1" + HU + N + M + F + E + A, 1, D + L + PO + " +k=1" + Gw + N + M + F + E + A, 1, D + L + JS + " +k=1" + Hu + N + M + F + E + A, 1, D + L + SQ + " +k=1" + Hv + N + M + F + E + A, 1, D + L + PS + " +k=1" + It + N + M + F + E + A, 1, D + L + SR + " +k=1" + Hs + N + M + F + E + A, 1, D + L + RL + " +k=1" + Ht + N + M + F + E + A, 1, D + L + " +lon_0=60 +k=1" + HV + N + M + F + E + A, 1, D + L + QW + " +k=1" + Hw + N + M + F + E + A, 1, D + L + UH + " +k=1" + HW + N + M + F + E + A, 1, D + L + RM + " +k=1" + Hx + N + M + F + E + A, 1, D + L + Yt + " +k=1" + La + N + M + F + E + A, 1, D + L + HP + " +k=1" + Hy + N + M + F + E + A, 1, D + L + Lt + " +k=1" + Hz + N + M + F + E + A, 1, D + L + HQ + " +k=1" + IA + N + M + F + E + A, 1, D + L + Ni + " +k=1" + IB + N + M + F + E + A, 1, D + L + Hd + " +k=1" + Gx + N + M + F + E + A, 1, D + L + Hq + " +k=1" + IT + N + M + F + E + A, 1, D + L + HR + " +k=1" + Gc + N + M + F + E + A, 1, D + L + Mj + " +k=1" + IU + N + M + F + E + A, 1, D + L + HS + " +k=1" + Iu + N + M + F + E + A, 2, D + L + Jj + " +k=1" + Mu + N + M + F + E + A, 1, D + L + EN + " +k=1" + Mv + N + M + F + E + A, 1, D + L + Le + " +k=1" + Mw + N + M + F + E + A, 1, D + L + Fy + " +k=1" + Mx + N + M + F + E + A, 1, D + L + Im + " +k=1" + My + N + M + F + E + A, 1, D + L + Fm + " +k=1" + Mz + N + M + F + E + A, 1, D + L + KF + " +k=1" + NA + N + M + F + E + A, 1, D + L + Fr + " +k=1" + NB + N + M + F + E + A, 1, D + L + Jk + " +k=1" + Oh + N + M + F + E + A, 1, D + L + Ed + " +k=1" + NC + N + M + F + E + A, 1, D + L + Il + " +k=1" + Oi + N + M + F + E + A, 1, D + L + Fn + " +k=1" + ND + N + M + F + E + A, 1, D + L + Rx + " +k=1 +x_0=46500000" + N + M + F + E + A, 1, D + L + Pf + " +k=1" + ZK + N + M + F + E + A, 1, D + L + UN + " +k=1 +x_0=48500000" + N + M + F + E + A, 1, D + L + Od + " +k=1 +x_0=49500000" + N + M + F + E + A, 1, D + L + Oe + " +k=1 +x_0=50500000" + N + M + F + E + A, 1, D + L + NY + " +k=1 +x_0=51500000" + N + M + F + E + A, 1, D + L + ZS + " +k=1 +x_0=52500000" + N + M + F + E + A, 1, D + L + Pg + " +k=1 +x_0=53500000" + N + M + F + E + A, 1, D + L + Ql + " +k=1 +x_0=54500000" + N + M + F + E + A, 1, D + L + NZ + " +k=1 +x_0=55500000" + N + M + F + E + A, 1, D + L + UO + " +k=1 +x_0=56500000" + N + M + F + E + A, 1, D + L + Lf + " +k=1 +x_0=57500000" + N + M + F + E + A, 1, D + L + UP + " +k=1 +x_0=58500000" + N + M + F + E + A, 1, D + L + KG + " +k=1 +x_0=59500000" + N + M + F + E + A, 2, D + L + KH + " +k=1 +x_0=61500000" + N + M + F + E + A, 1, D + L + SU + " +k=1 +x_0=62500000" + N + M + F + E + A, 1, D + L + Lh + " +k=1 +x_0=63500000" + N + M + F + E + A, 1, D + L + SV + " +k=1 +x_0=64500000" + N + M + F + E + A, 1, D + L + Gl + " +k=1" + O + N + M + F + E + A, 1, D + L + II + " +k=1" + O + N + M + F + E + A, 1, D + L + HO + " +k=1" + O + N + M + F + E + A, 1, D + L + Ia + " +k=1" + O + N + M + F + E + A, 1, D + L + IG + " +k=1" + O + N + M + F + E + A, 1, D + L + PN + " +k=1" + O + N + M + F + E + A, 1, D + L + LN + " +k=1" + O + N + M + F + E + A, 1, D + L + PO + " +k=1" + O + N + M + F + E + A, 1, D + L + JS + " +k=1" + O + N + M + F + E + A, 1, D + L + SQ + " +k=1" + O + N + M + F + E + A, 1, D + L + PS + " +k=1" + O + N + M + F + E + A, 1, D + L + SR + " +k=1" + O + N + M + F + E + A, 1, D + L + RL + " +k=1" + O + N + M + F + E + A, 1, D + L + " +lon_0=60 +k=1" + O + N + M + F + E + A, 1, D + L + QW + " +k=1" + O + N + M + F + E + A, 1, D + L + UH + " +k=1" + O + N + M + F + E + A, 1, D + L + RM + " +k=1" + O + N + M + F + E + A, 1, D + L + Yt + " +k=1" + O + N + M + F + E + A, 2, D + L + HP + " +k=1" + O + N + M + F + E + A, 1, D + L + Lt + " +k=1" + O + N + M + F + E + A, 1, D + L + HQ + " +k=1" + O + N + M + F + E + A, 1, D + L + Ni + " +k=1" + O + N + M + F + E + A, 1, D + L + Hd + " +k=1" + O + N + M + F + E + A, 1, D + L + Hq + " +k=1" + O + N + M + F + E + A, 1, D + L + HR + " +k=1" + O + N + M + F + E + A, 1, D + L + Mj + " +k=1" + O + N + M + F + E + A, 1, D + L + HS + " +k=1" + O + N + M + F + E + A, 1, D + L + Jj + " +k=1" + O + N + M + F + E + A, 1, D + L + EN + " +k=1" + O + N + M + F + E + A, 1, D + L + Le + " +k=1" + O + N + M + F + E + A, 1, D + L + Fy + " +k=1" + O + N + M + F + E + A, 1, D + L + Im + " +k=1" + O + N + M + F + E + A, 1, D + L + Fm + " +k=1" + O + N + M + F + E + A, 1, D + L + KF + " +k=1" + O + N + M + F + E + A, 1, D + L + Fr + " +k=1" + O + N + M + F + E + A, 1, D + L + Jk + " +k=1" + O + N + M + F + E + A, 1, D + L + Ed + " +k=1" + O + N + M + F + E + A, 1, D + L + Il + " +k=1" + O + N + M + F + E + A, 1, D + L + Fn + " +k=1" + O + N + M + F + E + A, 1, D + L + Rx + " +k=1" + O + N + M + F + E + A, 1, D + L + Pf + " +k=1" + O + N + M + F + E + A, 1, D + L + UN + " +k=1" + O + N + M + F + E + A, 1, D + L + Od + " +k=1" + O + N + M + F + E + A, 1, D + L + Oe + " +k=1" + O + N + M + F + E + A, 1, D + L + NY + " +k=1" + O + N + M + F + E + A, 1, D + L + ZS + " +k=1" + O + N + M + F + E + A, 1, D + L + Pg + " +k=1" + O + N + M + F + E + A, 1, D + L + Ql + " +k=1" + O + N + M + F + E + A, 1, D + L + NZ + " +k=1" + O + N + M + F + E + A, 1, D + L + UO + " +k=1" + O + N + M + F + E + A, 1, D + L + Lf + " +k=1" + O + N + M + F + E + A, 1, D + L + UP + " +k=1" + O + N + M + F + E + A, 1, D + L + KG + " +k=1" + O + N + M + F + E + A, 1, D + L + Ry + " +k=1" + O + N + M + F + E + A, 1, D + L + KH + " +k=1" + O + N + M + F + E + A, 1, D + L + SU + " +k=1" + O + N + M + F + E + A, 1, D + L + Lh + " +k=1" + O + N + M + F + E + A, 1, D + L + SV + " +k=1" + O + N + M + F + E + A, 1, D + L + Gl + " +k=1" + IM + N + M + G + E + A, 1, D + L + II + " +k=1" + MS + N + M + G + E + A, 1, D + L + HO + " +k=1" + MT + N + M + G + E + A, 1, D + L + Ia + " +k=1" + LY + N + M + G + E + A, 1, D + L + IG + " +k=1" + Jp + N + M + G + E + A, 1, D + L + PN + " +k=1" + LZ + N + M + G + E + A, 1, D + L + LN + " +k=1" + HU + N + M + G + E + A, 1, D + L + PO + " +k=1" + Gw + N + M + G + E + A, 1, D + L + JS + " +k=1" + Hu + N + M + G + E + A, 1, D + L + SQ + " +k=1" + Hv + N + M + G + E + A, 1, D + L + PS + " +k=1" + It + N + M + G + E + A, 1, D + L + SR + " +k=1" + Hs + N + M + G + E + A, 1, D + L + RL + " +k=1" + Ht + N + M + G + E + A, 1, D + L + " +lon_0=60 +k=1" + HV + N + M + G + E + A, 1, D + L + QW + " +k=1" + Hw + N + M + G + E + A, 1, D + L + UH + " +k=1" + HW + N + M + G + E + A, 1, D + L + RM + " +k=1" + Hx + N + M + G + E + A, 1, D + L + Yt + " +k=1" + La + N + M + G + E + A, 1, D + L + HP + " +k=1" + Hy + N + M + G + E + A, 1, D + L + Lt + " +k=1" + Hz + N + M + G + E + A, 1, D + L + HQ + " +k=1" + IA + N + M + G + E + A, 1, D + L + Ni + " +k=1" + IB + N + M + G + E + A, 1, D + L + Hd + " +k=1" + Gx + N + M + G + E + A, 1, D + L + Hq + " +k=1" + IT + N + M + G + E + A, 1, D + L + HR + " +k=1" + Gc + N + M + G + E + A, 1, D + L + Mj + " +k=1" + IU + N + M + G + E + A, 1, D + L + HS + " +k=1" + Iu + N + M + G + E + A, 1, D + L + Jj + " +k=1" + Mu + N + M + G + E + A, 1, D + L + EN + " +k=1" + Mv + N + M + G + E + A, 1, D + L + Le + " +k=1" + Mw + N + M + G + E + A, 1, D + L + Fy + " +k=1" + Mx + N + M + G + E + A, 1, D + L + Im + " +k=1" + My + N + M + G + E + A, 1, D + L + Fm + " +k=1" + Mz + N + M + G + E + A, 1, D + L + KF + " +k=1" + NA + N + M + G + E + A, 1, D + L + Fr + " +k=1" + NB + N + M + G + E + A, 1, D + L + Jk + " +k=1" + Oh + N + M + G + E + A, 1, D + L + Ed + " +k=1" + NC + N + M + G + E + A, 1, D + L + Il + " +k=1" + Oi + N + M + G + E + A, 1, D + L + Fn + " +k=1" + ND + N + M + G + E + A, 1, D + L + Rx + " +k=1 +x_0=46500000" + N + M + G + E + A, 1, D + L + Pf + " +k=1" + ZK + N + M + G + E + A, 1, D + L + UN + " +k=1 +x_0=48500000" + N + M + G + E + A, 1, D + L + Od + " +k=1 +x_0=49500000" + N + M + G + E + A, 1, D + L + Oe + " +k=1 +x_0=50500000" + N + M + G + E + A, 1, D + L + NY + " +k=1 +x_0=51500000" + N + M + G + E + A, 1, D + L + ZS + " +k=1 +x_0=52500000" + N + M + G + E + A, 1, D + L + Pg + " +k=1 +x_0=53500000" + N + M + G + E + A, 1, D + L + Ql + " +k=1 +x_0=54500000" + N + M + G + E + A, 1, D + L + NZ + " +k=1 +x_0=55500000" + N + M + G + E + A, 1, D + L + UO + " +k=1 +x_0=56500000" + N + M + G + E + A, 1, D + L + Lf + " +k=1 +x_0=57500000" + N + M + G + E + A, 1, D + L + UP + " +k=1 +x_0=58500000" + N + M + G + E + A, 1, D + L + KG + " +k=1 +x_0=59500000" + N + M + G + E + A, 2, D + L + KH + " +k=1 +x_0=61500000" + N + M + G + E + A, 1, D + L + SU + " +k=1 +x_0=62500000" + N + M + G + E + A, 1, D + L + Lh + " +k=1 +x_0=63500000" + N + M + G + E + A, 1, D + L + SV + " +k=1 +x_0=64500000" + N + M + G + E + A, 1, D + L + Gl + " +k=1" + O + N + M + G + E + A, 1, D + L + II + " +k=1" + O + N + M + G + E + A, 1, D + L + HO + " +k=1" + O + N + M + G + E + A, 1, D + L + Ia + " +k=1" + O + N + M + G + E + A, 1, D + L + IG + " +k=1" + O + N + M + G + E + A, 1, D + L + PN + " +k=1" + O + N + M + G + E + A, 1, D + L + LN + " +k=1" + O + N + M + G + E + A, 1, D + L + PO + " +k=1" + O + N + M + G + E + A, 1, D + L + JS + " +k=1" + O + N + M + G + E + A, 1, D + L + SQ + " +k=1" + O + N + M + G + E + A, 1, D + L + PS + " +k=1" + O + N + M + G + E + A, 1, D + L + SR + " +k=1" + O + N + M + G + E + A, 1, D + L + RL + " +k=1" + O + N + M + G + E + A, 1, D + L + " +lon_0=60 +k=1" + O + N + M + G + E + A, 1, D + L + QW + " +k=1" + O + N + M + G + E + A, 1, D + L + UH + " +k=1" + O + N + M + G + E + A, 1, D + L + RM + " +k=1" + O + N + M + G + E + A, 1, D + L + Yt + " +k=1" + O + N + M + G + E + A, 1, D + L + HP + " +k=1" + O + N + M + G + E + A, 1, D + L + Lt + " +k=1" + O + N + M + G + E + A, 1, D + L + HQ + " +k=1" + O + N + M + G + E + A, 1, D + L + Ni + " +k=1" + O + N + M + G + E + A, 1, D + L + Hd + " +k=1" + O + N + M + G + E + A, 1, D + L + Hq + " +k=1" + O + N + M + G + E + A, 1, D + L + HR + " +k=1" + O + N + M + G + E + A, 1, D + L + Mj + " +k=1" + O + N + M + G + E + A, 1, D + L + HS + " +k=1" + O + N + M + G + E + A, 1, D + L + Jj + " +k=1" + O + N + M + G + E + A, 1, D + L + EN + " +k=1" + O + N + M + G + E + A, 1, D + L + Le + " +k=1" + O + N + M + G + E + A, 1, D + L + Fy + " +k=1" + O + N + M + G + E + A, 1, D + L + Im + " +k=1" + O + N + M + G + E + A, 1, D + L + Fm + " +k=1" + O + N + M + G + E + A, 1, D + L + KF + " +k=1" + O + N + M + G + E + A, 1, D + L + Fr + " +k=1" + O + N + M + G + E + A, 1, D + L + Jk + " +k=1" + O + N + M + G + E + A, 1, D + L + Ed + " +k=1" + O + N + M + G + E + A, 1, I + Mf + o + i + HF + E + A, 1, I + KD + o + i + HF + E + A, 1, D + L + Il + " +k=1" + O + N + M + G + E + A, 1, D + L + Fn + " +k=1" + O + N + M + G + E + A, 1, D + L + Rx + " +k=1" + O + N + M + G + E + A, 1, D + L + Pf + " +k=1" + O + N + M + G + E + A, 1, D + L + UN + " +k=1" + O + N + M + G + E + A, 1, D + L + Od + " +k=1" + O + N + M + G + E + A, 1, D + L + Oe + " +k=1" + O + N + M + G + E + A, 1, D + L + NY + " +k=1" + O + N + M + G + E + A, 1, D + L + ZS + " +k=1" + O + N + M + G + E + A, 1, D + L + Pg + " +k=1" + O + N + M + G + E + A, 1, D + L + Ql + " +k=1" + O + N + M + G + E + A, 1, D + L + NZ + " +k=1" + O + N + M + G + E + A, 1, D + L + UO + " +k=1" + O + N + M + G + E + A, 1, D + L + Lf + " +k=1" + O + N + M + G + E + A, 1, D + L + UP + " +k=1" + O + N + M + G + E + A, 1, D + L + KG + " +k=1" + O + N + M + G + E + A, 1, D + L + Ry + " +k=1" + O + N + M + G + E + A, 1, D + L + KH + " +k=1" + O + N + M + G + E + A, 1, D + L + SU + " +k=1" + O + N + M + G + E + A, 1, D + L + Lh + " +k=1" + O + N + M + G + E + A, 1, D + L + SV + " +k=1" + O + N + M + G + E + A, 1, D + IY + IV + Pc + h + N + C + B + E + A, 1, D + Gm + OS + BG + a + N + C + B + E + A, 1, D + Bl + Cn + V + EX + N + C + B + E + A, 1, D + Bl + Co + V + EX + N + C + B + E + A, 1, D + Bl + Iv + BG + EX + N + C + B + E + A, 1, H + Dx + Dy + BC + IF + u + N + C + B + E + A, 1, H + Dz + Mq + EA + IF + u + Is + C + B + E + A, 1, H + DW + Jn + y + HA + Bd + Ae + C + B + E + A, 1, H + DX + DY + AA + HA + Bd + Ae + C + B + E + A, 1, H + Ap + DZ + Ml + AJ + Bd + Ae + C + B + E + A, 1, H + LO + QS + Da + Mm + Bd + Ae + C + B + E + A, 1, H + Db + Dc + Mn + Ir + Bd + Ae + C + B + E + A, 1, H + Dd + De + Df + Iw + Bd + Ae + C + B + E + A, 1, H + Eh + Ei + y + Ba + Fw + Fx + C + B + E + A, 1, H + LP + LQ + CY + Ba + Fw + Fx + C + B + E + A, 1, H + Ap + Dg + f + Ba + Fw + Fx + C + B + E + A, 1, H + Dh + Mo + Di + Jq + QG + QH + C + B + E + A, 1, D + Ch + Cp + Mp + h + N + C + B + E + A, 1, D + Aq + CR + Am + h + N + C + B + E + A, 1, D + Aq + Ob + Am + h + N + C + B + E + A, 1, H + LR + Dj + QT + LS + a + N + C + B + E + A, 1, D + Gm + Cq + V + h + N + C + B + E + A, 1, D + Gm + Cr + V + EW + N + C + B + E + A, 1, D + Kn + Sf + AO + O + N + C + B + E + A, 1, D + Ko + KO + AO + O + N + C + B + E + A, 1, D + GV + KI + Jl + O + N + C + B + E + A, 1, D + Kp + Sg + Jl + O + N + C + B + E + A, 1, D + Kq + KP + " +k=1" + O + N + C + B + E + A, 1, D + p + Cs + BJ + h + N + C + B + E + A, 1, D + p + Jb + BJ + O + N + C + B + E + A, 1, D + p + Ix + BG + CX + N + C + B + E + A, 1, D + f + Cz + EQ + AI + N + C + B + E + A, 1, D + f + DA + Am + EW + N + C + B + E + A, 1, D + DM + DB + AO + BU + KJ + C + B + E + A, 1, D + DM + DC + AO + HT + KJ + C + B + E + A, 1, H + EB + EC + Fo + GG + AV + AH + C + B + E + A, 1, H + AY + ED + Fs + GG + O + N + C + B + E + A, 1, H + EE + EF + AQ + Fl + u + N + C + B + E + A, 1, H + EG + EH + f + CV + u + Is + C + B + E + A, 1, H + Az + DV + DM + Jo + O + N + C + B + E + A, 1, H + Ej + Ek + AB + EY + O + Ae + C + B + E + A, 1, H + FS + FT + IY + Hg + BZ + N + C + B + E + A, 1, H + OH + OI + OJ + Bi + BZ + N + C + B + E + A, 1, D + AK + HJ + V + AI + N + C + B + E + A, 1, D + BD + DD + AO + HT + N + C + B + E + A, 1, H + MU + Nz + AA + Ld + u + N + C + B + E + A, 1, H + El + Dk + Ip + GE + h + Mk + C + B + E + A, 1, H + Em + En + Ip + IL + O + N + C + B + E + A, 1, H + Eo + Ep + Eq + Jh + Tl + N + C + B + E + A, 1, H + OA + Er + Es + BE + Pk + N + C + B + E + A, 1, H + Bq + OB + Fo + BE + LU + N + C + B + E + A, 1, H + FU + FV + Iq + DE + CX + EK + C + B + E + A, 1, H + Ma + FW + IP + Js + CX + EK + C + B + E + A, 1, H + FX + FY + Nj + Na + CX + EK + C + B + E + A, 1, D + Hj + Ct + CP + AI + N + C + B + E + A, 1, D + Hj + Bx + CP + EW + N + C + B + E + A, 1, D + Cd + RS + BG + Bv + N + C + B + E + A, 1, D + Cd + Hg + BG + O + N + C + B + E + A, 1, D + Id + RT + Am + YC + N + C + B + E + A, 1, H + LM + RK + MV + IS + a + N + C + B + E + A, 1, H + JT + Jn + FZ + CS + O + N + C + B + E + A, 1, D + CQ + DF + V + h + Tm + C + B + E + A, 1, D + CQ + DG + V + O + Hh + C + B + E + A, 1, D + CQ + DH + V + CX + LV + C + B + E + A, 1, D + Fp + DI + AO + AI + N + C + B + E + A, 1, D + BA + Gp + V + Bn + N + C + B + E + A, 1, D + Bl + Cu + Hm + OC + N + C + B + E + A, 1, D + Bl + Iy + V + O + N + C + B + E + A, 1, D + Bl + Cv + Iz + YD + N + C + B + E + A, 1, D + BA + Gp + V + Bn + N + C + B + E + A, 1, D + Fs + Cw + Ad + Bv + N + C + B + E + A, 1, D + Fs + Cx + Ad + Qo + N + C + B + E + A, 1, H + Dl + Dm + BB + Oc + AI + N + C + B + E + A, 1, H + BH + Ev + Ib + EZ + a + N + C + B + E + A, 1, H + Ew + Ex + Be + EZ + a + N + C + B + E + A, 1, H + OK + Fa + BY + ET + a + N + C + B + E + A, 1, H + Fb + Fc + Ch + ET + a + N + C + B + E + A, 1, H + Dn + Ey + QU + Fl + a + N + C + B + E + A, 1, H + Ez + FA + Do + Fl + a + N + C + B + E + A, 1, H + PP + CZ + AK + AJ + Ci + N + C + B + E + A, 1, H + PQ + Ca + p + AJ + AV + N + C + B + E + A, 1, D + EI + GE + Lb + BU + N + C + B + E + A, 1, H + Fd + Fe + AL + CS + a + N + C + B + E + A, 1, H + OL + Ff + EJ + Ag + a + N + C + B + E + A, 1, H + FD + MX + BC + MQ + a + N + C + B + E + A, 1, H + FE + MY + QV + Jr + h + AH + C + B + E + A, 1, H + FF + FG + Ds + CV + a + Cl + C + B + E + A, 1, H + FH + FI + Cb + Ag + EW + Fq + C + B + E + A, 1, H + FJ + FK + Dt + Ji + a + LV + C + B + E + A, 1, H + CD + CE + Cc + CV + AI + Ju + C + B + E + A, 1, H + AY + CF + Br + BI + O + AH + C + B + E + A, 1, H + JF + CG + AQ + BI + O + Cl + C + B + E + A, 1, H + JG + CH + f + BI + O + Fq + C + B + E + A, 1, D + Fp + LW + JA + O + N + C + B + E + A, 1, H + OF + FL + AA + GF + Bo + Cl + C + B + E + A, 1, H + Az + Du + AB + GF + Bo + AH + C + B + E + A, 1, H + BH + OG + Ib + Cy + O + N + C + B + E + A, 1, H + FM + FN + Dv + AJ + O + N + C + B + E + A, 1, H + Mb + RN + Mr + Ga + a + N + C + B + E + A, 1, H + Fg + Fh + QX + CR + a + N + C + B + E + A, 1, H + FO + FP + Dw + Bu + a + N + C + B + E + A, 1, H + Jc + MZ + AL + Bu + a + N + C + B + E + A, 1, H + FQ + FR + PR + Bu + a + N + C + B + E + A, 1, D + CA + DJ + Ad + h + N + C + B + E + A, 1, D + CA + DK + Ad + u + EK + C + B + E + A, 1, D + CA + JB + Ad + a + N + C + B + E + A, 1, D + CA + DL + Ad + CX + EK + C + B + E + A, 1, H + GW + GX + GY + GA + h + IK + C + B + E + A, 1, D + Bl + Cn + V + EX + N + C + B + t + A, 1, D + Bl + Co + V + EX + N + C + B + t + A, 1, D + Bl + Iv + BG + EX + N + C + B + t + A, 1, H + DW + Jn + y + HA + Ac + AD + C + B + J + A, 1, H + DX + DY + AA + HA + Ac + AD + C + B + J + A, 1, H + Ap + DZ + Ml + AJ + Ac + AD + C + B + J + A, 1, H + LO + QS + Da + Mm + Ac + AD + C + B + J + A, 1, H + Db + Dc + Mn + Ir + Ac + AD + C + B + J + A, 1, H + Dd + De + Df + Iw + Ac + AD + C + B + J + A, 1, H + Eh + Ei + y + Ba + Bw + CL + C + B + J + A, 1, H + LP + LQ + CY + Ba + Bw + CL + C + B + J + A, 1, H + Ap + Dg + f + Ba + Bw + CL + C + B + J + A, 1, H + Dh + Mo + Di + Jq + MC + MD + C + B + J + A, 1, D + Ch + Cp + Mp + AE + N + C + B + J + A, 1, D + Aq + CR + Am + AE + N + C + B + J + A, 1, D + Aq + Ob + Am + AE + N + C + B + J + A, 1, H + LR + Dj + QT + LS + a + N + C + B + J + A, 1, D + Gm + Cq + V + AE + N + C + B + J + A, 1, D + Gm + Cr + V + CM + N + C + B + J + A, 1, D + p + Cs + BJ + AE + N + C + B + J + A, 1, D + p + Jb + BJ + AF + N + C + B + J + A, 1, D + p + Ix + BG + ME + N + C + B + J + A, 3, H + Az + DV + DM + Jo + AF + N + C + B + J + A, 1, H + Ej + Ek + AB + EY + AF + AD + C + B + J + A, 1, H + MU + Nz + AA + Ld + MF + N + C + B + J + A, 1, H + El + Dk + Ip + GE + AE + Mk + C + B + J + A, 1, H + Em + En + Ip + IL + AF + N + C + B + J + A, 1, H + Eo + Ep + Eq + Jh + MG + N + C + B + t + A, 1, H + OA + Er + Es + BE + MH + N + C + B + t + A, 1, H + Bq + OB + Fo + BE + OT + N + C + B + t + A, 1, D + Hj + Ct + CP + BF + N + C + B + J + A, 1, D + Hj + Bx + CP + CM + N + C + B + J + A, 1, H + LM + RK + MV + IS + DR + N + C + B + t + A, 1, D + Bl + Cu + Hm + OC + N + C + B + J + A, 1, D + Bl + Iy + V + AF + N + C + B + J + A, 1, D + Bl + Cv + Iz + MI + N + C + B + J + A, 1, D + BA + Gp + V + Bn + N + C + B + J + A, 1, D + Fs + Cw + Ad + MJ + N + C + B + J + A, 1, D + Fs + Cx + Ad + MK + N + C + B + J + A, 1, H + Dl + Dm + BB + Oc + BF + N + C + B + J + A, 1, H + BH + Ev + Ib + EZ + DR + N + C + B + t + A, 1, H + Ew + Ex + Be + EZ + DR + N + C + B + t + A, 1, H + Dn + Ey + QU + Fl + a + N + C + B + J + A, 1, H + Ez + FA + Do + Fl + a + N + C + B + J + A, 1, H + PP + CZ + AK + AJ + KL + N + C + B + t + A, 1, H + PQ + Ca + p + AJ + KM + N + C + B + t + A, 1, H + FD + MX + BC + MQ + a + N + C + B + J + A, 1, H + FE + MY + QV + Jr + AE + CN + C + B + J + A, 1, H + FF + FG + Ds + CV + a + Gr + C + B + J + A, 1, H + FH + FI + Cb + Ag + CM + Fq + C + B + J + A, 1, H + FJ + FK + Dt + Ji + a + Ne + C + B + J + A, 1, H + CD + CE + Cc + CV + BF + Nf + C + B + J + A, 1, H + AY + CF + Br + BI + Gd + Pw + C + B + t + A, 1, H + JF + CG + AQ + BI + Gd + RY + C + B + t + A, 1, H + JG + CH + f + BI + Gd + RZ + C + B + t + A, 1, H + OF + FL + AA + GF + Gs + Gr + C + B + J + A, 1, H + Az + Du + AB + GF + Gs + CN + C + B + J + A, 1, H + BH + OG + Ib + Cy + AF + N + C + B + J + A, 1, H + FM + FN + Dv + AJ + AF + N + C + B + J + A, 1, H + FO + FP + Dw + Bu + a + N + C + B + J + A, 1, H + Jc + MZ + AL + Bu + a + N + C + B + J + A, 1, H + FQ + FR + PR + Bu + a + N + C + B + J + A, 1, D + L + " +lon_0=13" + AP + O + N + AU + BN + Sy + E + A, 1, D + " +lat_0=24.45" + Vv + Jl + h + Hk + R + Jy + E + A, 1, I + NS + o + Y + Hf + E + A, 2, D + KQ + " +lon_0=41.53333333333333 +k=1 +x_0=1300000" + N + M + F + E + A, 1, D + KQ + " +lon_0=44.53333333333333 +k=1" + aB + N + M + F + E + A, 1, D + KQ + " +lon_0=47.53333333333333 +k=1" + aC + N + M + F + E + A, 1, D + KQ + " +lon_0=50.53333333333333 +k=1" + aD + N + M + F + E + A, 1, D + Ol + " +lon_0=50.76666666666667 +k=1" + aB + N + M + F + E + A, 1, D + Ol + " +lon_0=53.76666666666667 +k=1" + aC + N + M + F + E + A, 1, D + Ol + " +lon_0=56.76666666666667 +k=1" + aD + N + M + F + E + A, 1, I + Ja + R + SE + E + A, 1, I + Ja + R + Sz + E + A, 2, D + L + Tf + V + Ab + N + C + B + E + A, 1, D + L + RQ + V + Ab + N + C + B + E + A, 1, D + L + RR + V + Ab + N + C + B + E + A, 1, D + L + Tg + V + Ab + N + C + B + E + A, 1, D + L + IL + V + Ab + N + C + B + E + A, 1, D + L + Th + V + Ab + N + C + B + E + A, 1, D + L + Ti + V + Ab + N + C + B + E + A, 1, D + L + Ga + V + Ab + N + C + B + E + A, 1, GU + Iq + Zy + ST + Ci + aE + C + B + E + A, 1, GU + " +lat_0=47.25" + Qk + ST + u + CO + C + B + E + A, 1, I + Ns + C + B + E + A, 1, I + Nt + C + B + E + A, 1, I + Nu + C + B + E + A, 1, I + Ik + C + B + E + A, 1, I + IC + C + B + E + A, 1, I + Hi + C + B + E + A, 1, I + Gz + C + B + E + A, 1, I + ID + C + B + E + A, 2, DT + " +lat_1=55" + QY + Yu + Ms + s + N + X + J + A, 1, D + DM + DB + AO + MM + GI + C + B + J + A, 1, D + DM + DC + AO + HT + GI + C + B + J + A, 1, D + DM + DB + AO + MM + GI + C + B + J + A, 1, D + DM + DC + AO + HT + GI + C + B + J + A, 1, I + Gz + R + TA + E + A, 1, I + Gz + R + SF + E + A, 1, I + Io + R + NH + E + A, 1, I + Io + C + B + E + A, 1, I + Gz + R + TO + E + A, 2, I + Me + o + C + B + E + A, 1, I + Ro + o + R + TP + E + A, 1, I + RG + o + R + Lr + E + A, 1, I + RH + o + R + UD + E + A, 2, I + JZ + o + R + SG + E + A, 1, I + MA + o + R + QM + E + A, 6, I + ID + i + TZ + E + A, 1, I + SK + o + R + SH + E + A, 3, H + JT + Hl + GH + AJ + u + N + C + B + E + A, 1, H + JT + Hl + GH + AJ + Lc + N + C + B + t + A, 1, H + JT + Hl + GH + AJ + u + N + C + B + E + A, 1, H + JT + Hl + GH + AJ + Lc + N + C + B + t + A, 1, I + MA + o + R + Jf + E + A, 1, I + MA + o + R + TB + E + A, 1, I + MA + o + R + Ke + E + A, 1, I + MA + o + R + HH + E + A, 1, I + JZ + o + R + SI + E + A, 1, JU + " +lon_0=110" + ZP + Pl + Qp + Y + Hf + E + A, 1, JU + " +lon_0=110" + ZP + Pl + Qp + Y + Cj + E + A, 1, JU + " +lon_0=110" + ZP + Pl + Qp + Y + HZ + E + A, 1, D + L + KB + AP + AV + N + R + CK + E + A, 1, D + L + Gj + AP + " +x_0=2520000" + N + R + CK + E + A, 1, DT + Yv + " +lat_2=58.5" + IP + " +lon_0=-126" + BZ + N + C + B + E + A, 1, I + KC + C + B + E + A, 1, D + L + IH + " +k=1" + Bn + N + C + B + E + A, 1, D + L + " +lon_0=13.5 +k=1" + Bn + N + C + B + E + A, 1, D + L + Gj + " +k=1" + Bn + N + C + B + E + A, 1, D + L + YE + " +k=1" + Bn + N + C + B + E + A, 1, D + L + QR + " +k=1" + Bn + N + C + B + E + A, 1, D + L + " +lon_0=14.25 +k=1" + Bn + N + C + B + E + A, 1, D + L + " +lon_0=15.75 +k=1" + Bn + N + C + B + E + A, 1, D + L + " +lon_0=17.25 +k=1" + Bn + N + C + B + E + A, 1, D + L + " +lon_0=18.75 +k=1" + Bn + N + C + B + E + A, 1, D + L + " +lon_0=20.25 +k=1" + Bn + N + C + B + E + A, 1, D + L + " +lon_0=21.75 +k=1" + Bn + N + C + B + E + A, 1, D + L + " +lon_0=23.25 +k=1" + Bn + N + C + B + E + A, 1, D + L + Vw + " +k=1" + AV + N + Y + BW + E + A, 1, D + L + Vx + " +k=1" + AV + N + Y + BW + E + A, 1, D + L + Vy + " +k=1" + AV + N + Y + BW + E + A, 1, D + L + Vz + " +k=1" + AV + N + Y + BW + E + A, 1, D + L + WA + " +k=1" + AV + N + Y + BW + E + A, 1, D + L + WB + " +k=1" + AV + N + Y + BW + E + A, 1, D + L + Vw + " +k=1" + AV + N + Y + E + A, 1, D + L + Vx + " +k=1" + AV + N + Y + E + A, 1, D + L + Vy + " +k=1" + AV + N + Y + E + A, 1, D + L + Vz + " +k=1" + AV + N + Y + E + A, 1, D + L + WA + " +k=1" + AV + N + Y + E + A, 1, D + L + WB + " +k=1" + AV + N + Y + E + A, 1, BP + m + " +lat_ts=-71" + HN + " +k=1" + s + N + S + E + A, 1, BP + m + " +lat_ts=-71 +lon_0=70 +k=1" + Pk + Hh + S + E + A, 1, H + " +lat_1=-68.5 +lat_2=-74.5 +lat_0=-50 +lon_0=70" + Pk + Hh + S + E + A, 1, H + Yw + QY + PU + Lu + LU + RU + C + B + E + A, 1, He + PU + Lu + RV + RW + C + B + E + A, 1, I + Mf + o + j + KR + E + A, 1, I + KD + o + j + KR + E + A, 3, I + Ja + C + B + E + A, 1, I + KA + C + B + E + A, 1, I + Oq + C + B + E + A, 1, I + QD + C + B + E + A, 1, I + JN + C + B + E + A, 1, I + KC + C + B + E + A, 1, I + NR + C + B + E + A, 1, I + Ki + C + B + E + A, 1, I + Mf + C + B + E + A, 1, I + KD + C + B + E + A, 5, I + Os + R + Jd + E + A, 1, I + SL + R + Jd + E + A, 1, I + Ja + R + Jd + E + A, 1, H + " +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19" + O + Ae + C + B + E + A, 1, D + L + " +lon_0=-8.5 +k=1" + Jm + " +y_0=-7800000" + R + Jz + E + A, 1, D + L + II + AP + O + " +y_0=-6000000" + C + B + E + A, 1, I + MA + o + R + Qc + E + A, 1, I + Ja + R + PI + E + A, 1, I + Os + R + Pt + E + A, 1, I + Os + R + Pa + E + A, 1, I + JN + j + B + E + A, 1, I + KC + j + B + E + A, 1, D + L + " +lon_0=37" + UG + O + ZL + R + n + E + A, 1, I + Ki + C + B + E + A, 1, Ck + " +lat_0=52.41864827777778 +lon_0=13.62720366666667" + Of + " +y_0=10000" + Y + AC + E + A, 1, D + L + Bu + AP + O + " +y_0=-4500000" + X + E + A, 1, D + L + Bu + AP + YF + Sh + C + B + E + A, 1, D + L + Bu + AP + YF + Sh + C + B + E + A, 1, D + AL + Rf + JE + EW + N + C + B + E + A, 2, D + BD + Rg + JE + AI + N + C + B + E + A, 1, D + AL + Rf + JE + EW + N + C + B + E + A, 2, D + BD + Rg + JE + AI + N + C + B + E + A, 1, CU + Kr + " +lonc=-86" + QI + AP + QJ + PY + KE + QK + C + B + E + A, 1, CU + Kr + " +lonc=-86" + QI + AP + QJ + PY + KE + QK + C + B + E + A, 1, H + WC + WD + WE + CS + " +x_0=914400 +y_0=914400" + X + t + A, 1, H + WC + WD + WE + CS + BZ + AH + C + B + E + A, 1, H + OM + RO + OX + CS + AV + Ju + C + B + E + A, 1, DT + OM + RO + OX + CS + AV + Hh + C + B + E + A, 1, H + OM + RO + OX + CS + AV + Ju + C + B + E + A, 1, DT + OM + RO + OX + CS + AV + Hh + C + B + E + A, 1, DT + " +lat_1=24" + YG + " +lat_0=24" + NV + u + N + C + B + E + A, 1, DT + " +lat_1=24" + YG + " +lat_0=24" + NV + u + N + C + B + E + A, 1, H + Fi + Fj + AB + EY + AV + AH + C + B + E + A, 1, H + Fi + Fj + AB + EY + AV + CN + C + B + J + A, 1, H + Fi + Fj + AB + EY + AV + AH + C + B + E + A, 1, H + Fi + Fj + AB + EY + AV + CN + C + B + J + A, 1, I + Mg + Y + g + E + A, 1, I + NT + Y + g + E + A, 1, I + Ot + Y + g + E + A, 1, I + Nv + Y + g + E + A, 1, I + PM + Y + g + E + A, 1, I + Mg + C + B + E + A, 1, I + NT + C + B + E + A, 1, I + Ot + C + B + E + A, 1, I + Nv + C + B + E + A, 1, I + PM + C + B + E + A, 1, H + " +lat_1=-14.26666666666667 +lat_0=-14.26666666666667" + SW + " +k_0=1" + e + " +y_0=95169.31165862332" + i + TC + J + A, 4, D + L + Hq + AP + O + N + By + Ay + RF + E + A, 1, H + " +lat_1=-28" + ZT + " +lat_0=-32" + Fn + BZ + Cl + C + B + E + A, 1, D + SS + " +lon_0=-2.416666666666667 +k=0.999997 +x_0=47000" + Rz + C + B + E + A, 1, D + " +lat_0=49.225 +lon_0=-2.135 +k=0.9999999000000001" + Of + " +y_0=70000" + C + B + E + A, 1, H + " +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145" + Ci + Gb + x + r + E + A, 1, H + " +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145" + Ci + JH + C + B + E + A, 1, H + " +lat_1=-18" + ZT + L + " +lon_0=134" + s + N + C + B + E + A, 1, D + " +lat_0=-28" + NY + Jl + Jm + EK + C + B + E + A, 1, D + Ie + " +lon_0=-80.07750791666666 +k=1" + BZ + AH + C + B + E + A, 1, D + Ie + " +lon_0=-77.07750791666666 +k=1" + BZ + AH + C + B + E + A, 1, D + Ie + " +lon_0=-74.07750791666666 +k=1" + BZ + AH + C + B + E + A, 1, D + Ie + " +lon_0=-71.07750791666666 +k=1" + BZ + AH + C + B + E + A, 1, D + Ie + " +lon_0=-68.07750791666666 +k=1" + BZ + AH + C + B + E + A, 1, D + L + YH + " +k=0.999" + BZ + AH + R + Qe + E + A, 1, GU + " +lat_0=50.625 +lon_0=21.08333333333333" + UG + " +x_0=4637000 +y_0=5467000" + M + b + E + A, 1, D + L + Fm + CP + O + N + i + BX + E + A, 1, D + L + ZU + CP + O + N + i + BX + E + A, 1, D + L + ZV + CP + O + N + i + BX + E + A, 1, D + L + Fr + CP + O + N + i + BX + E + A, 1, D + L + Ru + CP + O + N + i + BX + E + A, 1, D + L + RI + " +k=1" + O + N + C + B + E + A, 1, D + L + UI + " +k=1" + O + N + C + B + E + A, 1, D + L + Gl + " +k=1" + O + N + C + B + E + A, 1, D + L + Yx + " +k=1" + O + N + C + B + E + A, 1, D + L + SP + " +k=1" + O + N + C + B + E + A, 1, D + L + II + " +k=1" + O + N + C + B + E + A, 1, D + L + RJ + " +k=1" + O + N + C + B + E + A, 1, D + L + UJ + " +k=1" + O + N + C + B + E + A, 1, D + L + HO + " +k=1" + O + N + C + B + E + A, 1, D + L + RP + " +k=1" + O + N + C + B + E + A, 1, D + L + " +lon_0=29 +k=1" + O + N + C + B + E + A, 1, D + L + Ia + " +k=1" + O + N + C + B + E + A, 1, D + L + QQ + " +k=1" + O + N + C + B + E + A, 2, Ck + " +lat_0=-18 +lon_0=178 +x_0=109435.392 +y_0=141622.272" + UW + Ym + Nl + " +to_meter=0.201168" + A, 1, I + PL + o + R + JD + E + A, 1, I + SK + o + R + JD + E + A, 6, I + Mh + By + Ay + JP + E + A, 1, I + Mi + By + Ay + JP + E + A, 3, D + L + " +lon_0=18.05779 +k=0.99999425 +x_0=100178.1808 +y_0=-6500614.7836" + C + B + E + A, 1, DT + Yv + " +lat_2=58.5" + IP + " +lon_0=-126" + BZ + N + C + B + E + A, 1, I + RH + C + B + E + A, 1, I + TW + C + B + E + A, 1, I + TX + C + B + E + A, 1, I + QE + C + B + E + A, 1, I + Nw + C + B + E + A, 1, I + NP + C + B + E + A, 1, I + NQ + C + B + E + A, 1, H + YI + " +lat_2=53.5" + L + SA + " +x_0=930000 +y_0=6430000" + C + B + E + A, 1, H + YI + " +lat_2=53.5" + L + SA + " +x_0=930000 +y_0=6430000" + C + B + E + A, 1, H + " +lat_1=-20.66666666666667 +lat_2=-22.33333333333333 +lat_0=-21.5" + ZW + u + Hk + C + B + E + A, 1, I + MA + o + j + QB + E + A, 1, H + " +lat_1=-22.24469175 +lat_2=-22.29469175 +lat_0=-22.26969175 +lon_0=166.44242575 +x_0=0.66 +y_0=1.02" + R + HH + E + A, 1, H + " +lat_1=-22.24472222222222 +lat_2=-22.29472222222222 +lat_0=-22.26972222222222 +lon_0=166.4425 +x_0=8.313000000000001 +y_0=-2.354" + R + HH + E + A, 1, CU + Qi + aF + aT + Ph + Of + N + KE + GZ + Yn + Qz + " +to_meter=20.116756" + A, 1, CU + Qi + aF + aT + Ph + " +x_0=804670.24" + N + KE + GZ + Yn + Qz + E + A, 1, I + SM + o + C + B + E + A, 1, I + MA + o + C + B + E + A, 1, I + Nq + o + C + B + E + A, 1, I + Nq + o + R + Jf + E + A, 2, DT + " +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-84.455955" + BZ + AH + C + B + E + A, 1, DT + " +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627" + BZ + AH + C + B + E + A, 1, D + L + ZQ + AP + O + N + By + Ay + JP + E + A, 1, D + L + UE + " +k=0.9965000000000001" + BZ + N + R + w + E + A, 1, I + IC + C + B + E + A, 1, I + Hi + C + B + E + A, 1, I + Gz + C + B + E + A, 1, I + ID + C + B + E + A, 1, I + Io + C + B + E + A, 1, I + MB + C + B + E + A, 1, I + Nx + C + B + E + A, 1, I + Nr + C + B + E + A, 1, I + Os + C + B + E + A, 1, I + SL + C + B + E + A, 1, I + Ja + C + B + E + A, 1, I + KA + C + B + E + A, 1, D + L + KB + CP + h + N + R + w + E + A, 1, D + L + " +lon_0=11" + CP + h + N + R + w + E + A, 1, D + L + " +lon_0=13" + CP + h + N + R + w + E + A, 1, D + L + Gj + CP + h + N + R + w + E + A, 1, D + L + UE + CP + h + N + R + w + E + A, 1, D + L + RI + CP + h + N + R + w + E + A, 1, D + L + Gl + CP + h + N + R + w + E + A, 1, D + L + SP + CP + h + N + R + w + E + A, 1, D + L + RJ + CP + h + N + R + w + E + A, 1, I + JN + R + w + E + A, 1, H + Qq + Li + JS + PZ + AV + aG + c + QC + E + A, 1, I + KC + R + w + E + A, 1, I + NR + R + w + E + A, 1, I + Ki + R + w + E + A, 1, H + Om + On + m + Pe + s + N + S + E + A, 1, H + Om + On + m + Nb + s + N + S + E + A, 1, H + Om + On + m + " +lon_0=-42" + s + N + S + E + A, 1, H + BQ + BR + m + SU + s + N + S + E + A, 1, H + BQ + BR + m + Pe + s + N + S + E + A, 1, H + BQ + BR + m + Nb + s + N + S + E + A, 1, H + BQ + BR + m + PO + s + N + S + E + A, 1, H + BQ + BR + m + SR + s + N + S + E + A, 1, H + BQ + BR + m + UH + s + N + S + E + A, 1, H + BQ + BR + m + Lt + s + N + S + E + A, 1, H + BQ + BR + m + Hq + s + N + S + E + A, 1, H + BQ + BR + m + Jj + s + N + S + E + A, 1, H + BQ + BR + m + Im + s + N + S + E + A, 1, H + BQ + BR + m + Jk + s + N + S + E + A, 1, H + BQ + BR + m + Rx + s + N + S + E + A, 1, H + BQ + BR + m + Oe + s + N + S + E + A, 1, H + BQ + BR + m + Ql + s + N + S + E + A, 1, H + AM + AN + m + " +lon_0=-102" + s + N + S + E + A, 1, H + AM + AN + m + Bu + s + N + S + E + A, 1, H + AM + AN + m + " +lon_0=-78" + s + N + S + E + A, 1, H + AM + AN + m + Pe + s + N + S + E + A, 1, H + AM + AN + m + " +lon_0=-18" + s + N + S + E + A, 1, H + AM + AN + m + " +lon_0=-6" + s + N + S + E + A, 1, H + AM + AN + m + ZO + s + N + S + E + A, 1, H + AM + AN + m + QR + s + N + S + E + A, 1, H + AM + AN + m + Ia + s + N + S + E + A, 1, H + AM + AN + m + PO + s + N + S + E + A, 1, H + AM + AN + m + SR + s + N + S + E + A, 1, H + AM + AN + m + UH + s + N + S + E + A, 1, H + AM + AN + m + Lt + s + N + S + E + A, 1, H + AM + AN + m + Hq + s + N + S + E + A, 1, H + AM + AN + m + Jj + s + N + S + E + A, 1, H + AM + AN + m + Im + s + N + S + E + A, 1, H + AM + AN + m + Jk + s + N + S + E + A, 1, H + AM + AN + m + Rx + s + N + S + E + A, 1, H + AM + AN + m + Oe + s + N + S + E + A, 1, H + AM + AN + m + Ql + s + N + S + E + A, 1, H + AM + AN + m + UP + s + N + S + E + A, 1, H + Ah + AZ + m + YJ + s + N + S + E + A, 1, H + Ah + AZ + m + YK + s + N + S + E + A, 1, H + Ah + AZ + m + Lj + s + N + S + E + A, 1, H + Ah + AZ + m + Ji + s + N + S + E + A, 1, H + Ah + AZ + m + CR + s + N + S + E + A, 1, H + Ah + AZ + m + Qk + s + N + S + E + A, 1, H + Ah + AZ + m + " +lon_0=-27" + s + N + S + E + A, 1, H + Ah + AZ + m + " +lon_0=-9" + s + N + S + E + A, 1, H + Ah + AZ + m + KB + s + N + S + E + A, 1, H + Ah + AZ + m + HO + s + N + S + E + A, 1, H + Ah + AZ + m + JS + s + N + S + E + A, 1, H + Ah + AZ + m + QW + s + N + S + E + A, 1, H + Ah + AZ + m + HQ + s + N + S + E + A, 1, H + Ah + AZ + m + HS + s + N + S + E + A, 1, H + Ah + AZ + m + Fm + s + N + S + E + A, 1, H + Ah + AZ + m + Fn + s + N + S + E + A, 1, H + Ah + AZ + m + NY + s + N + S + E + A, 1, H + Ah + AZ + m + Lf + s + N + S + E + A, 1, H + Ai + Aj + m + SV + s + N + S + E + A, 1, H + Ai + Aj + m + " +lon_0=-144" + s + N + S + E + A, 1, H + Ai + Aj + m + Mt + s + N + S + E + A, 1, H + Ai + Aj + m + OZ + s + N + S + E + A, 1, H + Ai + Aj + m + UQ + s + N + S + E + A, 1, H + Ai + Aj + m + " +lon_0=-48" + s + N + S + E + A, 1, H + Ai + Aj + m + " +lon_0=-24" + s + N + S + E + A, 1, H + Ai + Aj + m + HN + s + N + S + E + A, 1, H + Ai + Aj + m + II + s + N + S + E + A, 1, H + Ai + Aj + m + SQ + s + N + S + E + A, 1, H + Ai + Aj + m + Yt + s + N + S + E + A, 1, H + Ai + Aj + m + Mj + s + N + S + E + A, 1, H + Ai + Aj + m + KF + s + N + S + E + A, 1, H + Ai + Aj + m + UN + s + N + S + E + A, 1, H + Ai + Aj + m + UO + s + N + S + E + A, 1, BP + m + AW + SX + " +k=1" + s + N + S + E + A, 1, BP + m + AW + YK + " +k=1" + s + N + S + E + A, 1, BP + m + AW + " +lon_0=-105 +k=1" + s + N + S + E + A, 1, BP + m + AW + UR + " +k=1" + s + N + S + E + A, 1, BP + m + AW + " +lon_0=-45 +k=1" + s + N + S + E + A, 1, BP + m + AW + " +lon_0=-15 +k=1" + s + N + S + E + A, 1, BP + m + AW + Gj + " +k=1" + s + N + S + E + A, 1, BP + m + AW + JS + " +k=1" + s + N + S + E + A, 1, BP + m + AW + HP + " +k=1" + s + N + S + E + A, 1, BP + m + AW + EN + " +k=1" + s + N + S + E + A, 1, BP + m + AW + Fn + " +k=1" + s + N + S + E + A, 1, BP + m + AW + NZ + " +k=1" + s + N + S + E + A, 1, BP + m + AW + ON + " +k=1" + s + N + S + E + A, 1, BP + m + AW + Bu + " +k=1" + s + N + S + E + A, 1, BP + m + AW + " +lon_0=-30 +k=1" + s + N + S + E + A, 1, BP + m + AW + Ia + " +k=1" + s + N + S + E + A, 1, BP + m + AW + Hq + " +k=1" + s + N + S + E + A, 1, BP + m + AW + Oe + " +k=1" + s + N + S + E + A, 1, BP + m + AW + HN + " +k=1" + s + N + S + E + A, 1, H + Ai + Aj + " +lat_0=-78" + Ql + s + N + S + E + A, 2, I + RG + o + C + Bm + E + A, 1, I + Ro + o + C + Bm + E + A, 1, I + RH + o + C + Bm + E + A, 1, I + TW + o + C + Bm + E + A, 1, H + WF + " +lat_2=58" + WG + II + O + " +y_0=6375000" + C + Lw + E + A, 1, H + WF + " +lat_2=58" + WG + II + O + " +y_0=6375000" + C + B + E + A, 1, I + RH + o + R + Lq + E + A, 1, I + RH + o + R + Kc + E + A, 1, I + Ro + o + R + Kg + E + A, 1, I + Ro + o + R + Kh + E + A, 1, I + RG + o + R + QN + E + A, 1, I + JM + j + TD + E + A, 1, H + " +lat_1=-30.75 +lat_2=-35.75 +lat_0=-33.25" + Od + " +x_0=9300000" + Gb + C + B + E + A, 1, DT + Yy + SY + L + Mt + s + QZ + X + E + A, 1, DT + Yy + SY + L + Mt + s + QZ + C + B + E + A, 1, DT + Yy + SY + L + Mt + s + QZ + C + B + E + A, 1, I + ID + R + NH + E + A, 1, I + ID + C + B + E + A, 3, D + L + Yx + V + O + Ak + c + E + A, 1, D + L + II + V + O + Ak + c + E + A, 1, D + L + IH + V + O + Ak + c + E + A, 1, D + L + " +lon_0=14" + V + O + Ak + c + E + A, 1, D + L + " +lon_0=16" + V + O + Ak + c + E + A, 1, D + L + QR + V + O + Ak + c + E + A, 1, D + L + UI + V + O + Ak + c + E + A, 1, D + L + Yx + V + O + Ak + c + E + A, 1, D + L + II + V + O + Ak + c + E + A, 1, D + L + UJ + V + O + Ak + c + E + A, 1, D + L + RP + V + O + Ak + c + E + A, 1, D + L + Ia + V + O + Ak + c + E + A, 1, GU + " +lat_0=52.16666666666666 +lon_0=19.16666666666667 +k=0.999714" + O + Ae + M + b + E + A, 1, D + L + Gj + " +k=1" + Eg + N + M + b + E + A, 1, D + L + QR + " +k=1" + Jt + N + M + b + E + A, 1, D + L + Gl + " +k=1" + IM + N + M + b + E + A, 1, D + L + II + " +k=1" + MS + N + M + b + E + A, 1, D + L + Gj + " +k=1" + Bo + N + M + b + E + A, 1, D + L + Gl + " +k=1" + DP + N + M + b + E + A, 1, D + L + HO + " +k=1" + Eg + N + M + b + E + A, 1, I + Rc + o + R + TE + E + A, 1, H + " +lat_1=-20.19506944444445 +lat_0=-20.19506944444445 +lon_0=57.52182777777778 +k_0=1" + BZ + AH + c + Qf + E + A, 1, DT + " +lat_1=55" + QY + Yu + Ms + s + N + C + B + E + A, 1, D + L + IH + V + O + Ak + c + GN + E + A, 1, D + L + " +lon_0=14" + V + O + Ak + c + GN + E + A, 1, D + L + " +lon_0=16" + V + O + Ak + c + GN + E + A, 1, I + KC + o + c + GN + E + A, 1, I + Ja + C + B + E + A, 1, I + KA + C + B + E + A, 1, I + Oq + C + B + E + A, 1, D + L + II + UG + O + N + C + B + E + A, 1, H + LM + IJ + " +lat_0=63.390675" + UY + " +x_0=6200000" + Fq + C + B + E + A, 1, H + LM + IJ + " +lat_0=63.390675" + UY + " +x_0=6200000" + Fq + C + B + E + A, 2, D + " +lat_0=0.1 +lon_0=21.95 +k=1" + Bv + N + M + F + E + A, 1, D + " +lat_0=0.1 +lon_0=24.95 +k=1 +x_0=1250000" + N + M + F + E + A, 1, D + " +lat_0=0.1 +lon_0=27.95 +k=1 +x_0=2250000" + N + M + F + E + A, 1, I + JN + o + R + E + A, 1, I + JN + o + R + E + A, 1, D + Gm + QQ + " +k=1 +x_0=615000 +y_0=810000" + Gn + Qg + E + A, 3, H + Et + Eu + LT + NW + Rh + N + C + B + E + A, 2, H + FC + OD + Dr + CR + OE + N + C + B + E + A, 1, H + FC + OD + Dr + CR + OE + N + C + B + t + A, 1, H + MW + FB + BB + Ea + a + N + C + B + E + A, 1, H + MW + FB + BB + Ea + a + N + C + B + J + A, 1, H + Dp + Dq + y + Ea + a + N + C + B + E + A, 1, H + Dp + Dq + y + Ea + a + N + C + B + J + A, 2, I + Ja + c + E + A, 1, I + KA + c + E + A, 1, I + Oq + c + E + A, 1, I + Nq + X + E + A, 1, I + PL + X + E + A, 1, I + Nq + C + B + E + A, 1, I + PL + C + B + E + A, 1, I + KA + R + E + A, 1, CU + Qi + aF + " +alpha=323.0257964666666" + Ph + " +x_0=804671" + N + KE + GZ + C + E + A, 1, CU + Qi + Yz + aU + Ph + s + N + KE + If + C + E + A, 1, Ck + " +lat_0=2.121679744444445 +lon_0=103.4279362361111 +x_0=-14810.562 +y_0=8758.32" + C + E + A, 1, Ck + " +lat_0=2.682347636111111 +lon_0=101.9749050416667 +x_0=3673.785 +y_0=-4240.573" + C + E + A, 1, Ck + " +lat_0=3.769388088888889 +lon_0=102.3682989833333 +x_0=-7368.228 +y_0=6485.858" + C + E + A, 1, Ck + " +lat_0=3.68464905 +lon_0=101.3891079138889 +x_0=-34836.161 +y_0=56464.049" + C + E + A, 1, Ck + " +lat_0=4.9762852 +lon_0=103.070275625 +x_0=19594.245 +y_0=3371.895" + C + E + A, 1, Ck + " +lat_0=5.421517541666667 +lon_0=100.3443769638889 +x_0=-23.414 +y_0=62.283" + C + E + A, 1, Ck + " +lat_0=5.964672713888889 +lon_0=100.6363711111111" + s + N + C + E + A, 1, Ck + " +lat_0=4.859063022222222 +lon_0=100.8154105861111 +x_0=-1.769 +y_0=133454.779" + C + E + A, 1, Ck + " +lat_0=5.972543658333334 +lon_0=102.2952416694444 +x_0=13227.851 +y_0=8739.894" + C + E + A, 1, D + L + QR + " +k=1" + O + N + R + At + E + A, 1, D + L + IG + " +k=1" + Eg + N + R + At + E + A, 1, JU + PS + " +lat_ts=42" + s + N + M + F + E + A, 1, D + L + Ry + " +k=1 +x_0=60500000" + N + M + F + E + A, 1, D + L + Ry + " +k=1 +x_0=60500000" + N + M + G + E + A, 1, I + KD + c + EU + E + A, 1, I + JZ + c + EU + E + A, 1, I + JM + c + EU + E + A, 1, H + Qq + Li + JS + PZ + AV + aG + c + E + A, 1, JU + HN + " +k=1" + s + N + S + E + A, 1, D + L + KB + " +k=1" + Bo + N + Y + E + A, 1, D + L + IH + " +k=1" + DP + N + Y + E + A, 1, D + L + IH + " +k=1" + DP + N + Y + E + A, 1, D + L + Gj + " +k=1" + Eg + N + Y + E + A, 1, D + L + SZ + " +k=0.9992" + O + N + C + B + E + A, 1, D + L + SZ + " +k=0.9992" + s + N + C + B + E + A, 1, D + L + SZ + " +k=0.9992" + O + N + C + B + E + A, 1, D + L + SZ + " +k=0.9992" + s + N + C + B + E + A, 1, H + Et + Eu + LT + NW + Z + N + C + B + J + A, 1, I + Mh + j + Fu + E + A, 1, I + Mi + j + Fu + E + A, 1, Ck + Vt + Vu + " +x_0=40243.57775604237 +y_0=19069.93351512578" + Ee + Ef + ML + A, 1, He + Hr + HN + s + N + ZX + ZY + E + A, 1, He + m + HN + s + N + ZX + ZY + E + A, 1, "+proj=cea" + HN + " +lat_ts=30" + s + N + ZX + ZY + E + A, 1, BP + Hr + " +lat_ts=70 +lon_0=-45 +k=1" + s + N + ZZ + Ri + E + A, 1, BP + m + " +lat_ts=-70" + HN + " +k=1" + s + N + ZZ + Ri + E + A, 1, BP + Hr + " +lat_ts=70 +lon_0=-45 +k=1" + s + N + S + E + A, 1, D + " +lat_0=1.366666666666667 +lon_0=103.8333333333333 +k=1 +x_0=28001.642 +y_0=38744.572" + j + E + A, 1, H + " +lat_1=18 +lat_2=24 +lat_0=21" + Im + O + Ae + T + Q + E + A, 1, H + LM + Nh + " +lat_0=47.5" + Ig + u + Is + C + B + E + A, 1, H + EB + EC + Fo + GG + AV + GJ + C + B + J + A, 1, H + AY + ED + Fs + GG + AG + N + C + B + J + A, 1, H + EE + EF + AQ + Fl + Au + N + C + B + J + A, 1, H + EG + EH + f + CV + Au + Gt + C + B + J + A, 1, D + CQ + DF + V + Gu + MN + C + B + J + A, 1, D + CQ + DG + V + AG + Hh + C + B + J + A, 1, D + CQ + DH + V + An + NE + C + B + J + A, 1, D + BA + Gp + V + Bn + N + C + B + J + A, 1, H + EB + EC + Fo + GG + AV + GJ + C + B + J + A, 1, H + AY + ED + Fs + GG + AG + N + C + B + J + A, 1, H + EE + EF + AQ + Fl + Au + N + C + B + J + A, 1, H + EG + EH + f + CV + Au + Gt + C + B + J + A, 1, D + CQ + DF + V + Gu + MN + C + B + J + A, 1, D + CQ + DG + V + AG + Hh + C + B + J + A, 1, D + CQ + DH + V + An + NE + C + B + J + A, 1, D + BA + Gp + V + Bn + N + C + B + J + A, 1, H + Dx + Dy + BC + IF + Au + N + C + B + J + A, 1, H + Dz + Mq + EA + IF + Au + Gt + C + B + J + A, 1, D + f + Cz + EQ + BF + N + C + B + J + A, 1, D + f + DA + Am + MO + N + C + B + J + A, 1, D + Fp + DI + AO + BF + N + C + B + J + A, 1, D + EI + GE + Lb + JV + N + C + B + J + A, 1, I + JM + c + Gg + E + A, 1, I + Me + c + Gg + E + A, 1, H + Dx + Dy + BC + IF + Au + N + C + B + J + A, 1, H + Dz + Mq + EA + IF + Au + Gt + C + B + J + A, 1, D + f + Cz + EQ + BF + N + C + B + J + A, 1, D + f + DA + Am + MO + N + C + B + J + A, 1, D + Fp + DI + AO + BF + N + C + B + J + A, 1, D + EI + GE + Lb + JV + N + C + B + J + A, 1, H + Ks + Kt + " +lat_0=50.797815" + WH + " +x_0=150328 +y_0=166262" + C + B + E + A, 1, H + " +lat_1=18" + OX + Ld + " +k_0=1" + YL + " +y_0=650000" + j + B + E + A, 1, I + Ik + j + B + E + A, 1, I + IC + j + B + E + A, 1, H + FS + FT + IY + Hg + Eb + N + C + B + J + A, 1, H + OH + OI + OJ + Bi + Eb + N + C + B + J + A, 1, H + CD + CE + " +lat_0=25.5" + Bi + Eb + N + C + B + J + A, 2, H + OL + Ff + EJ + Ag + a + N + C + B + J + A, 1, H + FS + FT + IY + Hg + Eb + N + C + B + J + A, 1, H + OH + OI + OJ + Bi + Eb + N + C + B + J + A, 1, H + Fd + Fe + AL + CS + a + N + C + B + J + A, 1, H + OL + Ff + EJ + Ag + a + N + C + B + J + A, 1, D + " +lat_0=-17 +lon_0=178.75 +k=0.99985" + Bd + LV + T + P + E + A, 1, I + Ja + AU + BN + Nm + E + A, 1, I + KA + AU + BN + Nm + E + A, 1, D + YM + Rj + JE + O + N + C + B + E + A, 1, D + YM + Rj + JE + O + N + C + B + E + A, 1, D + IY + IV + Pc + h + N + C + B + E + A, 1, D + Gm + OS + BG + a + N + C + B + E + A, 1, DT + " +lat_1=55" + QY + Yu + Ms + s + N + C + B + E + A, 1, CU + " +lat_0=57" + Ku + Kv + V + LX + EO + KE + GZ + C + B + E + A, 1, D + Ft + YN + V + O + N + C + B + E + A, 1, D + Ft + YO + V + O + N + C + B + E + A, 1, D + Ft + ON + V + O + N + C + B + E + A, 1, D + Ft + Ms + V + O + N + C + B + E + A, 1, D + Ft + KI + V + O + N + C + B + E + A, 1, D + Ft + YP + V + O + N + C + B + E + A, 1, D + Ft + YQ + V + O + N + C + B + E + A, 1, D + Ft + SW + V + O + N + C + B + E + A, 1, H + Kw + Kx + UK + YR + BZ + N + C + B + E + A, 1, D + Bl + Co + V + EX + N + C + B + E + A, 1, D + Bl + Co + V + EX + N + C + B + t + A, 1, D + Bl + Cn + V + EX + N + C + B + E + A, 1, D + Bl + Cn + V + EX + N + C + B + t + A, 1, D + Bl + Iv + BG + EX + N + C + B + E + A, 1, D + Bl + Iv + BG + EX + N + C + B + t + A, 1, H + Dx + Dy + BC + IF + u + N + C + B + E + A, 1, H + Dx + Dy + BC + IF + Au + N + C + B + J + A, 1, H + Dz + Mq + EA + IF + u + Is + C + B + E + A, 1, H + Dz + Mq + EA + IF + Au + Gt + C + B + J + A, 1, DT + Yy + SY + L + Mt + s + QZ + C + B + E + A, 1, H + DW + Jn + y + HA + Bd + Ae + C + B + E + A, 1, H + DW + Jn + y + HA + Ac + AD + C + B + J + A, 1, H + DX + DY + AA + HA + Bd + Ae + C + B + E + A, 1, H + DX + DY + AA + HA + Ac + AD + C + B + J + A, 1, H + Ap + DZ + Ml + AJ + Bd + Ae + C + B + E + A, 1, H + Ap + DZ + Ml + AJ + Ac + AD + C + B + J + A, 1, H + LO + QS + Da + Mm + Bd + Ae + C + B + E + A, 1, H + LO + QS + Da + Mm + Ac + AD + C + B + J + A, 1, H + Db + Dc + Mn + Ir + Bd + Ae + C + B + E + A, 1, H + Db + Dc + Mn + Ir + Ac + AD + C + B + J + A, 1, H + Dd + De + Df + Iw + Bd + Ae + C + B + E + A, 1, H + Dd + De + Df + Iw + Ac + AD + C + B + J + A, 1, H + LP + LQ + CY + Ba + Fw + Fx + C + B + E + A, 1, H + LP + LQ + CY + Ba + Bw + CL + C + B + J + A, 1, H + Eh + Ei + y + Ba + Fw + Fx + C + B + E + A, 1, H + Eh + Ei + y + Ba + Bw + CL + C + B + J + A, 1, H + Ap + Dg + f + Ba + Fw + Fx + C + B + E + A, 1, H + Ap + Dg + f + Ba + Bw + CL + C + B + J + A, 1, H + Dh + Mo + Di + Jq + QG + QH + C + B + E + A, 1, H + Dh + Mo + Di + Jq + MC + MD + C + B + J + A, 1, D + Ch + Cp + Mp + h + N + C + B + E + A, 1, D + Ch + Cp + Mp + AE + N + C + B + J + A, 1, D + Aq + CR + Am + h + N + C + B + E + A, 1, D + Aq + CR + Am + AE + N + C + B + J + A, 1, DT + " +lat_1=24" + YG + " +lat_0=24" + NV + u + N + C + B + E + A, 1, H + LR + Dj + QT + LS + a + N + C + B + E + A, 1, H + LR + Dj + QT + LS + a + N + C + B + J + A, 1, D + Aq + Ob + Am + h + N + C + B + E + A, 1, D + Aq + Ob + Am + AE + N + C + B + J + A, 1, D + Gm + Cq + V + h + N + C + B + E + A, 1, D + Gm + Cq + V + AE + N + C + B + J + A, 1, D + Gm + Cr + V + EW + N + C + B + E + A, 1, D + Gm + Cr + V + CM + N + C + B + J + A, 1, D + p + Jb + BJ + O + N + C + B + E + A, 1, D + p + Jb + BJ + AF + N + C + B + J + A, 1, D + p + Cs + BJ + h + N + C + B + E + A, 1, D + p + Cs + BJ + AE + N + C + B + J + A, 1, D + p + Ix + BG + CX + N + C + B + E + A, 1, D + p + Ix + BG + ME + N + C + B + J + A, 1, D + f + Cz + EQ + AI + N + C + B + E + A, 1, D + f + Cz + EQ + BF + N + C + B + J + A, 1, D + f + DA + Am + EW + N + C + B + E + A, 1, D + f + DA + Am + MO + N + C + B + J + A, 1, D + DM + DB + AO + BU + KJ + C + B + E + A, 1, D + DM + DB + AO + MM + GI + C + B + J + A, 1, D + DM + DC + AO + HT + KJ + C + B + E + A, 1, D + DM + DC + AO + HT + GI + C + B + J + A, 1, H + EB + EC + Fo + GG + AV + AH + C + B + E + A, 1, H + EB + EC + Fo + GG + AV + GJ + C + B + J + A, 1, H + AY + ED + Fs + GG + O + N + C + B + E + A, 1, H + AY + ED + Fs + GG + AG + N + C + B + J + A, 1, H + EE + EF + AQ + Fl + u + N + C + B + E + A, 1, H + EE + EF + AQ + Fl + Au + N + C + B + J + A, 1, H + EG + EH + f + CV + u + Is + C + B + E + A, 1, H + EG + EH + f + CV + Au + Gt + C + B + J + A, 1, H + Az + DV + DM + Jo + O + N + C + B + E + A, 1, H + Az + DV + DM + Jo + AF + N + C + B + J + A, 1, H + Fi + Fj + AB + EY + AV + AH + C + B + E + A, 1, H + Fi + Fj + AB + EY + AV + CN + C + B + J + A, 1, H + Ej + Ek + AB + EY + O + Ae + C + B + E + A, 1, H + Ej + Ek + AB + EY + AF + AD + C + B + J + A, 1, H + FS + FT + IY + Hg + BZ + N + C + B + E + A, 1, H + FS + FT + IY + Hg + Eb + N + C + B + J + A, 1, H + OH + OI + OJ + Bi + BZ + N + C + B + E + A, 1, H + OH + OI + OJ + Bi + Eb + N + C + B + J + A, 1, D + YM + Rj + JE + O + N + C + B + E + A, 1, D + AL + Rf + JE + EW + N + C + B + E + A, 1, D + BD + Rg + JE + AI + N + C + B + E + A, 1, D + AK + HJ + V + AI + N + C + B + E + A, 1, D + BD + DD + AO + HT + N + C + B + E + A, 1, H + MU + Nz + AA + Ld + u + N + C + B + E + A, 1, H + AY + CF + Br + BI + AG + GJ + C + B + J + A, 1, D + Kn + Sf + AO + e + N + i + GB + J + A, 1, D + Ko + KO + AO + e + N + i + GB + J + A, 1, D + GV + KI + Jl + e + N + i + GB + J + A, 1, D + Kp + Sg + Jl + e + N + i + GB + J + A, 1, D + Kq + KP + " +k=1" + e + N + i + GB + J + A, 1, H + JF + CG + AQ + BI + AG + NF + C + B + J + A, 1, H + JG + CH + f + BI + AG + Fq + C + B + J + A, 1, H + AY + CF + Br + BI + AG + GJ + C + B + J + A, 1, H + JF + CG + AQ + BI + AG + NF + C + B + J + A, 1, H + JG + CH + f + BI + AG + Fq + C + B + J + A, 1, He + Hr + Ry + s + N + S + E + A, 1, He + Hr + ON + s + N + S + E + A, 1, He + Hr + CS + s + N + S + E + A, 1, He + Hr + " +lon_0=-40" + s + N + S + E + A, 1, He + Hr + Lu + s + N + S + E + A, 1, He + Hr + Hq + s + N + S + E + A, 1, DT + " +lat_1=-18" + ZT + L + Il + s + N + C + B + E + A, 1, DT + WI + " +lat_2=68 +lat_0=59 +lon_0=-132.5" + O + Ae + C + B + E + A, 1, DT + WI + " +lat_2=68 +lat_0=59 +lon_0=-132.5" + O + Ae + C + B + E + A, 1, H + " +lat_1=62 +lat_2=70" + L + " +lon_0=-112" + s + N + C + B + E + A, 1, H + " +lat_1=62 +lat_2=70" + L + " +lon_0=-112" + s + N + C + B + E + A, 1, H + MU + Nz + AA + Ld + MF + N + C + B + J + A, 1, H + Em + En + Ip + IL + O + N + C + B + E + A, 1, H + Em + En + Ip + IL + AF + N + C + B + J + A, 1, H + El + Dk + Ip + GE + h + Mk + C + B + E + A, 1, H + El + Dk + Ip + GE + AE + Mk + C + B + J + A, 1, H + OA + Er + Es + BE + Pk + N + C + B + E + A, 1, H + OA + Er + Es + BE + MH + N + C + B + t + A, 1, H + Eo + Ep + Eq + Jh + Tl + N + C + B + E + A, 1, H + Eo + Ep + Eq + Jh + MG + N + C + B + t + A, 1, CU + Kr + " +lonc=-86" + QI + AP + QJ + PY + KE + QK + C + B + E + A, 1, H + Bq + OB + Fo + BE + LU + N + C + B + E + A, 1, H + Bq + OB + Fo + BE + OT + N + C + B + t + A, 1, H + Ma + FW + IP + Js + CX + EK + C + B + E + A, 1, H + FU + FV + Iq + DE + CX + EK + C + B + E + A, 1, H + FX + FY + Nj + Na + CX + EK + C + B + E + A, 1, D + Hj + Ct + CP + AI + N + C + B + E + A, 1, D + Hj + Ct + CP + BF + N + C + B + J + A, 1, D + Hj + Bx + CP + EW + N + C + B + E + A, 1, D + Hj + Bx + CP + CM + N + C + B + J + A, 1, D + Cd + Hg + BG + O + N + C + B + E + A, 1, D + Cd + RS + BG + Bv + N + C + B + E + A, 1, D + Id + RT + Am + YC + N + C + B + E + A, 1, H + LM + RK + MV + IS + a + N + C + B + E + A, 1, H + LM + RK + MV + IS + DR + N + C + B + t + A, 1, H + JT + Jn + FZ + CS + O + N + C + B + E + A, 1, D + CQ + DG + V + O + Hh + C + B + E + A, 1, D + CQ + DG + V + AG + Hh + C + B + J + A, 1, D + CQ + DF + V + h + Tm + C + B + E + A, 1, D + CQ + DF + V + Gu + MN + C + B + J + A, 1, D + CQ + DH + V + CX + LV + C + B + E + A, 1, D + CQ + DH + V + An + NE + C + B + J + A, 1, D + Fp + DI + AO + AI + N + C + B + E + A, 1, D + Fp + DI + AO + BF + N + C + B + J + A, 1, D + BA + Gp + V + Bn + N + C + B + E + A, 1, D + BA + Gp + V + Bn + N + C + B + J + A, 1, D + Bl + Iy + V + O + N + C + B + E + A, 1, D + Bl + Iy + V + AF + N + C + B + J + A, 1, D + Bl + Cu + Hm + OC + N + C + B + E + A, 1, D + Bl + Cu + Hm + OC + N + C + B + J + A, 1, D + Bl + Cv + Iz + YD + N + C + B + E + A, 1, D + Bl + Cv + Iz + MI + N + C + B + J + A, 1, D + Fs + Cw + Ad + Bv + N + C + B + E + A, 1, D + Fs + Cw + Ad + MJ + N + C + B + J + A, 1, D + BA + Gp + V + Bn + N + C + B + E + A, 1, D + BA + Gp + V + Bn + N + C + B + J + A, 1, H + Dl + Dm + BB + Oc + AI + N + C + B + E + A, 1, H + Dl + Dm + BB + Oc + BF + N + C + B + J + A, 1, D + Fs + Cx + Ad + Qo + N + C + B + E + A, 1, D + Fs + Cx + Ad + MK + N + C + B + J + A, 1, H + Et + Eu + LT + NW + Rh + N + C + B + E + A, 1, H + Et + Eu + LT + NW + Z + N + C + B + J + A, 1, H + BH + Ev + Ib + EZ + a + N + C + B + E + A, 1, H + BH + Ev + Ib + EZ + DR + N + C + B + t + A, 1, H + Ew + Ex + Be + EZ + a + N + C + B + E + A, 1, H + Ew + Ex + Be + EZ + DR + N + C + B + t + A, 1, H + OK + Fa + BY + ET + a + N + C + B + E + A, 1, H + Fb + Fc + Ch + ET + a + N + C + B + E + A, 1, H + Dn + Ey + QU + Fl + a + N + C + B + E + A, 1, H + Dn + Ey + QU + Fl + a + N + C + B + J + A, 1, H + Ez + FA + Do + Fl + a + N + C + B + E + A, 1, H + Ez + FA + Do + Fl + a + N + C + B + J + A, 1, H + JT + Hl + GH + AJ + u + N + C + B + E + A, 1, H + JT + Hl + GH + AJ + Lc + N + C + B + t + A, 1, H + PP + CZ + AK + AJ + Ci + N + C + B + E + A, 1, H + PP + CZ + AK + AJ + KL + N + C + B + t + A, 1, H + PQ + Ca + p + AJ + AV + N + C + B + E + A, 1, H + PQ + Ca + p + AJ + KM + N + C + B + t + A, 1, H + MW + FB + BB + Ea + a + N + C + B + E + A, 1, H + MW + FB + BB + Ea + a + N + C + B + J + A, 1, H + Dp + Dq + y + Ea + a + N + C + B + E + A, 1, H + Dp + Dq + y + Ea + a + N + C + B + J + A, 1, D + EI + GE + Lb + BU + N + C + B + E + A, 1, D + EI + GE + Lb + JV + N + C + B + J + A, 1, H + FC + OD + Dr + CR + OE + N + C + B + E + A, 1, H + FC + OD + Dr + CR + OE + N + C + B + t + A, 1, H + Fd + Fe + AL + CS + a + N + C + B + E + A, 1, H + Fd + Fe + AL + CS + a + N + C + B + J + A, 1, H + OL + Ff + EJ + Ag + a + N + C + B + E + A, 1, H + OL + Ff + EJ + Ag + a + N + C + B + J + A, 1, H + FD + MX + BC + MQ + a + N + C + B + E + A, 1, H + FD + MX + BC + MQ + a + N + C + B + J + A, 1, H + FH + FI + Cb + Ag + EW + Fq + C + B + E + A, 1, H + FH + FI + Cb + Ag + CM + Fq + C + B + J + A, 1, DT + OM + RO + OX + CS + AV + Hh + C + B + E + A, 1, H + OM + RO + OX + CS + AV + Ju + C + B + E + A, 1, H + FE + MY + QV + Jr + h + AH + C + B + E + A, 1, H + FE + MY + QV + Jr + AE + CN + C + B + J + A, 1, H + FF + FG + Ds + CV + a + Cl + C + B + E + A, 1, H + FF + FG + Ds + CV + a + Gr + C + B + J + A, 1, H + CD + CE + Cc + CV + AI + Ju + C + B + E + A, 1, H + CD + CE + Cc + CV + BF + Nf + C + B + J + A, 1, H + FJ + FK + Dt + Ji + a + LV + C + B + E + A, 1, H + FJ + FK + Dt + Ji + a + Ne + C + B + J + A, 1, H + JF + CG + AQ + BI + O + Cl + C + B + E + A, 1, H + JF + CG + AQ + BI + Gd + RY + C + B + t + A, 1, H + JF + CG + AQ + BI + AG + NF + C + B + J + A, 1, H + AY + CF + Br + BI + O + AH + C + B + E + A, 1, H + AY + CF + Br + BI + Gd + Pw + C + B + t + A, 1, H + AY + CF + Br + BI + AG + GJ + C + B + J + A, 1, H + JG + CH + f + BI + O + Fq + C + B + E + A, 1, H + JG + CH + f + BI + Gd + RZ + C + B + t + A, 1, H + JG + CH + f + BI + AG + Fq + C + B + J + A, 1, D + Fp + LW + JA + O + N + C + B + E + A, 1, H + OF + FL + AA + GF + Bo + Cl + C + B + E + A, 1, H + OF + FL + AA + GF + Gs + Gr + C + B + J + A, 1, H + Az + Du + AB + GF + Bo + AH + C + B + E + A, 1, H + Az + Du + AB + GF + Gs + CN + C + B + J + A, 1, H + BH + OG + Ib + Cy + O + N + C + B + E + A, 1, H + BH + OG + Ib + Cy + AF + N + C + B + J + A, 1, H + FM + FN + Dv + AJ + O + N + C + B + E + A, 1, H + FM + FN + Dv + AJ + AF + N + C + B + J + A, 1, H + Mb + RN + Mr + Ga + a + N + C + B + E + A, 1, H + Fg + Fh + QX + CR + a + N + C + B + E + A, 1, H + Jc + MZ + AL + Bu + a + N + C + B + E + A, 1, H + Jc + MZ + AL + Bu + a + N + C + B + J + A, 1, H + FO + FP + Dw + Bu + a + N + C + B + E + A, 1, H + FO + FP + Dw + Bu + a + N + C + B + J + A, 1, H + FQ + FR + PR + Bu + a + N + C + B + E + A, 1, H + FQ + FR + PR + Bu + a + N + C + B + J + A, 1, D + L + Bu + AP + YF + Sh + C + B + E + A, 1, D + CA + DJ + Ad + h + N + C + B + E + A, 1, D + CA + DK + Ad + u + EK + C + B + E + A, 1, D + CA + JB + Ad + a + N + C + B + E + A, 1, D + CA + DL + Ad + CX + EK + C + B + E + A, 1, I + Nq + C + B + E + A, 1, I + PL + C + B + E + A, 1, I + SK + C + B + E + A, 1, I + TV + C + B + E + A, 1, I + Xz + C + B + E + A, 1, I + TY + C + B + E + A, 1, I + RG + C + B + E + A, 1, I + Ro + C + B + E + A, 1, I + RH + C + B + E + A, 1, I + TW + C + B + E + A, 1, I + TX + C + B + E + A, 1, I + QE + C + B + E + A, 1, I + Ns + C + B + E + A, 1, I + Nt + C + B + E + A, 1, I + Nu + C + B + E + A, 1, I + Nw + C + B + E + A, 1, I + NP + C + B + E + A, 1, I + NQ + C + B + E + A, 1, I + Ik + C + B + E + A, 1, I + IC + C + B + E + A, 1, I + Hi + C + B + E + A, 1, D + " +lat_0=-21.11666666666667 +lon_0=55.53333333333333 +k=1 +x_0=160000" + Rz + R + SJ + E + A, 1, H + OK + Fa + BY + ET + a + N + C + B + J + A, 1, H + Fb + Fc + Ch + ET + a + N + C + B + J + A, 1, D + CA + DJ + Ad + Gu + N + C + B + J + A, 1, D + CA + DK + Ad + Au + Ao + C + B + J + A, 1, D + CA + JB + Ad + a + N + C + B + J + A, 1, D + CA + DL + Ad + An + Ao + C + B + J + A, 1, H + OK + Fa + BY + ET + a + N + C + B + J + A, 1, H + Fb + Fc + Ch + ET + a + N + C + B + J + A, 1, D + CA + DJ + Ad + Gu + N + C + B + J + A, 1, D + CA + DK + Ad + Au + Ao + C + B + J + A, 1, D + CA + JB + Ad + a + N + C + B + J + A, 1, D + CA + DL + Ad + An + Ao + C + B + J + A, 1, I + QE + C + B + E + A, 1, I + Ns + C + B + E + A, 1, I + Nt + C + B + E + A, 1, I + Nu + C + B + E + A, 1, I + Nw + C + B + E + A, 1, I + NP + C + B + E + A, 1, I + NQ + C + B + E + A, 1, I + Ik + C + B + E + A, 1, I + IC + C + B + E + A, 1, I + Hi + C + B + E + A, 1, I + TY + C + B + E + A, 1, I + RG + C + B + E + A, 2, H + OK + Fa + BY + ET + a + N + C + B + J + A, 1, H + Fb + Fc + Ch + ET + a + N + C + B + J + A, 1, D + CA + DJ + Ad + Gu + N + C + B + J + A, 1, D + CA + DK + Ad + Au + Ao + C + B + J + A, 1, D + CA + JB + Ad + a + N + C + B + J + A, 1, D + CA + DL + Ad + An + Ao + C + B + J + A, 1, D + GV + KI + Jl + AG + N + C + B + J + A, 1, D + GV + KI + Jl + AG + N + C + B + J + A, 1, I + Io + C + B + E + A, 1, H + " +lat_1=-54 +lat_2=-54.75 +lat_0=-55 +lon_0=-37" + s + N + S + E + A, 1, D + " +lat_0=39.66825833333333 +lon_0=-8.133108333333334 +k=1" + s + N + C + B + E + A, 1, D + Za + Si + " +k=1" + u + CO + C + B + E + A, 1, D + L + YE + V + O + N + C + B + E + A, 1, H + " +lat_1=45.91666666666666 +lat_2=43.08333333333334" + L + YE + s + N + C + B + E + A, 1, I + KC + C + B + E + A, 1, I + NR + C + B + E + A, 1, I + Gz + i + TQ + E + A, 1, D + " +lat_0=32 +lon_0=-64.75 +k=1 +x_0=550000" + EK + j + B + E + A, 1, D + L + KK + V + s + N + X + E + A, 1, D + L + Jb + V + s + N + X + E + A, 1, D + L + Lj + V + s + N + X + E + A, 2, D + L + KK + V + s + N + C + B + E + A, 1, D + L + Jb + V + s + N + C + B + E + A, 1, D + L + Lj + V + s + N + C + B + E + A, 2, D + L + KK + V + s + N + C + B + E + A, 1, D + L + Jb + V + s + N + C + B + E + A, 1, D + L + Lj + V + s + N + C + B + E + A, 2, D + " +lat_0=-25.06855261111111 +lon_0=-130.1129671111111 +k=1 +x_0=14200 +y_0=15500" + j + B + E + A, 1, I + TX + o + R + Ta + E + A, 4, D + L + ZW + " +k=1" + Bo + Ak + C + B + E + A, 1, D + L + " +lon_0=169 +k=1" + Bo + Ak + C + B + E + A, 1, D + L + " +lon_0=179 +k=1" + Bo + Ak + C + B + E + A, 1, D + L + " +lon_0=-178 +k=1" + Bo + Ak + C + B + E + A, 2, D + L + Si + " +k=1" + Bo + Ak + C + B + E + A, 1, D + L + Gj + V + O + EO + C + B + E + A, 1, H + " +lat_1=23 +lat_2=21.7 +lat_0=22.35" + CR + O + " +y_0=280296.016" + X + E + A, 1, H + " +lat_1=21.3 +lat_2=20.13333333333333 +lat_0=20.71666666666667 +lon_0=-76.83333333333333" + O + " +y_0=229126.939" + X + E + A, 1, H + Yv + Nh + IZ + " +lon_0=-70" + CX + N + X + E + A, 1, H + Yv + Nh + IZ + " +lon_0=-70" + CX + N + C + B + E + A, 1, H + Yv + Nh + IZ + " +lon_0=-70" + CX + N + C + B + E + A, 1, D + L + Mt + V + s + N + X + E + A, 1, D + L + Mt + V + s + N + C + B + E + A, 1, D + L + Mt + V + s + N + C + B + E + A, 10, H + Ks + Kt + " +lat_0=50.797815" + WH + " +x_0=649328 +y_0=665262" + C + B + E + A, 2, D + Li + Sj + Tn + O + Pm + C + B + E + A, 1, D + Li + Sj + Tn + O + Pm + C + B + E + A, 1, D + Li + Sj + Tn + O + Pm + C + B + E + A, 3, K + Y + " +towgs84=595.48,121.69,515.35,4.115,-2.9383,0.853,-3.408" + A, 2, K + x + A, 3, K + C + B + A, 1, D + L + ZU + V + Bv + N + C + B + E + A, 1, D + L + ZV + V + Bv + N + C + B + E + A, 1, D + L + ZU + V + Bv + N + x + E + A, 1, D + L + ZV + V + Bv + N + x + E + A, 1, I + Mg + R + Rq + E + A, 3, JU + Oe + " +k=1" + s + N + S + E + A, 1, D + L + KB + " +k=1" + Ci + N + M + b + E + A, 1, D + L + KB + " +k=1" + Ci + N + M + Ar + E + A, 1, D + L + Gj + " +k=1" + Bo + N + M + Ar + E + A, 1, D + L + Gl + " +k=1" + DP + N + M + Ar + E + A, 1, D + L + KB + " +k=1" + Bo + N + M + b + E + A, 1, D + L + IH + " +k=1" + DP + N + M + b + E + A, 1, D + L + HO + " +k=1" + MT + N + M + b + E + A, 1, D + L + Ia + " +k=1" + LY + N + M + b + E + A, 1, D + L + QR + " +k=1" + Jt + N + M + Ar + E + A, 3, GU + " +lat_0=46" + RJ + Rv + O + Ae + M + b + E + A, 1, D + L + " +lon_0=11.30625 +k=1.000006 +x_0=1500025.141 +y_0=-667.282" + C + B + E + A, 1, D + L + " +lon_0=13.55626666666667 +k=1.0000058 +x_0=1500044.695 +y_0=-667.13" + C + B + E + A, 1, D + L + " +lon_0=15.80628452944445 +k=1.00000561024 +x_0=1500064.274 +y_0=-667.711" + C + B + E + A, 1, D + L + " +lon_0=18.0563 +k=1.0000054 +x_0=1500083.521 +y_0=-668.8440000000001" + C + B + E + A, 1, D + L + " +lon_0=20.30631666666667 +k=1.0000052 +x_0=1500102.765 +y_0=-670.706" + C + B + E + A, 1, D + L + " +lon_0=22.55633333333333 +k=1.0000049 +x_0=1500121.846 +y_0=-672.557" + C + B + E + A, 1, H + " +lat_1=-37.5 +lat_2=-44.5 +lat_0=-41 +lon_0=173" + aH + " +y_0=7000000" + C + B + E + A, 1, H + Ai + Aj + m + " +lon_0=157" + O + N + C + B + E + A, 2, D + L + " +lon_0=18.05787 +k=0.99999506 +x_0=100182.7406 +y_0=-6500620.1207" + C + B + E + A, 3, JU + " +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0" + N + " +k=1.0" + E + " +nadgrids=@null +wktext " + A, 16, D + L + RI + " +k=1" + Ht + N + C + B + E + A, 1, D + L + UI + " +k=1" + HV + N + C + B + E + A, 1, D + L + Gl + " +k=1" + Hw + N + C + B + E + A, 1, D + L + Yx + " +k=1" + HW + N + C + B + E + A, 1, D + L + SP + " +k=1" + Hx + N + C + B + E + A, 1, D + L + II + " +k=1" + La + N + C + B + E + A, 1, D + L + RJ + " +k=1" + Hy + N + C + B + E + A, 1, D + L + UJ + " +k=1" + Hz + N + C + B + E + A, 1, D + L + HO + " +k=1" + IA + N + C + B + E + A, 1, D + L + RP + " +k=1" + IB + N + C + B + E + A, 1, D + L + " +lon_0=29 +k=1" + Gx + N + C + B + E + A, 1, D + L + Ia + " +k=1" + IT + N + C + B + E + A, 1, D + L + QQ + " +k=1" + Gc + N + C + B + E + A, 4, K + C + B + A, 1, I + KD + C + B + E + A, 1, I + JZ + C + B + E + A, 1, I + JM + C + B + E + A, 1, D + WJ + " +lon_0=46.5 +k=0.9994" + CX + N + R + n + E + A, 13, K + Y + Aw + A, 6, D + L + Gj + V + O + EO + Y + Aw + E + A, 8, I + Gz + i + Je + E + A, 22, H + " +lat_1=41.25 +lat_2=42.75" + PR + Or + Jv + Tj + C + B + E + A, 1, H + " +lat_1=42.25 +lat_2=43.75" + Nj + Or + Jv + " +y_0=2200000" + C + B + E + A, 1, H + " +lat_1=43.25 +lat_2=44.75" + IZ + Or + Jv + " +y_0=3200000" + C + B + E + A, 1, H + " +lat_1=44.25 +lat_2=45.75" + IP + Or + Jv + " +y_0=4200000" + C + B + E + A, 1, H + " +lat_1=45.25 +lat_2=46.75 +lat_0=46" + Or + Jv + " +y_0=5200000" + C + B + E + A, 1, H + aI + " +lat_2=47.75" + Ib + Or + Jv + " +y_0=6200000" + C + B + E + A, 1, H + " +lat_1=47.25 +lat_2=48.75 +lat_0=48" + Or + Jv + " +y_0=7200000" + C + B + E + A, 1, H + " +lat_1=48.25 +lat_2=49.75 +lat_0=49" + Or + Jv + " +y_0=8200000" + C + B + E + A, 1, H + " +lat_1=49.25 +lat_2=50.75" + Yu + Or + Jv + " +y_0=9200000" + C + B + E + A, 18, H + " +lat_1=37" + YS + GM + Ga + s + N + C + B + E + A, 1, H + " +lat_1=37" + YS + GM + Ga + s + N + C + B + E + A, 1, H + " +lat_1=37" + YS + GM + Ga + s + N + C + B + E + A, 6, BP + m + " +lat_ts=-70" + HN + " +k=1" + s + N + S + E + A, 2, H + LM + IJ + " +lat_0=49 +lon_0=-95" + s + N + C + B + E + A, 1, H + LM + IJ + " +lat_0=49 +lon_0=-95" + s + N + C + B + E + A, 7, D + ZA + Ia + " +k=1" + h + Ae + i + CW + E + A, 1, D + ZA + RP + " +k=1" + h + Ae + i + CW + E + A, 1, D + ZA + UJ + " +k=1" + h + Ae + i + CW + E + A, 1, D + ZA + II + " +k=1" + h + Ae + i + CW + E + A, 2, H + GW + GX + GY + GA + e + N + i + Je + J + A, 1, H + GW + GX + GY + GA + e + Pv + i + Je + J + A, 2, JU + " +lon_0=100 +lat_ts=-41" + s + N + S + E + A, 1, BP + Hr + " +lat_ts=71" + HN + " +k=1" + s + N + S + E + A, 1, BP + Hr + " +lat_ts=75" + HN + " +k=1" + s + N + S + E + A, 1, D + L + " +lon_0=55.33333333333334 +k=1" + O + N + S + E + A, 4, K + PV + A, 1, K + Ok + A, 1, K + x + A, 1, K + Y + A, 1, K + Hn + EL + A, 1, K + HB + A, 1, K + Ee + Ef + A, 1, K + i + A, 2, K + Nc + Nd + A, 1, K + AU + BN + A, 1, K + c + A, 1, K + Bc + BS + A, 1, K + AU + " +b=6356514.996941779" + A, 1, K + By + Ay + A, 1, K + Lo + A, 2, K + GL + Bz + A, 1, K + C + A, 1, K + Gn + A, 1, K + IR + Bh + A, 1, K + R + A, 1, K + C + B + A, 0, K + C + B + A, 1, K + M + A, 1, K + aJ + A, 1, D + L + " +lon_0=28.4 +k=0.9999400000000001" + h + EO + C + B + E + A, 1, K + " +a=6376523" + RA + A, 1, K + Zx + Qy + A, 1, K + Qj + Ho + A, 1, K + j + A, 1, K + j + A, 1, K + " +a=6378136.2 +b=6356751.516927429" + A, 1, K + " +a=6378136.3 +b=6356751.616592146" + A, 1, K + RB + RC + A, 2, K + aK + A, 1, I + Ki + S + E + A, 1, I + Mf + S + E + A, 3, K + Pd + Gq + A, 1, K + HK + Gv + A, 1, K + T + A, 1, K + Lp + Hp + A, 1, K + Go + CT + A, 1, K + C + B + A, 1, K + " +a=6371007 +b=6371007" + A, 1, D + L + IH + V + O + Ak + C + B + E + A, 1, D + L + " +lon_0=14" + V + O + Ak + C + B + E + A, 1, D + L + " +lon_0=16" + V + O + Ak + C + B + E + A, 1, D + L + QR + V + O + Ak + C + B + E + A, 1, K + " +a=6370997 +b=6370997" + A, 1, K + ZX + ZY + A, 1, K + ZZ + Ri + A, 2, D + L + UI + V + O + Ak + C + B + E + A, 1, D + L + Yx + V + O + Ak + C + B + E + A, 1, D + L + II + V + O + Ak + C + B + E + A, 1, D + L + UJ + V + O + Ak + C + B + E + A, 1, D + L + RP + V + O + Ak + C + B + E + A, 1, I + KC + o + C + B + E + A, 1, I + NR + o + C + B + E + A, 1, I + Ki + o + C + B + E + A, 8, I + MB + o + R + TF + E + A, 4, K + C + B + A, 6, K + C + B + A, 1, I + SL + C + B + E + A, 1, I + Ja + C + B + E + A, 4, "+proj=eqc +lat_ts=0" + L + HN + s + N + S + E + A, 1, "+proj=eqc +lat_ts=0" + L + HN + s + N + " +a=6371007 +b=6371007" + E + A, 5, D + L + KB + JE + h + EO + C + B + E + A, 1, D + L + Lu + JE + u + EO + C + B + E + A, 1, D + L + " +lon_0=11.75" + JE + a + EO + C + B + E + A, 1, D + L + Gj + " +k=1" + CX + EO + C + B + E + A, 24, K + Y + A, 1, K + C + Qb + A, 1, K + Pd + Gq + A, 1, K + R + At + A, 1, K + Y + BW + A, 3, K + i + HF + A, 1, K + i + A, 1, K + i + A, 1, K + j + KR + A, 1, K + By + Ay + JP + A, 1, K + c + QC + A, 1, K + C + Lw + A, 1, K + c + Gg + A, 1, K + i + GB + A, 1, K + i + A, 1, K + i + A, 1, K + i + A, 1, K + i + Je + A, 2, K + C + UC + A, 1, K + c + JO + A, 1, K + c + IE + A, 1, K + By + Ay + JQ + A, 1, K + Lp + Hp + GQ + A, 1, K + Go + CT + BT + A, 1, K + M + HG + A, 1, K + j + B + A, 1, K + Y + Gf + A, 1, K + Y + Py + A, 1, K + C + B + A, 1, K + C + B + A, 1, K + R + Pz + A, 1, K + R + Gy + A, 1, K + AU + BN + Nm + A, 1, K + Y + Gh + A, 1, K + Ee + Ef + A, 1, K + R + QA + A, 1, K + R + v + A, 1, K + R + A, 1, K + R + SD + A, 1, K + Y + A, 1, K + j + B + A, 1, K + M + NK + A, 1, K + R + TM + A, 1, K + j + B + A, 1, K + C + B + A, 1, K + Qj + Ho + NI + A, 1, K + i + TC + A, 1, K + C + B + A, 1, K + C + B + A, 2, K + C + B + A, 1, K + Qj + Ho + A, 1, K + c + OW + A, 1, K + C + B + A, 2, K + M + Ar + A, 1, K + M + b + A, 1, K + C + B + A, 1, K + R + Jx + A, 1, K + R + Sw + A, 1, K + R + Sx + A, 1, K + R + TN + A, 4, K + PV + Bb + A, 1, K + C + B + A, 1, K + C + B + A, 1, K + M + A, 1, K + R + Qe + A, 1, K + AU + BN + RD + A, 1, K + R + NG + A, 1, K + R + " +towgs84=105,326,-102.5,0,0,0.814,-0.6" + A, 1, K + R + " +towgs84=-45,417,-3.5,0,0,0.814,-0.6" + A, 1, K + c + A, 1, K + c + A, 1, K + R + A, 1, K + M + G + A, 1, K + c + HX + A, 1, K + x + r + A, 1, K + x + CB + A, 1, K + R + Cm + A, 1, K + M + NL + A, 1, K + AU + BN + A, 1, K + R + EV + A, 1, K + R + Ec + A, 1, K + Bc + BS + In + A, 1, K + c + ER + A, 1, K + Y + Cj + A, 1, K + c + Jw + A, 1, K + AU + BN + Sy + A, 1, K + M + U + A, 1, K + R + A, 1, K + i + TQ + A, 1, D + L + Lf + AP + k + N + C + B + J + A, 0, D + L + Lf + AP + k + N + C + B + J + A, 1, K + R + ES + A, 1, K + Y + " +towgs84=-384,664,-48,0,0,0,0" + A, 1, K + c + GO + A, 1, K + R + Bs + A, 1, K + Bc + BS + Ax + A, 1, K + AU + BN + Gi + A, 1, K + R + TF + A, 1, K + R + GR + A, 2, K + AU + BN + HI + A, 2, K + Gn + HY + A, 1, K + R + n + A, 1, K + R + " +towgs84=-83.11,-97.38,-117.22,0.00569291,-0.0446976,0.0442851,0.1218" + A, 1, K + c + NM + A, 4, K + R + Rq + A, 1, K + aK + RE + A, 1, K + IR + Bh + Av + A, 1, K + By + Ay + JR + A, 1, K + By + Ay + NN + A, 1, K + RB + RC + A, 1, K + i + TG + A, 1, K + HK + Gv + A, 1, K + By + Ay + Tb + A, 1, K + GL + Bz + BV + A, 1, K + c + Qh + A, 1, K + R + Hc + A, 1, K + R + AX + A, 1, K + R + A, 1, K + c + TR + A, 1, K + c + " +towgs84=-90,40,88,0,0,0,0" + A, 1, K + AU + BN + A, 1, K + i + GC + A, 1, K + R + OV + A, 1, K + R + " +towgs84=-333,-222,114,0,0,0,0" + A, 1, K + c + " +towgs84=41,-220,-134,0,0,0,0" + A, 1, K + Y + HZ + A, 1, K + C + B + A, 1, K + R + Qd + A, 2, K + AU + BN + IO + A, 1, K + Y + Tc + A, 1, K + c + GS + A, 2, K + R + CK + A, 1, K + AU + BN + NO + A, 1, K + X + A, 2, K + C + B + A, 1, K + c + DO + A, 1, K + R + TS + A, 1, K + R + W + A, 1, K + Hn + EL + Aa + A, 1, K + R + JL + A, 1, K + AU + BN + Bk + A, 1, K + aJ + A, 1, K + PV + Lx + A, 1, K + PV + A, 1, K + PV + A, 1, K + Y + A, 1, K + Nc + Nd + DS + A, 1, K + AU + BN + TH + A, 1, K + C + B + A, 1, K + M + F + A, 1, K + R + QO + A, 1, K + Gn + A, 2, K + R + A, 1, K + Y + Fv + A, 3, K + R + Nn + A, 1, K + HB + Bt + A, 2, K + Y + A, 2, K + R + HD + A, 1, K + Lo + GD + A, 1, K + Ok + Bb + A, 1, K + Ok + Bb + A, 1, K + Y + g + A, 1, K + Ee + Ef + JK + A, 1, K + Gn + A, 1, K + AU + BN + JC + A, 2, K + Y + A, 1, K + c + Af + A, 1, K + Y + A, 1, K + R + " +towgs84=-155,171,37,0,0,0,0" + A, 1, K + AU + BN + A, 1, K + R + HE + A, 1, K + Y + z + A, 1, K + R + GP + A, 1, K + Y + AC + A, 1, K + AU + BN + No + A, 1, K + R + QP + A, 2, K + j + MR + A, 1, K + C + Rr + A, 3, K + T + P + A, 2, K + T + Q + A, 2, K + S + A, 64, Ck + " +lat_0=2.042583333333333 +lon_0=103.5627583333333" + s + N + GL + Bz + BV + E + A, 1, Ck + " +lat_0=2.712283333333334 +lon_0=101.9411666666667 +x_0=-242.005 +y_0=-948.547" + GL + Bz + BV + E + A, 1, Ck + " +lat_0=3.710972222222222 +lon_0=102.4361777777778" + s + N + GL + Bz + BV + E + A, 1, Ck + " +lat_0=3.680344444444444 +lon_0=101.5082444444444 +x_0=-21759.438 +y_0=55960.906" + GL + Bz + BV + E + A, 1, Ck + " +lat_0=4.946141666666667 +lon_0=102.8952083333333" + s + N + GL + Bz + BV + E + A, 1, Ck + " +lat_0=5.421325 +lon_0=100.3458694444444" + s + N + GL + Bz + BV + E + A, 1, Ck + " +lat_0=5.965147222222223 +lon_0=100.6375944444444" + s + N + GL + Bz + BV + E + A, 1, Ck + " +lat_0=4.859380555555555 +lon_0=100.8167666666667" + s + " +y_0=133453.669" + GL + Bz + BV + E + A, 1, Ck + " +lat_0=5.893922222222222 +lon_0=102.1772916666667" + s + N + GL + Bz + BV + E + A, 1, D + L + Lf + AP + k + N + X + J + A, 1, D + L + KG + AP + k + N + X + J + A, 1, D + L + KH + AP + k + N + X + J + A, 1, D + L + Lh + AP + k + N + X + J + A, 1, D + L + SX + AP + k + N + X + J + A, 1, D + L + " +lon_0=-159" + AP + k + N + X + J + A, 0, D + L + " +lon_0=-159" + AP + k + N + X + J + A, 1, D + L + YJ + AP + k + N + X + J + A, 1, D + L + Qr + AP + k + N + X + J + A, 1, D + L + " +lon_0=-141" + AP + k + N + X + J + A, 1, D + L + YK + AP + k + N + X + J + A, 1, D + L + YT + AP + k + N + X + J + A, 1, D + L + " +lon_0=-123" + AP + k + N + X + J + A, 1, D + L + Lj + AP + k + N + X + J + A, 1, D + L + KK + AP + k + N + X + J + A, 1, D + L + " +lon_0=-105" + AP + k + N + X + J + A, 1, D + " +lat_0=13.5 +lon_0=144.75 +k=1" + BU + IK + C + B + E + A, 1, H + " +lat_1=-6.5 +lat_2=-11.5" + ZA + UJ + O + Ae + i + CW + E + A, 2, D + L + Gl + " +k=1" + IM + N + M + Ar + E + A, 1, D + L + UR + AP + k + N + X + J + A, 1, D + L + MP + AP + k + N + X + J + A, 1, D + L + KG + AP + k + N + C + B + J + A, 1, D + L + KH + AP + k + N + C + B + J + A, 1, D + L + Lh + AP + k + N + C + B + J + A, 1, D + L + SX + AP + k + N + C + B + J + A, 1, D + L + " +lon_0=-159" + AP + k + N + C + B + J + A, 1, D + L + YJ + AP + k + N + C + B + J + A, 1, D + L + Qr + AP + k + N + C + B + J + A, 1, D + L + " +lon_0=-141" + AP + k + N + C + B + J + A, 1, D + L + YK + AP + k + N + C + B + J + A, 1, D + L + YT + AP + k + N + C + B + J + A, 1, D + L + " +lon_0=-123" + AP + k + N + C + B + J + A, 1, D + L + Lj + AP + k + N + C + B + J + A, 1, D + L + KK + AP + k + N + C + B + J + A, 1, D + L + " +lon_0=-105" + AP + k + N + C + B + J + A, 1, D + L + II + " +k=1" + MS + N + M + Ar + E + A, 3, H + GW + GX + GY + GA + h + IK + C + B + E + A, 1, D + L + UR + AP + k + N + C + B + J + A, 1, D + L + MP + AP + k + N + C + B + J + A, 16, H + Dp + Dq + y + Ea + Z + N + X + J + A, 1, H + Dl + Dm + CA + Oc + Z + Pv + X + J + A, 1, H + Fd + Fe + AL + CS + a + N + C + B + J + A, 5, H + " +lat_1=-18" + ZT + " +lat_0=-27" + Il + s + N + S + E + A, 1, K + C + B + A, 4, I + ID + C + B + E + A, 3, K + C + B + A, 1, I + JZ + o + C + B + E + A, 4, K + R + PJ + A, 8, K + C + B + A, 1, I + Ns + C + B + E + A, 1, I + Nt + C + B + E + A, 1, I + Nu + C + B + E + A, 1, I + Nw + C + B + E + A, 1, I + NP + C + B + E + A, 1, I + NQ + C + B + E + A, 1, K + C + A, 1, D + L + HP + " +k=1" + HU + N + C + E + A, 1, D + L + HQ + " +k=1" + Gw + N + C + E + A, 1, D + L + Hd + " +k=1" + Hu + N + C + E + A, 1, D + L + HR + " +k=1" + Hv + N + C + E + A, 1, D + L + HS + " +k=1" + It + N + C + E + A, 1, D + L + EN + " +k=1" + Hs + N + C + E + A, 1, D + L + Fy + " +k=1" + Ht + N + C + E + A, 1, D + L + Fm + " +k=1" + HV + N + C + E + A, 1, D + L + Fr + " +k=1" + Hw + N + C + E + A, 1, D + L + Ed + " +k=1" + HW + N + C + E + A, 1, D + L + Fn + " +k=1" + Hx + N + C + E + A, 1, D + L + HP + " +k=1" + O + N + C + E + A, 1, D + L + HQ + " +k=1" + O + N + C + E + A, 1, D + L + Hd + " +k=1" + O + N + C + E + A, 1, D + L + HR + " +k=1" + O + N + C + E + A, 1, D + L + HS + " +k=1" + O + N + C + E + A, 1, D + L + EN + " +k=1" + O + N + C + E + A, 1, D + L + Fy + " +k=1" + O + N + C + E + A, 1, D + L + Fm + " +k=1" + O + N + C + E + A, 1, D + L + Fr + " +k=1" + O + N + C + E + A, 1, D + L + Ed + " +k=1" + O + N + C + E + A, 1, D + L + Fn + " +k=1" + O + N + C + E + A, 1, D + L + HP + " +k=1" + Hy + N + C + E + A, 1, D + L + Lt + " +k=1" + Hz + N + C + E + A, 1, D + L + HQ + " +k=1" + IA + N + C + E + A, 1, D + L + Ni + " +k=1" + IB + N + C + E + A, 1, D + L + Hd + " +k=1" + Gx + N + C + E + A, 1, D + L + Hq + " +k=1" + IT + N + C + E + A, 1, D + L + HR + " +k=1" + Gc + N + C + E + A, 1, D + L + Mj + " +k=1" + IU + N + C + E + A, 1, D + L + HS + " +k=1" + Iu + N + C + E + A, 1, D + L + Jj + " +k=1" + Mu + N + C + E + A, 1, D + L + EN + " +k=1" + Mv + N + C + E + A, 1, D + L + Le + " +k=1" + Mw + N + C + E + A, 1, D + L + Fy + " +k=1" + Mx + N + C + E + A, 1, D + L + Im + " +k=1" + My + N + C + E + A, 1, D + L + Fm + " +k=1" + Mz + N + C + E + A, 1, D + L + KF + " +k=1" + NA + N + C + E + A, 1, D + L + Fr + " +k=1" + NB + N + C + E + A, 1, D + L + Jk + " +k=1" + Oh + N + C + E + A, 1, D + L + Ed + " +k=1" + NC + N + C + E + A, 1, D + L + Il + " +k=1" + Oi + N + C + E + A, 1, D + L + Fn + " +k=1" + ND + N + C + E + A, 1, D + L + HP + " +k=1" + O + N + C + E + A, 1, D + L + Lt + " +k=1" + O + N + C + E + A, 1, D + L + HQ + " +k=1" + O + N + C + E + A, 1, D + L + Ni + " +k=1" + O + N + C + E + A, 1, D + L + Hd + " +k=1" + O + N + C + E + A, 1, D + L + Hq + " +k=1" + O + N + C + E + A, 1, D + L + HR + " +k=1" + O + N + C + E + A, 1, D + L + Mj + " +k=1" + O + N + C + E + A, 1, D + L + HS + " +k=1" + O + N + C + E + A, 1, D + L + Jj + " +k=1" + O + N + C + E + A, 1, D + L + EN + " +k=1" + O + N + C + E + A, 1, D + L + Le + " +k=1" + O + N + C + E + A, 1, D + L + Fy + " +k=1" + O + N + C + E + A, 1, D + L + Im + " +k=1" + O + N + C + E + A, 1, D + L + Fm + " +k=1" + O + N + C + E + A, 1, D + L + KF + " +k=1" + O + N + C + E + A, 1, D + L + Fr + " +k=1" + O + N + C + E + A, 1, D + L + Jk + " +k=1" + O + N + C + E + A, 1, D + L + Ed + " +k=1" + O + N + C + E + A, 1, D + L + Il + " +k=1" + O + N + C + E + A, 1, D + L + Fn + " +k=1" + O + N + C + E + A, 1, K + M + A, 3, K + C + B + A, 1, I + Gz + C + B + E + A, 9, D + L + HP + " +k=1" + HU + N + M + E + A, 1, D + L + HQ + " +k=1" + Gw + N + M + E + A, 1, D + L + Hd + " +k=1" + Hu + N + M + E + A, 1, D + L + HR + " +k=1" + Hv + N + M + E + A, 1, D + L + HS + " +k=1" + It + N + M + E + A, 1, D + L + EN + " +k=1" + Hs + N + M + E + A, 1, D + L + Fy + " +k=1" + Ht + N + M + E + A, 1, D + L + Fm + " +k=1" + HV + N + M + E + A, 1, D + L + Fr + " +k=1" + Hw + N + M + E + A, 1, D + L + Ed + " +k=1" + HW + N + M + E + A, 1, D + L + Fn + " +k=1" + Hx + N + M + E + A, 1, D + L + HP + " +k=1" + O + N + M + E + A, 1, D + L + HQ + " +k=1" + O + N + M + E + A, 1, D + L + Hd + " +k=1" + O + N + M + E + A, 1, D + L + HR + " +k=1" + O + N + M + E + A, 1, D + L + HS + " +k=1" + O + N + M + E + A, 1, D + L + EN + " +k=1" + O + N + M + E + A, 1, D + L + Fy + " +k=1" + O + N + M + E + A, 1, D + L + Fm + " +k=1" + O + N + M + E + A, 1, D + L + Fr + " +k=1" + O + N + M + E + A, 1, D + L + Ed + " +k=1" + O + N + M + E + A, 1, D + L + Fn + " +k=1" + O + N + M + E + A, 11, K + c + A, 1, K + c + TI + A, 1, K + c + TJ + A, 1, K + c + TK + A, 1, K + c + TL + A, 1, K + c + UB + A, 1, K + c + Sv + A, 1, K + c + Ps + A, 1, K + i + A, 1, K + i + A, 1, K + As + d + A, 1, K + R + Jg + A, 1, K + C + B + A, 1, K + Y + Hf + A, 1, K + R + Jy + A, 1, K + R + SE + A, 1, K + R + Sz + A, 1, K + C + B + A, 1, K + x + Al + A, 1, K + C + B + A, 1, K + c + " +towgs84=-106,-129,165,0,0,0,0" + A, 1, K + R + TA + A, 1, K + R + SF + A, 1, K + R + NH + A, 1, K + C + B + A, 1, K + R + TO + A, 1, K + R + SJ + A, 1, K + C + B + A, 1, K + R + TP + A, 1, K + R + Lr + A, 1, K + R + UD + A, 2, K + R + SG + A, 1, K + R + QM + A, 3, K + R + " +towgs84=365,194,166,0,0,0,0" + A, 1, K + R + " +towgs84=325,154,172,0,0,0,0" + A, 1, K + i + TZ + A, 1, K + R + SH + A, 2, K + R + Jf + A, 1, K + R + TB + A, 1, K + R + Ke + A, 1, K + R + HH + A, 2, K + R + SI + A, 1, D + L + KB + AP + IU + N + C + B + E + A, 5, D + L + HP + " +k=1" + Hy + N + M + E + A, 1, D + L + Lt + " +k=1" + Hz + N + M + E + A, 1, D + L + HQ + " +k=1" + IA + N + M + E + A, 1, D + L + Ni + " +k=1" + IB + N + M + E + A, 1, D + L + Hd + " +k=1" + Gx + N + M + E + A, 1, K + " +a=6377019.27 +b=6355762.5391 +towgs84=-28,199,5,0,0,0,0" + A, 1, K + R + Jd + A, 1, K + C + B + A, 1, K + R + Jz + A, 1, K + C + B + A, 1, K + R + Qc + A, 1, K + R + PI + A, 1, K + R + Pt + A, 1, K + R + Pa + A, 1, K + Y + Pb + A, 1, K + j + B + A, 1, K + R + " +towgs84=-86,-98,-119,0,0,0,0" + A, 1, K + C + B + A, 1, K + j + B + A, 1, K + AU + BN + A, 1, K + R + TT + A, 1, K + R + Np + A, 1, K + C + B + A, 1, K + i + " +towgs84=-100,-248,259,0,0,0,0" + A, 1, K + M + A, 1, K + M + A, 1, K + M + " +towgs84=44.585,-131.212,-39.544,0,0,0,0" + A, 1, K + c + " +towgs84=-80.01,253.26,291.19,0,0,0,0" + A, 1, K + c + " +towgs84=124.5,-63.5,-281,0,0,0,0" + A, 2, K + By + Ay + RF + A, 1, K + i + BX + A, 1, K + R + " +towgs84=-133,-321,50,0,0,0,0" + A, 2, K + C + B + A, 1, K + C + Bm + A, 1, K + R + Kc + A, 1, K + R + Lq + A, 1, K + R + Kg + A, 1, K + R + Kh + A, 1, K + R + QN + A, 1, K + j + TD + A, 1, K + j + B + A, 1, K + i + CW + A, 1, K + c + A, 1, K + c + A, 1, K + R + TE + A, 1, K + c + Qf + A, 1, K + c + A, 1, K + c + GN + A, 1, K + C + B + A, 1, K + c + A, 1, K + R + A, 1, K + R + A, 1, K + Gn + Qg + A, 1, K + R + " +towgs84=114,-116,-333,0,0,0,0" + A, 1, K + x + " +towgs84=-491,-22,435,0,0,0,0" + A, 1, K + R + " +towgs84=145,75,-272,0,0,0,0" + A, 1, K + R + " +towgs84=-320,550,-494,0,0,0,0" + A, 1, K + R + " +towgs84=124,-234,-25,0,0,0,0" + A, 1, K + R + " +towgs84=-205,107,53,0,0,0,0" + A, 1, K + c + " +towgs84=-79,-129,145,0,0,0,0" + A, 1, K + R + " +towgs84=-127,-769,472,0,0,0,0" + A, 1, K + R + " +towgs84=-104,-129,239,0,0,0,0" + A, 1, K + R + " +towgs84=298,-304,-375,0,0,0,0" + A, 1, K + i + " +towgs84=-2,151,181,0,0,0,0" + A, 1, K + R + " +towgs84=230,-199,-752,0,0,0,0" + A, 1, K + R + " +towgs84=211,147,111,0,0,0,0" + A, 1, K + T + P + A, 1, K + R + JD + A, 1, K + R + " +towgs84=-794,119,-298,0,0,0,0" + A, 1, K + i + Lg + A, 1, K + R + " +towgs84=208,-435,-229,0,0,0,0" + A, 1, K + R + " +towgs84=189,-79,-202,0,0,0,0" + A, 1, K + i + Ly + A, 1, K + R + " +towgs84=403,-81,277,0,0,0,0" + A, 1, K + R + " +towgs84=-307,-92,127,0,0,0,0" + A, 1, K + R + Ta + A, 1, K + R + " +towgs84=170,42,84,0,0,0,0" + A, 2, K + " +a=6378270 +b=6356794.343434343 +towgs84=102,52,-38,0,0,0,0" + A, 1, K + R + " +towgs84=276,-57,149,0,0,0,0" + A, 1, K + R + " +towgs84=-632,438,-609,0,0,0,0" + A, 1, K + R + " +towgs84=647,1777,-1124,0,0,0,0" + A, 1, K + c + " +towgs84=260,12,-147,0,0,0,0" + A, 1, K + C + B + A, 1, K + Ee + Ef + A, 1, K + R + " +towgs84=-156,-271,-189,0,0,0,0" + A, 1, K + " +a=6378136 +b=6356751.361745712 +towgs84=0,0,1.5,-0,-0,0.076,0" + A, 1, K + R + A, 1, K + C + A, 1, K + c + EU + A, 1, K + c + A, 1, K + Y + A, 1, K + Y + A, 1, K + C + B + A, 1, K + UW + Ym + Nl + A, 1, K + C + B + A, 1, K + j + QB + A, 1, K + Yn + Qz + A, 1, K + UW + Ym + Nl + A, 1, K + R + A, 1, K + R + w + A, 1, K + j + B + A, 1, K + j + Fu + A, 1, K + j + A, 1, K + j + B + A, 1, K + C + B + A, 1, K + aJ + A, 1, K + C + B + A, 1, K + j + B + A, 1, K + j + B + A, 1, K + C + B + A, 1, K + C + B + A, 1, D + L + Hq + " +k=1" + IT + N + M + E + A, 1, D + L + HR + " +k=1" + Gc + N + M + E + A, 1, D + L + Mj + " +k=1" + IU + N + M + E + A, 1, D + L + HS + " +k=1" + Iu + N + M + E + A, 1, D + L + Jj + " +k=1" + Mu + N + M + E + A, 1, D + L + EN + " +k=1" + Mv + N + M + E + A, 1, D + L + Le + " +k=1" + Mw + N + M + E + A, 1, D + L + Fy + " +k=1" + Mx + N + M + E + A, 1, D + L + Im + " +k=1" + My + N + M + E + A, 1, D + L + Fm + " +k=1" + Mz + N + M + E + A, 1, D + L + KF + " +k=1" + NA + N + M + E + A, 1, D + L + Fr + " +k=1" + NB + N + M + E + A, 1, D + L + Jk + " +k=1" + Oh + N + M + E + A, 1, D + L + Ed + " +k=1" + NC + N + M + E + A, 1, D + L + Il + " +k=1" + Oi + N + M + E + A, 1, D + L + Fn + " +k=1" + ND + N + M + E + A, 1, D + L + HP + " +k=1" + O + N + M + E + A, 1, D + L + Lt + " +k=1" + O + N + M + E + A, 1, D + L + HQ + " +k=1" + O + N + M + E + A, 1, D + L + Ni + " +k=1" + O + N + M + E + A, 1, D + L + Hd + " +k=1" + O + N + M + E + A, 1, D + L + Hq + " +k=1" + O + N + M + E + A, 1, D + L + HR + " +k=1" + O + N + M + E + A, 1, D + L + Mj + " +k=1" + O + N + M + E + A, 1, D + L + HS + " +k=1" + O + N + M + E + A, 1, D + L + Jj + " +k=1" + O + N + M + E + A, 1, D + L + EN + " +k=1" + O + N + M + E + A, 1, D + L + Le + " +k=1" + O + N + M + E + A, 1, D + L + Fy + " +k=1" + O + N + M + E + A, 1, D + L + Im + " +k=1" + O + N + M + E + A, 1, D + L + Fm + " +k=1" + O + N + M + E + A, 1, D + L + KF + " +k=1" + O + N + M + E + A, 1, D + L + Fr + " +k=1" + O + N + M + E + A, 1, D + L + Jk + " +k=1" + O + N + M + E + A, 1, D + L + Ed + " +k=1" + O + N + M + E + A, 1, K + Y + Gf + " +pm=bern" + A, 1, K + R + ES + " +pm=bogota" + A, 1, K + R + EV + Zb + A, 1, K + Y + HZ + PW + A, 1, K + Y + Aw + Ls + A, 1, K + R + CK + " +pm=rome" + A, 1, K + AU + BN + Bk + Lv + A, 1, K + Y + PW + A, 1, K + R + " +pm=brussels" + A, 1, K + R + HD + Lv + A, 1, K + AU + BN + JC + Lv + A, 1, D + L + Il + " +k=1" + O + N + M + E + A, 0, D + L + Il + " +k=1" + O + N + M + E + A, 1, K + Y + Cj + PW + A, 1, K + Y + " +pm=stockholm" + A, 1, K + Y + " +pm=athens" + A, 1, K + AU + BN + Gi + Lv + A, 1, K + Hn + EL + Aa + SN + A, 1, K + Y + Gh + Ls + A, 2, K + Y + Hf + PW + A, 1, K + AU + BN + Lv + A, 1, D + L + Fn + " +k=1" + O + N + M + E + A, 1, K + R + A, 1, K + R + A, 2, H + " +lat_1=15 +lat_2=16.66666666666667 +lat_0=15.83333333333333 +lon_0=-24 +x_0=161587.83 +y_0=128511.202" + S + E + A, 13, H + WK + WL + UK + YH + s + N + C + B + E + A, 62, K + " +a=6376523" + RA + ZM + A, 2, K + Zx + Qy + " +pm=madrid" + A, 1, K + Y + Pb + Zb + A, 109, K + C + B + A, 1, I + Nr + C + B + E + A, 1, I + Os + C + B + E + A, 1, I + Ja + C + B + E + A, 2, D + BY + UZ + " +k=1" + s + N + R + EV + E + A, 23, BP + Hr + Qm + HN + Rd + Bd + Cl + S + E + A, 1, BP + m + " +lat_ts=-90" + HN + Rd + Bd + Cl + S + E + A, 6, I + Ki + C + B + E + A, 21, DT + Sa + Hl + ZB + OZ + s + N + X + E + A, 1, DT + Sa + Hl + ZB + OZ + s + N + C + B + E + A, 1, DT + Sa + Hl + ZB + OZ + s + N + C + B + E + A, 1, DT + Sa + Hl + ZB + OZ + s + N + C + B + E + A, 33, D + Fk + " +lon_0=5.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=6.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=7.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=8.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=9.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + YH + " +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=11.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=12.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=13.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=14.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=15.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + YE + " +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=17.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=18.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=19.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=20.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=21.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=22.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=23.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=24.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=25.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=26.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=27.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=28.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=29.5 +k=1" + BU + AH + C + B + E + A, 1, D + Fk + " +lon_0=30.5 +k=1" + BU + AH + C + B + E + A, 2, K + Y + A, 35, D + Ch + NX + " +k=1" + h + Ae + Y + E + A, 1, D + Ch + Rt + " +k=1" + h + " +y_0=550000" + Y + E + A, 1, D + Ch + Ru + " +k=1" + h + Ae + Y + E + A, 1, D + Ch + Rt + " +k=1" + h + Ae + Y + E + A, 1, D + Ch + Ed + " +k=1" + h + Ae + Y + E + A, 1, D + Ch + NX + " +k=1" + h + Ae + Y + E + A, 1, D + Ch + " +lon_0=125.0028902777778 +k=1" + h + Ae + Y + E + A, 1, D + Ch + WM + " +k=1" + h + Ae + Y + E + A, 1, D + Ch + WM + " +k=1" + h + " +y_0=550000" + Y + E + A, 1, D + Ch + " +lon_0=129.0028902777778 +k=1" + h + Ae + Y + E + A, 1, D + Ch + " +lon_0=131.0028902777778 +k=1" + h + Ae + Y + E + A, 1, D + Ch + Pj + AP + BZ + Cl + Y + E + A, 1, D + Ch + Pj + AP + BZ + Cl + C + B + E + A, 1, D + Ch + Ru + " +k=1" + h + Ae + C + B + E + A, 1, D + Ch + Rt + " +k=1" + h + Ae + C + B + E + A, 1, D + Ch + Rt + " +k=1" + h + " +y_0=550000" + C + B + E + A, 1, D + Ch + Ed + " +k=1" + h + Ae + C + B + E + A, 1, D + Ch + NX + " +k=1" + h + Ae + C + B + E + A, 1, D + Ch + Ru + " +k=1" + h + Qn + C + B + E + A, 1, D + Ch + Rt + " +k=1" + h + Qn + C + B + E + A, 1, D + Ch + Ed + " +k=1" + h + Qn + C + B + E + A, 1, D + Ch + NX + " +k=1" + h + Qn + C + B + E + A, 33, Rp + SS + " +lon_0=42.5" + Kk + V + s + N + Y + Gh + Ls + E + A, 2, D + L + IH + AP + O + Ae + S + E + A, 5, K + Y + Lz + A, 1, K + Y + Lz + Ls + A, 4, K + By + Ay + Kf + A, 1, D + " +lat_0=7.000480277777778 +lon_0=80.77171111111112 +k=0.9999238418" + h + IK + By + Ay + Tb + E + A, 1, D + " +lat_0=7.000471527777778 +lon_0=80.77171308333334 +k=0.9999238418" + O + Ae + By + Ay + Kf + E + A, 8, H + WK + WL + UK + YH + s + N + C + B + E + A, 3, K + C + A, 1, CU + Qi + Yz + aU + Ph + s + N + KE + If + C + E + A, 5, K + C + B + A, 1, D + L + HO + " +k=1" + O + N + C + B + E + A, 1, D + L + Ia + " +k=1" + O + N + C + B + E + A, 1, D + L + IG + " +k=1" + O + N + C + B + E + A, 1, D + L + PN + " +k=1" + O + N + C + B + E + A, 1, D + L + LN + " +k=1" + O + N + C + B + E + A, 1, D + L + PO + " +k=1" + O + N + C + B + E + A, 1, D + L + JS + " +k=1" + O + N + C + B + E + A, 5, K + C + B + A, 2, D + L + Hq + " +k=1" + Bv + N + C + B + E + A, 3, D + L + HO + " +k=1" + MT + N + C + B + E + A, 1, D + L + Ia + " +k=1" + LY + N + C + B + E + A, 1, D + L + IG + " +k=1" + Jp + N + C + B + E + A, 1, D + L + PN + " +k=1" + LZ + N + C + B + E + A, 1, D + L + LN + " +k=1" + HU + N + C + B + E + A, 1, D + L + PO + " +k=1" + Gw + N + C + B + E + A, 1, D + L + JS + " +k=1" + Hu + N + C + B + E + A, 17, D + L + " +lon_0=90.73333333333333 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=89.55 +k=1" + Bv + DU + C + B + E + A, 1, D + L + WN + " +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=90.03333333333333 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=90.15000000000001 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=91.13333333333334 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=91.23333333333333 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=89.34999999999999 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=91.34999999999999 +k=1" + Bv + DU + C + B + E + A, 1, D + L + WN + " +k=1" + Bv + DU + C + B + E + A, 1, D + L + WO + " +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=89.06666666666666 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=90.26666666666667 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=89.55 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=91.75 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=90.5 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=90.16666666666667 +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=90.11666666666666 +k=1" + Bv + DU + C + B + E + A, 1, D + L + WO + " +k=1" + Bv + DU + C + B + E + A, 1, D + L + " +lon_0=90.86666666666666 +k=1" + Bv + DU + C + B + E + A, 5, D + L + " +lon_0=-7 +k=0.999997" + h + " +y_0=-6000000" + C + B + E + A, 4, H + YI + " +lat_2=54.5" + L + NV + BZ + N + C + B + E + A, 1, H + YI + " +lat_2=54.5" + L + NV + BZ + N + C + B + E + A, 3, K + C + B + A, 1, H + " +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19" + Jv + Hk + C + B + E + A, 4, JU + PC + ZP + Pl + Qp + Y + Hf + PW + E + A, 1, JU + PC + ZP + Pl + Qp + Y + Cj + PW + E + A, 1, JU + PC + ZP + Pl + Qp + Y + HZ + PW + E + A, 6, I + Nr + o + R + Ec + E + A, 3, K + C + B + A, 3, D + m + UQ + " +k=1" + AV + N + C + B + E + A, 1, D + m + MP + " +k=1" + Ci + N + C + B + E + A, 1, D + m + Pe + " +k=1" + Bo + N + C + B + E + A, 1, D + m + Qk + " +k=1" + DP + N + C + B + E + A, 1, D + m + US + " +k=1" + Eg + N + C + B + E + A, 1, D + m + Zc + " +k=1" + Jt + N + C + B + E + A, 1, D + m + Nb + " +k=1" + IM + N + C + B + E + A, 5, K + C + B + A, 1, I + Gz + o + C + B + E + A, 1, I + Hi + o + C + B + E + A, 1, I + ID + o + C + B + E + A, 3, K + C + B + A, 1, I + Hi + o + C + B + E + A, 1, I + IC + o + C + B + E + A, 3, K + j + B + A, 2, D + L + NV + V + O + N + j + B + E + A, 4, K + C + B + A, 2, K + C + B + A, 8, K + j + B + A, 1, I + ID + o + j + B + E + A, 1, I + Io + o + j + B + E + A, 4, I + IC + o + C + B + E + A, 2, I + Hi + o + C + B + E + A, 4, K + C + B + A, 3, I + Os + o + C + B + E + A, 55, K + i + Bp + A, 5, H + " +lat_1=10.46666666666667 +lat_0=10.46666666666667 +lon_0=-84.33333333333333 +k_0=0.99995696" + O + " +y_0=271820.522" + i + Bp + E + A, 1, H + " +lat_1=9 +lat_0=9" + Ua + " +k_0=0.99995696" + O + " +y_0=327987.436" + i + Bp + E + A, 2, H + " +lat_1=14.9 +lat_0=14.9" + Bx + " +k_0=0.99989906" + O + " +y_0=325992.681" + i + Bp + E + A, 1, H + " +lat_1=13.78333333333333 +lat_0=13.78333333333333 +lon_0=-89 +k_0=0.99996704" + O + " +y_0=295809.184" + i + Bp + E + A, 1, H + " +lat_1=13.86666666666667 +lat_0=13.86666666666667" + To + " +k_0=0.99990314" + O + " +y_0=359891.816" + i + Bp + E + A, 1, H + " +lat_1=11.73333333333333 +lat_0=11.73333333333333" + To + " +k_0=0.9999222800000001" + O + " +y_0=288876.327" + i + Bp + E + A, 1, I + Ik + x + Al + E + A, 1, K + Ee + Ef + A, 3, K + i + A, 2, H + " +lat_1=8.416666666666666 +lat_0=8.416666666666666 +lon_0=-80 +k_0=0.99989909" + O + " +y_0=294865.303" + i + E + A, 3, UU + " +lat_0=8.25" + CR + " +x_0=914391.7962 +y_0=999404.7217154861" + i + " +to_meter=0.9143917962" + A, 7, H + Ai + Aj + " +lat_0=-78 +lon_0=163" + Tp + Ju + C + B + E + A, 1, H + " +lat_1=-73.66666666666667" + AZ + " +lat_0=-74.5" + NZ + LX + Fq + C + B + E + A, 1, H + " +lat_1=-70.66666666666667 +lat_2=-72.33333333333333 +lat_0=-71.5" + ZW + aH + AH + C + B + E + A, 1, BP + m + " +lat_ts=-90" + Ry + Rd + LX + AH + C + B + E + A, 7, K + C + B + A, 1, I + Gz + C + B + E + A, 23, Rp + SS + WP + Kk + V + s + N + Y + Gh + E + A, 1, Rp + SS + WP + Kk + V + s + N + Y + Gh + E + A, 4, D + Za + Si + " +k=1" + Qo + " +y_0=650000" + R + TT + E + A, 1, D + Za + Si + " +k=1" + Qo + " +y_0=650000" + R + Np + E + A, 1, D + L + Or + " +k=1" + AV + N + Y + AC + E + A, 3, D + L + " +lon_0=11.5" + AP + AV + EM + S + E + A, 1, K + R + A, 3, K + x + BK + A, 3, UU + L + Nb + LX + Ak + x + BK + E + A, 1, I + ID + o + x + BK + E + A, 2, I + MB + o + x + BK + E + A, 1, I + Nx + o + x + BK + E + A, 1, I + Nr + o + x + BK + E + A, 1, I + ID + o + R + E + A, 1, I + Io + o + R + E + A, 1, I + MB + o + R + E + A, 1, I + Nx + o + R + E + A, 7, K + C + B + A, 4, I + Nv + o + C + B + E + A, 1, I + PM + o + C + B + E + A, 1, I + Re + o + C + B + E + A, 7, H + " +lat_1=16.81666666666667 +lat_0=16.81666666666667" + Bx + " +k_0=0.99992226" + O + " +y_0=292209.579" + i + Bp + E + A, 2, K + M + BO + A, 1, D + L + Gl + " +k=1" + DP + N + M + BO + E + A, 1, D + L + HO + " +k=1" + Eg + N + M + BO + E + A, 1, D + L + IG + " +k=1" + Jt + N + M + BO + E + A, 1, D + L + LN + " +k=1" + IM + N + M + BO + E + A, 1, D + L + Gl + " +k=1" + O + N + M + BO + E + A, 1, D + L + HO + " +k=1" + O + N + M + BO + E + A, 1, D + L + IG + " +k=1" + O + N + M + BO + E + A, 1, D + L + LN + " +k=1" + O + N + M + BO + E + A, 19, GU + Iq + Zy + ST + Ab + " +y_0=304800" + X + t + A, 1, D + " +lat_0=17.06124194444444 +lon_0=-88.6318575 +k=1 +x_0=66220.02833082761 +y_0=135779.5099885299" + Ee + Ef + ML + A, 4, K + C + B + A, 3, D + L + " +lon_0=11.33333333333333 +k=1" + BZ + N + C + B + E + A, 27, D + Fo + Ua + " +k=0.999942857" + e + N + X + J + A, 1, D + Fo + EY + Hm + e + N + X + J + A, 1, D + Fo + " +lon_0=-88.75" + Hm + e + N + X + J + A, 2, D + L + ZO + AP + O + N + R + n + E + A, 2, I + JZ + o + j + KR + E + A, 2, D + L + KB + " +k=1" + Ci + N + M + b + E + A, 1, H + Yw + QY + PU + Lu + LU + RU + C + B + E + A, 1, He + PU + Lu + RV + RW + C + B + E + A, 1, H + Yw + QY + PU + Lu + LU + RU + C + B + E + A, 1, He + PU + Lu + RV + RW + C + B + E + A, 1, He + PU + Lu + RV + RW + C + B + E + A, 1, H + Yw + QY + PU + Lu + LU + RU + C + B + E + A, 1, He + PU + Lu + RV + RW + C + B + E + A, 1, H + Yw + QY + PU + Lu + LU + RU + C + B + E + A, 2, JU + " +lon_0=-43 +lat_ts=-2" + LX + Ak + C + B + E + A, 2, H + " +lat_1=52.66666666666666 +lat_2=54.33333333333334 +lat_0=48" + Lu + " +x_0=815000" + N + R + n + E + A, 1, I + JM + o + C + B + E + A, 2, D + Fp + LW + JA + AG + N + C + B + J + A, 3, D + L + Or + AP + Gc + N + C + B + E + A, 1, D + L + Gj + AP + Iu + N + C + B + E + A, 1, D + L + Or + AP + Gc + N + C + B + E + A, 1, D + L + KB + AP + IU + N + C + B + E + A, 1, D + L + Gj + AP + Iu + N + C + B + E + A, 1, D + Fp + LW + JA + AG + N + C + B + J + A, 1, D + Fp + LW + JA + AG + N + C + B + J + A, 4, D + L + KB + AP + " +x_0=500053 +y_0=-3999820" + R + CK + E + A, 4, D + L + Gj + " +k=1" + Bo + N + M + b + E + A, 1, D + L + KB + " +k=1" + Ci + N + M + Ar + E + A, 1, D + L + Gj + " +k=1" + Bo + N + M + Ar + E + A, 1, D + L + KB + " +k=1" + Bo + N + Y + E + A, 1, D + L + IH + " +k=1" + DP + N + Y + E + A, 1, D + L + IH + " +k=1" + DP + N + Y + E + A, 1, D + L + Gj + " +k=1" + Eg + N + Y + E + A, 1, D + L + KB + " +k=1" + Bo + N + M + b + E + A, 1, D + L + IH + " +k=1" + DP + N + M + b + E + A, 1, D + L + Gj + " +k=1" + Eg + N + M + b + E + A, 1, D + L + KB + " +k=1" + Bo + N + M + Ar + E + A, 1, D + L + IH + " +k=1" + DP + N + M + Ar + E + A, 1, D + L + Gj + " +k=1" + Eg + N + M + Ar + E + A, 1, D + L + ZO + " +k=1" + Ci + N + Y + AC + E + A, 1, D + L + KB + " +k=1" + Bo + N + Y + AC + E + A, 1, D + L + IH + " +k=1" + DP + N + Y + AC + E + A, 1, D + L + Gj + " +k=1" + Eg + N + Y + AC + E + A, 1, D + L + Or + " +k=1" + AV + N + Y + AC + E + A, 1, K + Y + A, 1, D + L + ZO + " +k=1" + Ci + N + Y + E + A, 1, D + L + KB + " +k=1" + Bo + N + Y + E + A, 1, D + L + IH + " +k=1" + DP + N + Y + E + A, 1, D + L + Gj + " +k=1" + Eg + N + Y + E + A, 15, I + SK + o + C + B + E + A, 125, D + " +lat_0=-35.31773627777778 +lon_0=149.0092948305555 +k=1.000086" + h + Qn + x + r + E + A, 11, I + KD + j + B + E + A, 1, I + Me + j + B + E + A, 2, I + Ik + o + C + B + E + A, 3, D + L + IH + AP + O + Ak + S + E + A, 2, D + L + Ia + V + O + Ak + C + B + E + A, 14, I + Io + o + x + BK + E + A, 17, I + IC + o + x + BK + E + A, 1, I + Hi + o + x + BK + E + A, 1, I + Gz + o + x + BK + E + A, 2, I + JZ + o + R + PJ + E + A, 1, UU + L + Nb + LX + Ak + C + B + E + A, 6, K + C + A, 1, D + L + KH + AP + AV + Ju + C + E + A, 3, BP + Hr + " +lat_ts=70" + Hq + " +k=1" + s + N + ZZ + Ri + E + A, 31, H + ZC + IJ + Ih + KK + s + N + S + E + A, 1, H + ZC + IJ + Ih + UT + s + N + S + E + A, 1, H + ZC + IJ + Ih + IG + s + N + S + E + A, 1, H + ZC + IJ + Ih + EN + s + N + S + E + A, 1, H + ZC + IJ + Ih + KG + s + N + S + E + A, 1, H + Ic + ZD + Ii + KK + s + N + S + E + A, 1, H + Ic + ZD + Ii + UT + s + N + S + E + A, 1, H + Ic + ZD + Ii + IG + s + N + S + E + A, 1, H + Ic + ZD + Ii + EN + s + N + S + E + A, 1, H + Ic + ZD + Ii + KG + s + N + S + E + A, 1, H + ZE + ZF + Ij + KK + s + N + S + E + A, 1, H + ZE + ZF + Ij + UT + s + N + S + E + A, 1, H + ZE + ZF + Ij + IG + s + N + S + E + A, 1, H + ZE + ZF + Ij + EN + s + N + S + E + A, 1, H + ZE + ZF + Ij + KG + s + N + S + E + A, 1, BP + Hr + Qm + ON + Rd + Bd + Cl + S + E + A, 1, BP + Hr + Qm + CS + Rd + Bd + Cl + S + E + A, 1, BP + Hr + Qm + " +lon_0=-33" + Rd + Bd + Cl + S + E + A, 1, BP + Hr + Qm + QR + Rd + Bd + Cl + S + E + A, 1, BP + Hr + Qm + EN + Rd + Bd + Cl + S + E + A, 110, H + UL + Ha + Hb + " +lon_0=-30" + Hy + DQ + C + B + E + A, 1, H + Ce + Cf + Cg + " +lon_0=-52" + Hs + JH + C + B + E + A, 1, H + Ce + Cf + Cg + " +lon_0=-12" + HV + JH + C + B + E + A, 1, H + Bf + IJ + Bg + MP + Gx + IN + C + B + E + A, 1, H + Bf + IJ + Bg + UT + Gc + IN + C + B + E + A, 1, H + Bf + IJ + Bg + " +lon_0=-10" + Iu + IN + C + B + E + A, 1, H + Ic + BL + BM + " +lon_0=-64" + HV + Gb + C + B + E + A, 1, H + Ic + BL + BM + UT + HW + Gb + C + B + E + A, 1, H + Ic + BL + BM + " +lon_0=-14" + La + Gb + C + B + E + A, 1, H + AR + AS + AT + NU + NB + EM + C + B + E + A, 1, H + AR + AS + AT + " +lon_0=-42" + NC + EM + C + B + E + A, 1, H + AR + AS + AT + " +lon_0=-22" + ND + EM + C + B + E + A, 1, H + CI + OY + CJ + Zd + Hz + JI + C + B + E + A, 1, H + CI + OY + CJ + " +lon_0=-38" + IB + JI + C + B + E + A, 1, H + CI + OY + CJ + " +lon_0=-20" + IT + JI + C + B + E + A, 1, H + " +lat_1=67" + WQ + WR + " +lon_0=-51" + Jp + aE + C + B + E + A, 1, H + " +lat_1=67" + WQ + WR + " +lon_0=-34" + HU + aE + C + B + E + A, 1, H + WS + WT + WU + " +lon_0=-52" + HV + " +y_0=8500000" + C + B + E + A, 1, H + WS + WT + WU + " +lon_0=-37" + HW + " +y_0=8500000" + C + B + E + A, 1, H + Ce + Cf + Cg + " +lon_0=16" + HW + JH + C + B + E + A, 1, H + Bf + IJ + Bg + Gl + Jp + IN + C + B + E + A, 1, H + Ic + BL + BM + Lu + Hz + Gb + C + B + E + A, 1, H + Ic + BL + BM + ZG + IB + Gb + C + B + E + A, 1, H + AR + AS + AT + " +lon_0=14" + Jp + EM + C + B + E + A, 1, H + AR + AS + AT + ZG + HU + EM + C + B + E + A, 1, H + Ce + Cf + Cg + " +lon_0=53" + La + JH + S + E + A, 1, H + Ce + Cf + Cg + HR + Hz + JH + S + E + A, 1, H + Bf + IJ + Bg + " +lon_0=52" + HU + IN + S + E + A, 1, H + Bf + IJ + Bg + " +lon_0=83" + Hu + IN + S + E + A, 1, H + Bf + IJ + Bg + Im + It + IN + S + E + A, 1, H + Bf + IJ + Bg + " +lon_0=145" + Ht + IN + S + E + A, 1, H + Ic + BL + BM + " +lon_0=58" + IT + Gb + S + E + A, 1, H + Ic + BL + BM + " +lon_0=82" + IU + Gb + S + E + A, 1, H + Ic + BL + BM + ZQ + Mu + Gb + S + E + A, 1, H + Ic + BL + BM + " +lon_0=130" + Mw + Gb + S + E + A, 1, H + Ic + BL + BM + ZR + My + Gb + S + E + A, 1, H + Ic + BL + BM + " +lon_0=179" + NA + Gb + S + E + A, 1, H + AR + AS + AT + SR + Hu + EM + S + E + A, 1, H + AR + AS + AT + " +lon_0=74" + It + EM + S + E + A, 1, H + AR + AS + AT + " +lon_0=95" + Ht + EM + S + E + A, 1, H + AR + AS + AT + " +lon_0=116" + Hw + EM + S + E + A, 1, H + AR + AS + AT + " +lon_0=137" + Hx + EM + S + E + A, 1, H + AR + AS + AT + " +lon_0=158" + Hy + EM + S + E + A, 1, H + AR + AS + AT + " +lon_0=179" + IA + EM + S + E + A, 1, H + AR + AS + AT + " +lon_0=-163" + Gx + EM + C + B + E + A, 1, H + AR + AS + AT + Qr + Gc + EM + C + B + E + A, 1, H + CI + OY + CJ + SX + Gw + JI + C + B + E + A, 1, H + CI + OY + CJ + Qr + Hv + JI + C + B + E + A, 1, H + UL + Ha + Hb + Bu + Hx + DQ + C + B + E + A, 1, H + Ce + Cf + Cg + SZ + Gw + JH + C + B + E + A, 1, H + Ce + Cf + Cg + UR + Hv + JH + C + B + E + A, 1, H + Bf + IJ + Bg + YT + Hy + IN + C + B + E + A, 1, H + Bf + IJ + Bg + Ji + IA + IN + C + B + E + A, 1, H + Bf + IJ + Bg + MP + Gx + IN + C + B + E + A, 1, H + Ic + BL + BM + YT + Gw + Gb + C + B + E + A, 1, H + Ic + BL + BM + " +lon_0=-104" + Hv + Gb + C + B + E + A, 1, H + Ic + BL + BM + NW + Hs + Gb + C + B + E + A, 1, H + AR + AS + AT + " +lon_0=-131" + Iu + EM + C + B + E + A, 1, H + AR + AS + AT + KK + Mv + EM + C + B + E + A, 1, H + AR + AS + AT + " +lon_0=-91" + Mx + EM + C + B + E + A, 1, H + AR + AS + AT + " +lon_0=-71" + Mz + EM + C + B + E + A, 1, H + CI + OY + CJ + " +lon_0=-132" + Hs + JI + C + B + E + A, 1, H + CI + OY + CJ + " +lon_0=-113" + HV + JI + C + B + E + A, 1, H + CI + OY + CJ + Na + HW + JI + C + B + E + A, 1, H + CI + OY + CJ + UR + La + JI + C + B + E + A, 1, H + UL + Ha + Hb + Ia + IA + DQ + S + E + A, 1, H + UL + Ha + Hb + Hq + Gx + DQ + S + E + A, 1, H + UL + Ha + Hb + Oe + Gc + DQ + S + E + A, 1, H + UL + Ha + Hb + ON + Hw + DQ + S + E + A, 1, H + Ce + Cf + Cg + " +lon_0=133" + IB + JH + S + E + A, 1, H + Ce + Cf + Cg + ZW + LY + JH + S + E + A, 1, H + Ce + Cf + Cg + Ms + LZ + JH + S + E + A, 1, H + Bf + IJ + Bg + " +lon_0=176" + Hw + IN + S + E + A, 1, H + Bf + IJ + Bg + YJ + Hx + IN + S + E + A, 1, H + Ic + BL + BM + " +lon_0=-155" + LZ + Gb + S + E + A, 1, H + AR + AS + AT + " +lon_0=-5" + ZK + EM + C + B + E + A, 3, I + Ik + i + Lg + t + A, 1, I + Ik + i + Ly + t + A, 6, K + C + B + A, 69, D + L + Gl + V + O + N + Y + Aw + E + A, 3, K + By + Ay + " +towgs84=293.17,726.18,245.36,0,0,0,0" + A, 3, I + MB + C + B + E + A, 1, I + Nx + C + B + E + A, 96, H + GW + GX + GY + GA + h + IK + C + E + A, 4, K + j + Kd + A, 1, D + L + IG + CP + h + " +y_0=-3500000" + j + Kd + E + A, 4, D + L + Gl + V + IM + N + Y + Aw + E + A, 2, K + C + A, 4, K + C + A, 3, K + C + A, 3, I + Nq + C + E + A, 1, I + PL + C + E + A, 1, I + SK + C + E + A, 1, I + TV + C + E + A, 1, I + Xz + C + E + A, 1, I + TY + C + E + A, 1, I + RG + C + E + A, 1, I + Ro + C + E + A, 1, I + RH + C + E + A, 1, I + TW + C + E + A, 1, I + TX + C + E + A, 1, I + QE + C + E + A, 1, I + Ns + C + E + A, 1, I + Nt + C + E + A, 1, I + Nu + C + E + A, 1, I + Nw + C + E + A, 1, I + NP + C + E + A, 1, I + NQ + C + E + A, 1, I + Ik + C + E + A, 1, I + IC + C + E + A, 1, I + Hi + C + E + A, 2, DT + Sa + Hl + ZB + OZ + s + N + C + E + A, 1, H + AR + AS + AT + " +lon_0=-163" + Gx + EM + C + E + A, 1, H + AR + AS + AT + Qr + Gc + EM + C + E + A, 1, H + CI + OY + CJ + SX + Gw + JI + C + E + A, 1, H + CI + OY + CJ + Qr + Hv + JI + C + E + A, 1, D + IY + IV + Pc + h + N + C + E + A, 1, D + Gm + OS + BG + a + N + C + E + A, 6, H + " +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102" + Ci + N + C + B + E + A, 3, K + C + B + A, 1, I + Ns + C + B + E + A, 1, I + Nt + C + B + E + A, 1, I + Nu + C + B + E + A, 1, I + Nw + C + B + E + A, 1, I + NP + C + B + E + A, 1, I + NQ + C + B + E + A, 1, H + " +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102" + Ci + N + C + B + E + A, 9, D + L + Gl + " +k=1" + AI + N + M + CC + E + A, 1, D + L + II + " +k=1" + AI + N + M + CC + E + A, 1, D + L + HO + " +k=1" + AI + N + M + CC + E + A, 1, D + L + Ia + " +k=1" + AI + N + M + CC + E + A, 1, D + L + IG + " +k=1" + AI + N + M + CC + E + A, 1, D + L + PN + " +k=1" + AI + N + M + CC + E + A, 1, D + L + LN + " +k=1" + AI + N + M + CC + E + A, 4, H + " +lat_1=19.33333333333333 +lat_2=19.7 +lat_0=19.33333333333333 +lon_0=-80.56666666666666 +x_0=899160 +y_0=579120" + C + B + t + A, 2, DT + " +lat_1=55" + QY + Yu + Ms + s + N + C + E + A, 1, CU + " +lat_0=57" + Ku + Kv + V + LX + EO + KE + GZ + C + E + A, 1, D + Ft + YN + V + O + N + C + E + A, 1, D + Ft + YO + V + O + N + C + E + A, 1, D + Ft + ON + V + O + N + C + E + A, 1, D + Ft + Ms + V + O + N + C + E + A, 1, D + Ft + KI + V + O + N + C + E + A, 1, D + Ft + YP + V + O + N + C + E + A, 1, D + Ft + YQ + V + O + N + C + E + A, 1, D + Ft + SW + V + O + N + C + E + A, 1, H + Kw + Kx + UK + YR + BZ + N + C + E + A, 1, D + Bl + Co + V + EX + N + C + E + A, 1, D + Bl + Co + V + EX + N + C + t + A, 1, D + Bl + Cn + V + EX + N + C + E + A, 1, D + Bl + Cn + V + EX + N + C + t + A, 1, D + Bl + Iv + BG + EX + N + C + E + A, 1, D + Bl + Iv + BG + EX + N + C + t + A, 1, H + Dx + Dy + BC + IF + u + N + C + E + A, 1, H + Dx + Dy + BC + IF + Au + N + C + J + A, 1, H + Dz + Mq + EA + IF + u + Is + C + E + A, 1, H + Dz + Mq + EA + IF + Au + Gt + C + J + A, 1, DT + Yy + SY + L + Mt + s + QZ + C + E + A, 1, H + DW + Jn + y + HA + Bd + Ae + C + E + A, 1, H + DW + Jn + y + HA + Ac + AD + C + J + A, 1, H + DX + DY + AA + HA + Bd + Ae + C + E + A, 1, H + DX + DY + AA + HA + Ac + AD + C + J + A, 1, H + Ap + DZ + Ml + AJ + Bd + Ae + C + E + A, 1, H + Ap + DZ + Ml + AJ + Ac + AD + C + J + A, 1, H + LO + QS + Da + Mm + Bd + Ae + C + E + A, 1, H + LO + QS + Da + Mm + Ac + AD + C + J + A, 1, H + Db + Dc + Mn + Ir + Bd + Ae + C + E + A, 1, H + Db + Dc + Mn + Ir + Ac + AD + C + J + A, 1, H + Dd + De + Df + Iw + Bd + Ae + C + E + A, 1, H + Dd + De + Df + Iw + Ac + AD + C + J + A, 1, H + LP + LQ + CY + Ba + Fw + Fx + C + E + A, 1, H + LP + LQ + CY + Ba + Bw + CL + C + J + A, 1, H + Eh + Ei + y + Ba + Fw + Fx + C + E + A, 1, H + Eh + Ei + y + Ba + Bw + CL + C + J + A, 1, H + Ap + Dg + f + Ba + Fw + Fx + C + E + A, 1, H + Ap + Dg + f + Ba + Bw + CL + C + J + A, 1, H + Dh + Mo + Di + Jq + QG + QH + C + E + A, 1, H + Dh + Mo + Di + Jq + MC + MD + C + J + A, 1, D + Ch + Cp + Mp + h + N + C + E + A, 1, D + Ch + Cp + Mp + AE + N + C + J + A, 1, D + Aq + CR + Am + h + N + C + E + A, 1, D + Aq + CR + Am + AE + N + C + J + A, 1, DT + " +lat_1=24" + YG + " +lat_0=24" + NV + u + N + C + E + A, 1, H + LR + Dj + QT + LS + a + N + C + E + A, 1, H + LR + Dj + QT + LS + a + N + C + J + A, 1, D + Aq + Ob + Am + h + N + C + E + A, 1, D + Aq + Ob + Am + AE + N + C + J + A, 1, D + Gm + Cq + V + h + N + C + E + A, 1, D + Gm + Cq + V + AE + N + C + J + A, 1, D + Gm + Cr + V + EW + N + C + E + A, 1, D + Gm + Cr + V + CM + N + C + J + A, 1, D + p + Jb + BJ + O + N + C + E + A, 1, D + p + Jb + BJ + AF + N + C + J + A, 1, D + p + Cs + BJ + h + N + C + E + A, 1, D + p + Cs + BJ + AE + N + C + J + A, 1, D + p + Ix + BG + CX + N + C + E + A, 1, D + p + Ix + BG + ME + N + C + J + A, 1, D + f + Cz + EQ + AI + N + C + E + A, 1, D + f + Cz + EQ + AI + N + C + J + A, 1, D + f + DA + Am + EW + N + C + E + A, 1, D + f + DA + Am + MO + N + C + J + A, 1, D + DM + DB + AO + BU + KJ + C + E + A, 1, D + DM + DB + AO + MM + GI + C + J + A, 1, D + DM + DC + AO + HT + KJ + C + E + A, 1, D + DM + DC + AO + HT + GI + C + J + A, 1, H + EB + EC + Fo + GG + AV + AH + C + E + A, 1, H + EB + EC + Fo + GG + AV + GJ + C + J + A, 1, H + AY + ED + Fs + GG + O + N + C + E + A, 1, H + AY + ED + Fs + GG + AG + N + C + J + A, 1, H + EE + EF + AQ + Fl + u + N + C + E + A, 1, H + EE + EF + AQ + Fl + Au + N + C + J + A, 1, H + EG + EH + f + CV + u + Is + C + E + A, 1, H + EG + EH + f + CV + Au + Gt + C + J + A, 1, H + Az + DV + DM + Jo + O + N + C + E + A, 1, H + Az + DV + DM + Jo + AF + N + C + J + A, 1, H + Fi + Fj + AB + EY + AV + AH + C + E + A, 1, H + Fi + Fj + AB + EY + AV + CN + C + J + A, 1, H + Ej + Ek + AB + EY + O + Ae + C + E + A, 1, H + Ej + Ek + AB + EY + AF + AD + C + J + A, 1, H + FS + FT + IY + Hg + BZ + N + C + E + A, 1, H + FS + FT + IY + Hg + Eb + N + C + J + A, 1, H + OH + OI + OJ + Bi + BZ + N + C + E + A, 1, H + OH + OI + OJ + Bi + Eb + N + C + J + A, 1, D + YM + Rj + JE + O + N + C + E + A, 1, D + AL + Rf + JE + EW + N + C + E + A, 1, D + BD + Rg + JE + AI + N + C + E + A, 1, D + AK + HJ + V + AI + N + C + E + A, 1, D + AK + HJ + V + AI + N + C + J + A, 1, D + BD + DD + AO + HT + N + C + E + A, 1, D + BD + DD + AO + HT + N + C + J + A, 1, H + MU + Nz + AA + Ld + u + N + C + E + A, 1, H + MU + Nz + AA + Ld + MF + N + C + J + A, 1, H + Em + En + Ip + IL + O + N + C + E + A, 1, H + Em + En + Ip + IL + AF + N + C + J + A, 1, H + El + Dk + Ip + GE + h + Mk + C + E + A, 1, H + El + Dk + Ip + GE + AE + Mk + C + J + A, 1, H + OA + Er + Es + BE + Pk + N + C + E + A, 1, H + OA + Er + Es + BE + MH + N + C + t + A, 1, H + Eo + Ep + Eq + Jh + Tl + N + C + E + A, 1, H + Eo + Ep + Eq + Jh + MG + N + C + t + A, 1, CU + Kr + " +lonc=-86" + QI + AP + QJ + PY + KE + QK + C + E + A, 1, H + Bq + OB + Fo + BE + LU + N + C + E + A, 1, H + Bq + OB + Fo + BE + OT + N + C + t + A, 1, H + Ma + FW + IP + Js + CX + EK + C + E + A, 1, H + Ma + FW + IP + Js + An + Ao + C + J + A, 1, H + FU + FV + Iq + DE + CX + EK + C + E + A, 1, H + FU + FV + Iq + DE + An + Ao + C + J + A, 1, H + FX + FY + Nj + Na + CX + EK + C + E + A, 1, H + FX + FY + Nj + Na + An + Ao + C + J + A, 1, D + Hj + Ct + CP + AI + N + C + E + A, 1, D + Hj + Ct + CP + AI + N + C + J + A, 1, D + Li + Sj + Tn + O + Pm + C + E + A, 1, D + Hj + Bx + CP + EW + N + C + E + A, 1, D + Hj + Bx + CP + CM + N + C + J + A, 1, D + Cd + Hg + BG + O + N + C + E + A, 1, D + Cd + RS + BG + Bv + N + C + E + A, 1, D + Id + RT + Am + YC + N + C + E + A, 1, H + LM + RK + MV + IS + a + N + C + E + A, 1, H + LM + RK + MV + IS + DR + N + C + t + A, 1, H + JT + Jn + FZ + CS + O + N + C + E + A, 2, D + CQ + DG + V + O + Hh + C + E + A, 1, D + CQ + DG + V + AG + Hh + C + J + A, 1, D + CQ + DF + V + h + Tm + C + E + A, 1, D + CQ + DF + V + Gu + MN + C + J + A, 1, D + CQ + DH + V + CX + LV + C + E + A, 1, D + CQ + DH + V + An + NE + C + J + A, 1, D + Fp + DI + AO + AI + N + C + E + A, 1, D + Fp + DI + AO + AI + N + C + J + A, 1, D + BA + Gp + V + Bn + N + C + E + A, 1, D + BA + Gp + V + Bn + N + C + J + A, 1, D + Bl + Iy + V + O + N + C + E + A, 1, D + Bl + Iy + V + AF + N + C + J + A, 1, D + Bl + Cu + Hm + OC + N + C + E + A, 1, D + Bl + Cu + Hm + OC + N + C + J + A, 1, D + Bl + Cv + Iz + YD + N + C + E + A, 1, D + Bl + Cv + Iz + MI + N + C + J + A, 1, D + Fs + Cw + Ad + Bv + N + C + E + A, 1, D + Fs + Cw + Ad + MJ + N + C + J + A, 1, D + BA + Gp + V + Bn + N + C + E + A, 1, D + BA + Gp + V + Bn + N + C + J + A, 1, H + Dl + Dm + BB + Oc + AI + N + C + E + A, 1, H + Dl + Dm + BB + Oc + AI + N + C + J + A, 1, D + Fs + Cx + Ad + Qo + N + C + E + A, 1, D + Fs + Cx + Ad + MK + N + C + J + A, 1, H + Et + Eu + LT + NW + Rh + N + C + E + A, 1, H + Et + Eu + LT + NW + Z + N + C + J + A, 1, H + BH + Ev + Ib + EZ + a + N + C + E + A, 1, H + BH + Ev + Ib + EZ + DR + N + C + t + A, 1, H + Ew + Ex + Be + EZ + a + N + C + E + A, 1, H + Ew + Ex + Be + EZ + DR + N + C + t + A, 1, H + OK + Fa + BY + ET + a + N + C + E + A, 1, H + OK + Fa + BY + ET + a + N + C + J + A, 1, H + Fb + Fc + Ch + ET + a + N + C + E + A, 1, H + Fb + Fc + Ch + ET + a + N + C + J + A, 1, H + Dn + Ey + QU + Fl + a + N + C + E + A, 1, H + Dn + Ey + QU + Fl + a + N + C + J + A, 1, H + Ez + FA + Do + Fl + a + N + C + E + A, 1, H + Ez + FA + Do + Fl + a + N + C + J + A, 1, H + JT + Hl + GH + AJ + u + N + C + E + A, 1, H + JT + Hl + GH + AJ + Lc + N + C + t + A, 1, H + PP + CZ + AK + AJ + Ci + N + C + E + A, 1, H + PP + CZ + AK + AJ + KL + N + C + t + A, 1, H + PQ + Ca + p + AJ + AV + N + C + E + A, 1, H + PQ + Ca + p + AJ + KM + N + C + t + A, 1, H + MW + FB + BB + Ea + a + N + C + E + A, 1, H + MW + FB + BB + Ea + a + N + C + J + A, 1, H + Dp + Dq + y + Ea + a + N + C + E + A, 1, H + Dp + Dq + y + Ea + a + N + C + J + A, 1, H + GW + GX + GY + GA + h + IK + C + E + A, 1, D + EI + GE + Lb + BU + N + C + E + A, 1, D + EI + GE + Lb + JV + N + C + J + A, 1, H + FC + OD + Dr + CR + OE + N + C + E + A, 1, H + FC + OD + Dr + CR + OE + N + C + t + A, 1, H + Fd + Fe + AL + CS + a + N + C + E + A, 1, H + Fd + Fe + AL + CS + a + N + C + J + A, 1, H + OL + Ff + EJ + Ag + a + N + C + E + A, 1, H + OL + Ff + EJ + Ag + a + N + C + J + A, 1, H + FD + MX + BC + MQ + a + N + C + E + A, 1, H + FD + MX + BC + MQ + a + N + C + J + A, 1, H + FH + FI + Cb + Ag + EW + Fq + C + E + A, 1, H + FH + FI + Cb + Ag + CM + Fq + C + J + A, 1, DT + OM + RO + OX + CS + AV + Hh + C + E + A, 1, H + OM + RO + OX + CS + AV + Ju + C + E + A, 1, H + FE + MY + QV + Jr + h + AH + C + E + A, 1, H + FE + MY + QV + Jr + AE + CN + C + J + A, 1, H + FF + FG + Ds + CV + a + Cl + C + E + A, 1, H + FF + FG + Ds + CV + a + Gr + C + J + A, 1, H + CD + CE + Cc + CV + AI + Ju + C + E + A, 1, H + CD + CE + Cc + CV + AI + Nf + C + J + A, 1, H + FJ + FK + Dt + Ji + a + LV + C + E + A, 1, H + FJ + FK + Dt + Ji + a + Ne + C + J + A, 1, D + Fp + LW + JA + O + N + C + E + A, 1, D + Fp + LW + JA + AG + N + C + J + A, 1, H + " +lat_1=37" + YS + GM + Ga + s + N + C + E + A, 1, H + OF + FL + AA + GF + Bo + Cl + C + E + A, 1, H + OF + FL + AA + GF + Gs + Gr + C + J + A, 1, H + Az + Du + AB + GF + Bo + AH + C + E + A, 1, H + Az + Du + AB + GF + Gs + CN + C + J + A, 1, H + BH + OG + Ib + Cy + O + N + C + E + A, 1, H + BH + OG + Ib + Cy + AF + N + C + J + A, 1, H + FM + FN + Dv + AJ + O + N + C + E + A, 1, H + FM + FN + Dv + AJ + AF + N + C + J + A, 1, H + Mb + RN + Mr + Ga + a + N + C + E + A, 1, H + Mb + RN + Mr + Ga + a + N + C + J + A, 1, H + Fg + Fh + QX + CR + a + N + C + E + A, 1, H + Fg + Fh + QX + CR + a + N + C + J + A, 2, H + Jc + MZ + AL + Bu + a + N + C + J + A, 1, H + FO + FP + Dw + Bu + a + N + C + E + A, 1, H + FO + FP + Dw + Bu + a + N + C + J + A, 1, H + FQ + FR + PR + Bu + a + N + C + E + A, 1, H + FQ + FR + PR + Bu + a + N + C + J + A, 1, D + L + Bu + AP + YF + Sh + C + E + A, 1, D + CA + DJ + Ad + h + N + C + E + A, 1, D + CA + DJ + Ad + Gu + N + C + J + A, 1, D + CA + DK + Ad + u + EK + C + E + A, 1, D + CA + DK + Ad + Au + Ao + C + J + A, 1, D + CA + DL + Ad + CX + EK + C + E + A, 1, D + CA + DL + Ad + An + Ao + C + J + A, 1, D + CA + JB + Ad + a + N + C + E + A, 1, D + CA + JB + Ad + a + N + C + J + A, 1, H + JF + CG + AQ + BI + O + Cl + C + E + A, 1, H + AY + CF + Br + BI + O + AH + C + E + A, 1, H + JG + CH + f + BI + O + Fq + C + E + A, 1, H + UF + Nh + IZ + HJ + s + N + C + B + E + A, 1, DT + UF + Nh + IZ + HJ + s + N + C + B + E + A, 1, DT + UF + Nh + IZ + HJ + s + N + C + B + E + A, 1, H + JF + CG + AQ + BI + AG + NF + C + J + A, 1, H + AY + CF + Br + BI + AG + GJ + C + J + A, 1, H + JG + CH + f + BI + AG + Fq + C + J + A, 1, D + Kn + Sf + AO + O + N + C + E + A, 1, D + Ko + KO + AO + O + N + C + E + A, 1, D + GV + KI + Jl + O + N + C + E + A, 1, D + Kp + Sg + Jl + O + N + C + E + A, 1, D + Kq + KP + " +k=1" + O + N + C + E + A, 1, D + GV + KI + Jl + AG + N + C + J + A, 1, I + TY + C + E + A, 1, I + RG + C + E + A, 1, I + TV + o + C + E + A, 1, D + " +lat_0=13.5 +lon_0=144.75 +k=1" + BU + IK + C + E + A, 9, D + WJ + " +lon_0=46.5 +k=0.9994" + CX + N + Bc + Ge + EU + E + A, 22, K + C + A, 1, D + PT + Zz + V + s + N + C + E + A, 1, D + PT + NX + V + s + N + C + E + A, 1, D + GM + Ox + V + s + N + C + E + A, 1, D + PT + Tk + V + s + N + C + E + A, 1, D + GM + Oy + V + s + N + C + E + A, 1, D + GM + Rw + V + s + N + C + E + A, 1, D + GM + Oz + V + s + N + C + E + A, 1, D + GM + aA + V + s + N + C + E + A, 1, D + GM + PA + V + s + N + C + E + A, 1, D + Fs + PB + V + s + N + C + E + A, 1, D + IZ + ZH + V + s + N + C + E + A, 1, D + IZ + ZI + V + s + N + C + E + A, 1, D + IZ + ZJ + V + s + N + C + E + A, 1, D + IQ + " +lon_0=142" + V + s + N + C + E + A, 1, D + IQ + Pj + V + s + N + C + E + A, 1, D + IQ + " +lon_0=124" + V + s + N + C + E + A, 1, D + IQ + NX + V + s + N + C + E + A, 1, D + " +lat_0=20" + Rw + V + s + N + C + E + A, 1, D + IQ + ZR + V + s + N + C + E + A, 1, I + Mg + C + E + A, 1, I + NT + C + E + A, 1, I + Ot + C + E + A, 1, I + Nv + C + E + A, 1, I + PM + C + E + A, 11, D + L + US + AP + O + Ak + j + B + E + A, 3, K + C + B + A, 1, I + JN + C + B + E + A, 1, I + KC + C + B + E + A, 1, I + NR + C + B + E + A, 11, D + L + " +lon_0=105.625 +k=1.000024" + Jm + Pm + j + B + E + A, 1, D + L + " +lon_0=105.625 +k=1.00002514" + Jm + Pm + C + B + E + A, 1, D + L + " +lon_0=96.875 +k=1" + Jm + " +y_0=1400000" + j + B + E + A, 1, D + L + " +lon_0=96.875 +k=0.99999387" + Jm + DQ + C + B + E + A, 13, I + QF + o + C + B + E + A, 1, I + Ny + o + C + B + E + A, 1, I + Nq + o + C + B + E + A, 45, K + C + A, 1, D + OO + KS + SB + Of + N + C + E + A, 1, D + OO + KS + SB + JJ + N + C + t + A, 1, D + OO + KS + SB + Of + N + C + E + A, 1, D + OO + KS + SB + JJ + N + C + t + A, 1, D + GH + Rk + " +k=1.0002" + Oa + N + C + E + A, 1, D + GH + Rk + " +k=1.0002" + HL + N + C + t + A, 1, D + GH + Rk + " +k=1.0002" + Oa + N + C + E + A, 1, D + GH + Rk + " +k=1.0002" + HL + N + C + t + A, 1, H + Ky + Kz + Rl + Mc + Oa + " +y_0=130000" + C + E + A, 1, H + Ky + Kz + Rl + Mc + HL + Zo + C + t + A, 1, H + Ky + Kz + Rl + Mc + Oa + " +y_0=130000" + C + E + A, 1, H + Ky + Kz + Rl + Mc + HL + Zo + C + t + A, 1, H + Bq + AK + Rm + YU + " +x_0=120000 +y_0=60000" + C + E + A, 1, H + Bq + AK + Rm + YU + Zp + aM + C + t + A, 1, H + Bq + AK + Rm + YU + " +x_0=120000 +y_0=60000" + C + E + A, 1, H + Bq + AK + Rm + YU + Zp + aM + C + t + A, 1, D + Fp + Bj + Ze + Of + N + C + E + A, 1, D + Fp + Bj + Ze + JJ + N + C + t + A, 1, D + Fp + Bj + Ze + Of + N + C + E + A, 1, D + Fp + Bj + Ze + JJ + N + C + t + A, 1, H + LA + Be + AJ + Sk + Bn + " +y_0=30000" + C + E + A, 1, H + LA + Be + AJ + Sk + Ng + aN + C + t + A, 1, H + LA + Be + AJ + Sk + Bn + " +y_0=30000" + C + E + A, 1, H + LA + Be + AJ + Sk + Ng + aN + C + t + A, 1, CU + LB + Zf + Zg + " +k=1" + Tp + ZL + KE + Zh + C + E + A, 1, CU + LB + Zf + Zg + " +k=1" + ZN + Zq + KE + Zh + C + t + A, 1, CU + LB + Zf + Zg + " +k=1" + Tp + ZL + KE + Zh + C + E + A, 1, CU + LB + Zf + Zg + " +k=1" + ZN + Zq + KE + Zh + C + t + A, 1, D + BD + Bj + YV + Jm + N + C + E + A, 1, D + BD + Bj + YV + HM + N + C + t + A, 1, D + BD + Bj + YV + Jm + N + C + E + A, 1, D + BD + Bj + YV + HM + N + C + t + A, 1, D + OO + YW + Zi + Oa + N + C + E + A, 1, D + OO + YW + Zi + HL + N + C + t + A, 1, D + OO + YW + Zi + Oa + N + C + E + A, 1, D + OO + YW + Zi + HL + N + C + t + A, 1, D + Tq + KT + Lk + Jm + N + C + E + A, 1, D + Tq + KT + Lk + HM + N + C + t + A, 1, D + Tq + KT + Lk + Jm + N + C + E + A, 1, D + Tq + KT + Lk + HM + N + C + t + A, 1, D + GH + Bj + Qs + Jm + N + C + E + A, 1, D + GH + Bj + Qs + HM + N + C + t + A, 1, D + GH + Bj + Qs + Jm + N + C + E + A, 1, D + GH + Bj + Qs + HM + N + C + t + A, 1, D + IP + KU + Zj + " +x_0=10000" + N + C + E + A, 1, D + IP + KU + Zj + aV + N + C + t + A, 1, D + IP + KU + Zj + " +x_0=10000" + N + C + E + A, 1, D + IP + KU + Zj + aV + N + C + t + A, 1, D + IP + Ir + Zk + Of + N + C + E + A, 1, D + IP + Ir + Zk + JJ + N + C + t + A, 1, D + IP + Ir + Zk + Of + N + C + E + A, 1, D + IP + Ir + Zk + JJ + N + C + t + A, 1, D + Tr + Lj + " +k=1.0001" + Oa + N + C + E + A, 1, D + Tr + Lj + " +k=1.0001" + HL + N + C + t + A, 1, D + Tr + Lj + " +k=1.0001" + Oa + N + C + E + A, 1, D + Tr + Lj + " +k=1.0001" + HL + N + C + t + A, 1, CU + Pn + Sl + " +alpha=5 +k=1 +x_0=-300000 +y_0=-4600000" + KE + " +gamma=5" + C + E + A, 1, CU + Pn + Sl + " +alpha=5 +k=1" + Zr + Yp + KE + " +gamma=5" + C + t + A, 1, CU + Pn + Sl + " +alpha=5 +k=1 +x_0=-300000 +y_0=-4600000" + KE + " +gamma=5" + C + E + A, 1, CU + Pn + Sl + " +alpha=5 +k=1" + Zr + Yp + KE + " +gamma=5" + C + t + A, 1, D + Ts + KV + Sb + " +x_0=60000" + N + C + E + A, 1, D + Ts + KV + Sb + aO + N + C + t + A, 1, D + Ts + KV + Sb + " +x_0=60000" + N + C + E + A, 1, D + Ts + KV + Sb + aO + N + C + t + A, 1, D + LC + IW + YX + Zl + N + C + E + A, 1, D + LC + IW + YX + aP + N + C + t + A, 1, D + LC + IW + YX + Zl + N + C + E + A, 1, D + LC + IW + YX + aP + N + C + t + A, 1, H + Jc + YY + Rn + Sm + BU + Rz + C + E + A, 1, H + Jc + YY + Rn + Sm + JW + Ra + C + t + A, 1, H + Jc + YY + Rn + Sm + BU + Rz + C + E + A, 1, H + Jc + YY + Rn + Sm + JW + Ra + C + t + A, 1, D + LD + KW + Zm + Jm + N + C + E + A, 1, D + LD + KW + Zm + HM + N + C + t + A, 1, D + LD + KW + Zm + Jm + N + C + E + A, 1, D + LD + KW + Zm + HM + N + C + t + A, 1, D + LE + Sn + YZ + s + N + C + E + A, 1, D + LE + Sn + YZ + s + N + C + t + A, 1, D + LE + Sn + YZ + s + N + C + E + A, 1, D + LE + Sn + YZ + s + N + C + t + A, 4, H + JT + Hl + GH + AJ + u + N + C + E + A, 1, H + JT + Hl + GH + AJ + Lc + N + C + t + A, 2, D + L + UI + " +k=1" + O + N + C + B + E + A, 5, D + L + IH + " +k=0.9985000000000001" + Tp + N + C + B + E + A, 1, D + L + IH + " +k=1" + aH + N + C + B + E + A, 3, H + Jc + MZ + AL + Bu + a + N + C + E + A, 1, H + JT + Jn + FZ + CS + AG + N + C + J + A, 1, K + Bc + Ge + " +towgs84=-24,-203,268,0,0,0,0" + A, 1, K + Bc + Ge + " +towgs84=-183,-15,273,0,0,0,0" + A, 1, K + R + " +towgs84=-235,-110,393,0,0,0,0" + A, 1, H + PP + CZ + AK + AJ + Ci + N + C + E + A, 1, H + PP + CZ + AK + AJ + KL + N + C + t + A, 1, H + PQ + Ca + p + AJ + AV + N + C + E + A, 1, H + PQ + Ca + p + AJ + KM + N + C + t + A, 5, K + Bc + Ge + PK + A, 2, K + Bc + Ge + " +towgs84=-63,176,185,0,0,0,0" + A, 21, I + Me + Bc + Ge + PK + E + A, 7, H + Sc + Ya + GM + So + u + N + C + B + E + A, 1, H + Sc + Ya + GM + So + Au + N + C + B + J + A, 1, H + Sc + Ya + GM + So + u + N + C + E + A, 1, H + Sc + Ya + GM + So + Au + N + C + J + A, 6, He + Hr + HN + s + N + j + B + E + A, 1, He + m + HN + s + N + j + B + E + A, 1, "+proj=cea" + HN + " +lat_ts=30" + s + N + j + B + E + A, 29, H + " +lat_1=39 +lat_2=43" + Ip + UI + s + N + C + B + E + A, 21, K + C + A, 1, D + Ou + Ov + Zw + UV + Yl + C + E + A, 6, K + C + A, 1, D + Ou + Ov + Zw + UV + Yl + C + E + A, 14, I + KD + Bc + Ge + DO + E + A, 1, I + JZ + Bc + Ge + DO + E + A, 1, I + JM + Bc + Ge + DO + E + A, 28, K + C + A, 2, K + C + A, 2, K + C + A, 2, K + C + A, 16, H + " +lat_1=43.2 +lat_0=43.2 +lon_0=-95.25 +k_0=1.000052 +x_0=3505207.010414021 +y_0=2926085.852171705" + C + J + A, 1, H + " +lat_1=43.16666666666666 +lat_0=43.16666666666666 +lon_0=-92.75 +k_0=1.000043 +x_0=3810007.62001524 +y_0=2987045.974091948" + C + J + A, 1, D + Md + " +lon_0=-91.2 +k=1.000035 +x_0=4114808.229616459 +y_0=2529845.05969012" + C + J + A, 1, H + " +lat_1=42.53333333333333 +lat_0=42.53333333333333 +lon_0=-94.83333333333333 +k_0=1.000045 +x_0=4419608.839217679 +y_0=2621285.242570485" + C + J + A, 1, H + " +lat_1=42.65 +lat_0=42.65 +lon_0=-92.25 +k_0=1.000032 +x_0=4724409.448818898 +y_0=2712725.425450851" + C + J + A, 1, D + Md + " +lon_0=-95.73333333333333 +k=1.000039 +x_0=5029210.058420117 +y_0=2011684.023368047" + C + J + A, 1, D + Md + " +lon_0=-94.63333333333334" + Sb + " +x_0=5334010.668021336 +y_0=2072644.145288291" + C + J + A, 1, D + Md + " +lon_0=-93.71666666666667 +k=1.000033 +x_0=5638811.277622555 +y_0=2133604.267208535" + C + J + A, 1, D + Md + " +lon_0=-92.81666666666666" + OP + " +x_0=5943611.887223775 +y_0=2194564.389128779" + C + J + A, 1, H + " +lat_1=41.83333333333334 +lat_0=41.83333333333334 +lon_0=-91.66666666666667 +k_0=1.00002 +x_0=6248412.496824994 +y_0=2438404.876809754" + C + J + A, 1, D + Md + " +lon_0=-90.53333333333333" + OP + " +x_0=6553213.106426213 +y_0=2316484.632969266" + C + J + A, 1, H + " +lat_1=40.91666666666666 +lat_0=40.91666666666666 +lon_0=-93.75 +k_0=1.000037 +x_0=6858013.716027432" + Yq + C + J + A, 1, D + Md + Oo + Og + " +x_0=7162814.325628651 +y_0=1950723.901447803" + C + J + A, 1, D + Md + " +lon_0=-91.25 +k=1.000018 +x_0=7467614.93522987" + Yq + C + J + A, 3, K + C + A, 1, I + KD + o + C + E + A, 1, I + JZ + o + C + E + A, 1, I + JM + o + C + E + A, 1, I + Me + o + C + E + A, 1, I + Rb + o + C + E + A, 1, I + Rc + o + C + E + A, 1, I + SO + o + C + E + A, 1, I + Td + o + C + E + A, 3, K + C + A, 2, K + C + A, 23, D + Qt + Sp + SB + Bn + N + C + E + A, 1, D + " +lat_0=48" + Sp + " +k=1.00019" + BU + N + C + E + A, 1, H + Yb + Qt + KK + " +k_0=1.000145" + Bn + IK + C + E + A, 1, H + Yb + Qt + " +lon_0=-108.5" + Mc + h + " +y_0=150000" + C + E + A, 1, H + LF + LG + Ba + Mc + h + EK + C + E + A, 1, H + LF + LG + Ba + " +k_0=1.00009" + BU + Rz + C + E + A, 1, D + Pn + " +lon_0=-107.75 +k=1.000148" + h + N + C + E + A, 1, H + aI + " +lat_0=46.25 +lon_0=-111.25 +k_0=1.000185" + BU + EK + C + E + A, 1, H + WV + WW + Ub + " +k_0=1.0001515" + h + Rz + C + E + A, 1, D + WX + Uc + " +k=1.00024" + BU + N + C + E + A, 1, D + Qt + Sp + SB + Ng + N + C + t + A, 1, D + " +lat_0=48" + Sp + " +k=1.00019" + JW + N + C + t + A, 1, H + Yb + Qt + KK + " +k_0=1.000145" + Ng + " +y_0=199999.9999992" + C + t + A, 1, H + Yb + Qt + " +lon_0=-108.5" + Mc + OU + " +y_0=150000.00001464" + C + t + A, 1, H + LF + LG + Ba + Mc + OU + Yr + C + t + A, 1, H + LF + LG + Ba + " +k_0=1.00009" + JW + " +y_0=49999.99971024" + C + t + A, 1, D + Pn + " +lon_0=-107.75 +k=1.000148" + OU + N + C + t + A, 1, H + aI + " +lat_0=46.25 +lon_0=-111.25 +k_0=1.000185" + JW + Yr + C + t + A, 1, H + WV + WW + Ub + " +k_0=1.0001515" + OU + Ra + C + t + A, 1, D + WX + Uc + " +k=1.00024" + JV + N + C + J + A, 3, D + Po + " +lon_0=-122.45 +k=1.000007 +x_0=48000 +y_0=24000" + C + E + A, 1, D + Po + " +lon_0=-122.45 +k=1.000007 +x_0=48000 +y_0=24000" + C + J + A, 1, K + C + A, 3, K + j + A, 3, K + j + A, 3, D + LH + LI + " +k=1" + Qx + " +y_0=126867.909" + Nc + Nd + " +towgs84=-275.7224,94.7824,340.8944,-8.001,-4.42,-11.821,1" + E + A, 115, D + Pp + Sq + Ll + l + q + C + E + A, 1, D + Pp + Sq + Ll + l + q + C + J + A, 1, D + Qu + Oj + Lm + l + q + C + E + A, 1, D + Qu + Oj + Lm + l + q + C + J + A, 1, D + " +lat_0=39" + KX + Ln + l + q + C + E + A, 1, D + " +lat_0=39" + KX + Ln + l + q + C + J + A, 1, D + " +lat_0=40.45" + Pq + Yc + l + q + C + E + A, 1, D + " +lat_0=40.45" + Pq + Yc + l + q + C + J + A, 1, D + " +lat_0=40.05" + Ud + OQ + l + q + C + E + A, 1, D + " +lat_0=40.05" + Ud + OQ + l + q + C + J + A, 1, D + Yd + Pr + OR + l + q + C + E + A, 1, D + Yd + Pr + OR + l + q + C + J + A, 1, D + " +lat_0=39" + Tt + Zn + l + q + C + E + A, 1, D + " +lat_0=39" + Tt + Zn + l + q + C + J + A, 1, D + " +lat_0=40.4" + Ue + Ln + l + q + C + E + A, 1, D + " +lat_0=40.4" + Ue + Ln + l + q + C + J + A, 1, D + Pp + Uf + Qv + l + q + C + E + A, 1, D + Pp + Uf + Qv + l + q + C + J + A, 1, D + Tu + Ug + " +k=1.000021" + l + q + C + E + A, 1, D + Tu + Ug + " +k=1.000021" + l + q + C + J + A, 1, D + Tv + Uh + " +k=1.000024" + l + q + C + E + A, 1, D + Tv + Uh + " +k=1.000024" + l + q + C + J + A, 1, D + " +lat_0=40.15" + Ui + " +k=1.000032" + l + q + C + E + A, 1, D + " +lat_0=40.15" + Ui + " +k=1.000032" + l + q + C + J + A, 1, D + " +lat_0=38.1" + Pr + Qw + l + q + C + E + A, 1, D + " +lat_0=38.1" + Pr + Qw + l + q + C + J + A, 1, D + " +lat_0=38.45" + KY + " +k=1.000018" + l + q + C + E + A, 1, D + " +lat_0=38.45" + KY + " +k=1.000018" + l + q + C + J + A, 1, D + " +lat_0=38.65" + Uj + Yc + l + q + C + E + A, 1, D + " +lat_0=38.65" + Uj + Yc + l + q + C + J + A, 1, D + " +lat_0=39.1" + Uk + OR + l + q + C + E + A, 1, D + " +lat_0=39.1" + Uk + OR + l + q + C + J + A, 1, D + Tw + Sq + OR + l + q + C + E + A, 1, D + Tw + Sq + OR + l + q + C + J + A, 1, D + " +lat_0=38.2" + Sr + Og + l + q + C + E + A, 1, D + " +lat_0=38.2" + Sr + Og + l + q + C + J + A, 1, D + Tx + KX + " +k=1.000033" + l + q + C + E + A, 1, D + Tx + KX + " +k=1.000033" + l + q + C + J + A, 1, D + Ty + Oj + OQ + l + q + C + E + A, 1, D + Ty + Oj + OQ + l + q + C + J + A, 1, D + " +lat_0=39.95" + Pq + Qw + l + q + C + E + A, 1, D + " +lat_0=39.95" + Pq + Qw + l + q + C + J + A, 1, D + Qu + Tt + Lm + l + q + C + E + A, 1, D + Qu + Tt + Lm + l + q + C + J + A, 1, D + Tu + Ul + Ye + l + q + C + E + A, 1, D + Tu + Ul + Ye + l + q + C + J + A, 1, D + Tz + " +lon_0=-85.7" + Ll + l + q + C + E + A, 1, D + Tz + " +lon_0=-85.7" + Ll + l + q + C + J + A, 1, D + " +lat_0=39.9" + MQ + Ll + l + q + C + E + A, 1, D + " +lat_0=39.9" + MQ + Ll + l + q + C + J + A, 1, D + " +lat_0=39.65" + UA + OR + l + q + C + E + A, 1, D + " +lat_0=39.65" + UA + OR + l + q + C + J + A, 1, D + " +lat_0=37.95" + HC + OP + l + q + C + E + A, 1, D + " +lat_0=37.95" + HC + OP + l + q + C + J + A, 1, D + " +lat_0=39.75" + Ss + Qs + l + q + C + E + A, 1, D + " +lat_0=39.75" + Ss + Qs + l + q + C + J + A, 1, D + Tz + HC + Lm + l + q + C + E + A, 1, D + Tz + HC + Lm + l + q + C + J + A, 1, D + Tx + To + Ll + l + q + C + E + A, 1, D + Tx + To + Ll + l + q + C + J + A, 1, D + " +lat_0=38.7 +lon_0=-85.95" + Yf + l + q + C + E + A, 1, D + " +lat_0=38.7 +lon_0=-85.95" + Yf + l + q + C + J + A, 1, D + Yg + KY + OP + l + q + C + E + A, 1, D + Yg + KY + OP + l + q + C + J + A, 1, D + " +lat_0=40.3" + SA + OQ + l + q + C + E + A, 1, D + " +lat_0=40.3" + SA + OQ + l + q + C + J + A, 1, D + " +lat_0=38.55" + Um + Qv + l + q + C + E + A, 1, D + " +lat_0=38.55" + Um + Qv + l + q + C + J + A, 1, D + " +lat_0=38.8" + UA + Qw + l + q + C + E + A, 1, D + " +lat_0=38.8" + UA + Qw + l + q + C + J + A, 1, D + Yh + HC + Lm + l + q + C + E + A, 1, D + Yh + HC + Lm + l + q + C + J + A, 1, D + " +lat_0=38.4" + St + Lk + l + q + C + E + A, 1, D + " +lat_0=38.4" + St + Lk + l + q + C + J + A, 1, D + Tw + Ss + " +k=1.000037" + l + q + C + E + A, 1, D + Tw + Ss + " +k=1.000037" + l + q + C + J + A, 1, D + Yg + Un + Ln + l + q + C + E + A, 1, D + Yg + Un + Ln + l + q + C + J + A, 1, D + Qu + " +lon_0=-86.75" + OP + l + q + C + E + A, 1, D + Qu + " +lon_0=-86.75" + OP + l + q + C + J + A, 1, D + " +lat_0=38.95" + Pr + Qv + l + q + C + E + A, 1, D + " +lat_0=38.95" + Pr + Qv + l + q + C + J + A, 1, D + " +lat_0=39.45" + Sr + Lm + l + q + C + E + A, 1, D + " +lat_0=39.45" + Sr + Lm + l + q + C + J + A, 1, D + Tv + KZ + Ln + l + q + C + E + A, 1, D + Tv + KZ + Ln + l + q + C + J + A, 1, D + Yd + Uo + Yf + l + q + C + E + A, 1, D + Yd + Uo + Yf + l + q + C + J + A, 1, D + Yi + " +lon_0=-86.7" + Og + l + q + C + E + A, 1, D + Yi + " +lon_0=-86.7" + Og + l + q + C + J + A, 1, D + " +lat_0=37.85" + Pq + Lk + l + q + C + E + A, 1, D + " +lat_0=37.85" + Pq + Lk + l + q + C + J + A, 1, D + Po + " +lon_0=-87.95" + Ye + l + q + C + E + A, 1, D + Po + " +lon_0=-87.95" + Ye + l + q + C + J + A, 1, D + " +lat_0=39.7" + Oj + " +k=1.000044" + l + q + C + E + A, 1, D + " +lat_0=39.7" + Oj + " +k=1.000044" + l + q + C + J + A, 1, D + Yj + " +lon_0=-85.3" + OQ + l + q + C + E + A, 1, D + Yj + " +lon_0=-85.3" + OQ + l + q + C + J + A, 1, D + Yh + Up + Zn + l + q + C + E + A, 1, D + Yh + Up + Zn + l + q + C + J + A, 1, D + Po + " +lon_0=-87.05 +k=1.000014" + l + q + C + E + A, 1, D + Po + " +lon_0=-87.05 +k=1.000014" + l + q + C + J + A, 1, D + Fo + SA + " +k=1.000041" + l + q + C + E + A, 1, D + Fo + SA + " +k=1.000041" + l + q + C + J + A, 1, D + Yj + OS + " +k=1.000017" + l + q + C + E + A, 1, D + Yj + OS + " +k=1.000017" + l + q + C + J + A, 1, D + " +lat_0=40.2" + KZ + Ln + l + q + C + E + A, 1, D + " +lat_0=40.2" + KZ + Ln + l + q + C + J + A, 1, D + Yi + Su + Lk + l + q + C + E + A, 1, D + Yi + Su + Lk + l + q + C + J + A, 1, D + Ty + St + Og + l + q + C + E + A, 1, D + Ty + St + Og + l + q + C + J + A, 1, D + Pp + " +lon_0=-85.25" + Ll + l + q + C + E + A, 1, D + Pp + " +lon_0=-85.25" + Ll + l + q + C + J + A, 3, K + C + B + A, 1, I + JM + C + B + E + A, 1, I + Me + C + B + E + A, 1, I + Rb + C + B + E + A, 152, D + WY + Bu + " +k=1.0000365285 +x_0=147218.6942 +y_0=0.0037" + C + E + A, 1, D + WZ + Uq + " +k=1.0000495683 +x_0=172821.9461 +y_0=0.0017" + C + E + A, 1, D + Wa + Ur + " +k=1.0000486665 +x_0=93150 +y_0=0.0029" + C + E + A, 1, H + Wb + Wc + Us + " +k_0=1.0000331195 +x_0=228600.4575 +y_0=148551.4837" + C + E + A, 1, D + Nj + " +lon_0=-88" + Og + " +x_0=31600 +y_0=4600" + C + E + A, 1, D + Wd + Ut + " +k=1.0000382778 +x_0=175260.3502 +y_0=0.0048" + C + E + A, 1, H + We + Wf + Uu + " +k_0=1.0000383841 +x_0=64008.1276 +y_0=59445.9043" + C + E + A, 1, D + Wg + " +lon_0=-88.5 +k=1.0000286569 +x_0=244754.8893 +y_0=0.0049" + C + E + A, 1, H + Wh + Wi + Uv + " +k_0=1.0000391127 +x_0=60045.72 +y_0=44091.4346" + C + E + A, 1, D + " +lat_0=43.6" + Uw + " +k=1.0000463003 +x_0=199949.1989 +y_0=0.0086" + C + E + A, 1, H + Wj + Wk + Ux + " +k_0=1.00003498 +x_0=169164.3381 +y_0=111569.6134" + C + E + A, 1, H + aQ + aR + Wl + " +k_0=1.0000349151 +x_0=113690.6274 +y_0=53703.1201" + C + E + A, 1, H + Zs + Zt + Uy + " +k_0=1.0000384786 +x_0=247193.2944 +y_0=146591.9896" + C + E + A, 1, D + Wm + Uz + " +k=1.0000346418 +x_0=263347.7263 +y_0=0.0076" + C + E + A, 1, D + " +lat_0=44.4" + VA + " +k=1.0000187521 +x_0=158801.1176 +y_0=0.0023" + C + E + A, 1, D + Wn + Oo + " +k=1.0000385418 +x_0=59131.3183 +y_0=0.0041" + C + E + A, 1, D + Wo + VB + " +k=1.0000410324 +x_0=51816.104 +y_0=0.003" + C + E + A, 1, H + Wp + Wq + VC + " +k_0=1.000035079 +x_0=120091.4402 +y_0=91687.92389999999" + C + E + A, 1, D + Wr + VD + " +k=1.0000552095 +x_0=133502.6683 +y_0=0.0063" + C + E + A, 1, D + Ws + VE + " +k=1.0000673004 +x_0=275844.5533 +y_0=0.0157" + C + E + A, 1, D + Wt + " +lon_0=-90.8 +k=1.0000349452 +x_0=242316.4841 +y_0=0.01" + C + E + A, 1, H + Wu + Wv + VF + " +k_0=1.0000390487 +x_0=170078.7403 +y_0=45830.2947" + C + E + A, 1, H + Ww + Wx + Ka + " +k_0=1.0000344057 +x_0=150876.3018 +y_0=79170.7795" + C + E + A, 1, D + Wy + VG + " +k=1.0000394961 +x_0=113081.0261 +y_0=0.0045" + C + E + A, 1, D + Wz + VH + " +k=1.0000677153 +x_0=220980.4419 +y_0=0.008500000000000001" + C + E + A, 1, D + XA + VI + " +k=1.0000353 +x_0=27000 +y_0=25000" + C + E + A, 1, D + XB + VJ + " +k=1.0000260649 +x_0=185928.3728 +y_0=0.0009" + C + E + A, 1, D + XC + Su + " +k=1.0000233704 +x_0=79857.7614 +y_0=0.0012" + C + E + A, 1, D + XD + VK + " +k=1.0000319985 +x_0=130454.6598 +y_0=0.0033" + C + E + A, 1, H + XE + XF + VL + " +k_0=1.0000627024 +x_0=198425.197 +y_0=105279.7829" + C + E + A, 1, D + XG + VM + " +k=1.0000599003 +x_0=116129.0323 +y_0=0.0058" + C + E + A, 1, H + XH + XI + " +lon_0=-89.77 +k_0=1.000053289 +x_0=74676.1493 +y_0=55049.2669" + C + E + A, 1, D + XJ + VN + " +k=1.0000234982 +x_0=238658.8794 +y_0=0.0032" + C + E + A, 1, D + XK + VO + " +k=1.0000362499 +x_0=105461.0121 +y_0=0.0029" + C + E + A, 1, H + XL + XM + VP + " +k_0=1.0000434122 +x_0=204521.209 +y_0=121923.9861" + C + E + A, 1, D + XN + VQ + " +k=1.0000236869 +x_0=182880.3676 +y_0=0.0033" + C + E + A, 1, H + XO + XP + VR + " +k_0=1.0000686968 +x_0=70104.1401 +y_0=57588.0346" + C + E + A, 1, H + XQ + XR + VS + " +k_0=1.0000362977 +x_0=167640.3354 +y_0=86033.0876" + C + E + A, 1, D + XS + Kb + " +k=1.0000433849 +x_0=141732.2823 +y_0=0.0059" + C + E + A, 1, H + XT + XU + " +lon_0=-89.5 +k_0=1.000039936 +x_0=56388.1128 +y_0=50022.1874" + C + E + A, 1, D + XV + VT + " +k=1.0000649554 +x_0=227990.8546 +y_0=0.0109" + C + E + A, 1, H + Zu + Zv + VU + " +k_0=1.0000375653 +x_0=202387.6048 +y_0=134255.4253" + C + E + A, 1, D + XW + VV + " +k=1.0000337311 +x_0=146304.2926 +y_0=0.0068" + C + E + A, 1, D + XX + VW + " +k=1.0000495976 +x_0=250546.1013 +y_0=0.0234" + C + E + A, 1, D + XY + VX + " +k=1.0000373868 +x_0=185623.5716 +y_0=0.0051" + C + E + A, 1, H + XZ + Xa + VY + " +k_0=1.0000573461 +x_0=216713.2336 +y_0=120734.1631" + C + E + A, 1, D + LJ + VZ + " +k=1.000032144 +x_0=262433.3253 +y_0=0.009599999999999999" + C + E + A, 1, D + LJ + Kb + " +k=1.0000381803 +x_0=165506.7302 +y_0=0.0103" + C + E + A, 1, H + Xb + Xc + Va + " +k_0=1.0000597566 +x_0=187147.5744 +y_0=107746.7522" + C + E + A, 1, D + Xd + Vb + " +k=1.0000361538 +x_0=256946.9138 +y_0=0.0041" + C + E + A, 1, H + Xe + Xf + Vc + " +k_0=1.0000408158 +x_0=222504.4451 +y_0=47532.0602" + C + E + A, 1, H + Xg + Xh + Vd + " +k_0=1.0000730142 +x_0=134417.0689 +y_0=50337.1092" + C + E + A, 1, H + Xi + Xj + Ve + " +k_0=1.0000367192 +x_0=232562.8651 +y_0=111088.2224" + C + E + A, 1, H + Xk + Xl + Vf + " +k_0=1.0000475376 +x_0=234086.8682 +y_0=188358.6058" + C + E + A, 1, D + Xm + Vg + " +k=1.00003738 +x_0=120091.4415 +y_0=0.003" + C + E + A, 1, D + Xn + Vh + " +k=1.0000346179 +x_0=208788.418 +y_0=0.0034" + C + E + A, 1, D + Xo + Vi + " +k=1.0000333645 +x_0=185013.9709 +y_0=0.007" + C + E + A, 1, H + Xp + Xq + Ka + " +k_0=1.0000392096 +x_0=120091.4402 +y_0=45069.7587" + C + E + A, 1, H + Xr + Xs + Bu + " +k_0=1.0000421209 +x_0=208483.6173 +y_0=134589.754" + C + E + A, 1, D + WY + Bu + " +k=1.0000365285 +x_0=147218.6941325883 +y_0=0.00365760731521463" + C + J + A, 1, D + WZ + Uq + " +k=1.0000495683 +x_0=172821.945948692 +y_0=0.001828803657607315" + C + J + A, 1, D + Wa + Ur + " +k=1.0000486665 +x_0=93150" + IX + C + J + A, 1, H + Wb + Wc + Us + " +k_0=1.0000331195 +x_0=228600.4575057151 +y_0=148551.4835661671" + C + J + A, 1, D + Nj + " +lon_0=-88" + Og + " +x_0=31599.99989839979 +y_0=4599.999898399797" + C + J + A, 1, D + Wd + Ut + " +k=1.0000382778 +x_0=175260.3502159004" + Vj + C + J + A, 1, H + We + Wf + Uu + " +k_0=1.0000383841 +x_0=64008.12771145543 +y_0=59445.90419100838" + C + J + A, 1, D + Wg + " +lon_0=-88.5 +k=1.0000286569 +x_0=244754.8892049784" + Vj + C + J + A, 1, H + Wh + Wi + Uv + " +k_0=1.0000391127 +x_0=60045.72009144018 +y_0=44091.43449326898" + C + J + A, 1, D + " +lat_0=43.6" + Uw + " +k=1.0000463003 +x_0=199949.198983998" + Vk + C + J + A, 1, H + Wj + Wk + Ux + " +k_0=1.00003498 +x_0=169164.338023876 +y_0=111569.613512827" + C + J + A, 1, H + aQ + aR + Wl + " +k_0=1.0000349151 +x_0=113690.6273812548 +y_0=53703.12024384048" + C + J + A, 1, H + Zs + Zt + Uy + " +k_0=1.0000384786 +x_0=247193.2943865888 +y_0=146591.9896367793" + C + J + A, 1, D + Wm + Uz + " +k=1.0000346418 +x_0=263347.7263906528 +y_0=0.00762001524003048" + C + J + A, 1, D + " +lat_0=44.4" + VA + " +k=1.0000187521 +x_0=158801.1176022352 +y_0=0.002438404876809754" + C + J + A, 1, D + Wn + Oo + " +k=1.0000385418 +x_0=59131.31826263652" + Vl + C + J + A, 1, D + Wo + VB + " +k=1.0000410324 +x_0=51816.10393700787" + IX + C + J + A, 1, H + Wp + Wq + VC + " +k_0=1.000035079" + Ys + " +y_0=91687.92390144781" + C + J + A, 1, D + Wr + VD + " +k=1.0000552095 +x_0=133502.6682245364 +y_0=0.006400812801625603" + C + J + A, 1, D + Ws + VE + " +k=1.0000673004 +x_0=275844.5532131065 +y_0=0.0158496316992634" + C + J + A, 1, D + Wt + " +lon_0=-90.8 +k=1.0000349452 +x_0=242316.484023368 +y_0=0.01005842011684023" + C + J + A, 1, H + Wu + Wv + VF + " +k_0=1.0000390487 +x_0=170078.7401574803 +y_0=45830.29484378968" + C + J + A, 1, H + Ww + Wx + Ka + " +k_0=1.0000344057 +x_0=150876.3017526035 +y_0=79170.77937515875" + C + J + A, 1, D + Wy + VG + " +k=1.0000394961 +x_0=113081.0261620523 +y_0=0.004572009144018288" + C + J + A, 1, D + Wz + VH + " +k=1.0000677153 +x_0=220980.4419608839" + Vk + C + J + A, 1, D + XA + VI + " +k=1.0000353 +x_0=27000 +y_0=24999.99989839979" + C + J + A, 1, D + XB + VJ + " +k=1.0000260649 +x_0=185928.3727711455 +y_0=0.0009144018288036576" + C + J + A, 1, D + XC + Su + " +k=1.0000233704 +x_0=79857.76154432308 +y_0=0.001219202438404877" + C + J + A, 1, D + XD + VK + " +k=1.0000319985 +x_0=130454.6596901194" + Op + C + J + A, 1, H + XE + XF + VL + " +k_0=1.0000627024 +x_0=198425.1968503937 +y_0=105279.7828803657" + C + J + A, 1, D + XG + VM + " +k=1.0000599003 +x_0=116129.0322580645" + Vm + C + J + A, 1, H + XH + XI + " +lon_0=-89.77 +k_0=1.000053289 +x_0=74676.1493522987 +y_0=55049.26695453391" + C + J + A, 1, D + XJ + VN + " +k=1.0000234982 +x_0=238658.8794513589" + IX + C + J + A, 1, D + XK + VO + " +k=1.0000362499 +x_0=105461.0121412243" + IX + C + J + A, 1, H + XL + XM + VP + " +k_0=1.0000434122 +x_0=204521.2090424181 +y_0=121923.9861823724" + C + J + A, 1, D + XN + VQ + " +k=1.0000236869 +x_0=182880.3675895352" + Op + C + J + A, 1, H + XO + XP + VR + " +k_0=1.0000686968 +x_0=70104.14020828041 +y_0=57588.03474726949" + C + J + A, 1, H + XQ + XR + VS + " +k_0=1.0000362977 +x_0=167640.3352806706 +y_0=86033.08773177546" + C + J + A, 1, D + XS + Kb + " +k=1.0000433849 +x_0=141732.2822453645" + Vm + C + J + A, 1, H + XT + XU + " +lon_0=-89.5 +k_0=1.000039936 +x_0=56388.11277622555 +y_0=50022.1874523749" + C + J + A, 1, D + XV + VT + " +k=1.0000649554 +x_0=227990.8544577089 +y_0=0.01097282194564389" + C + J + A, 1, H + Zu + Zv + VU + " +k_0=1.0000375653 +x_0=202387.6047752095 +y_0=134255.4254508509" + C + J + A, 1, D + XW + VV + " +k=1.0000337311 +x_0=146304.2926085852 +y_0=0.006705613411226822" + C + J + A, 1, D + XX + VW + " +k=1.0000495976 +x_0=250546.1013970028 +y_0=0.02346964693929388" + C + J + A, 1, D + XY + VX + " +k=1.0000373868 +x_0=185623.5715519431 +y_0=0.005181610363220727" + C + J + A, 1, H + XZ + Xa + VY + " +k_0=1.0000573461 +x_0=216713.2337312675 +y_0=120734.1631699263" + C + J + A, 1, D + LJ + VZ + " +k=1.000032144 +x_0=262433.3251714504 +y_0=0.009448818897637795" + C + J + A, 1, D + LJ + Kb + " +k=1.0000381803 +x_0=165506.7300990602 +y_0=0.01036322072644145" + C + J + A, 1, H + Xb + Xc + Va + " +k_0=1.0000597566 +x_0=187147.5742951486 +y_0=107746.7521463043" + C + J + A, 1, D + Xd + Vb + " +k=1.0000361538 +x_0=256946.9138938278" + Vl + C + J + A, 1, H + Xe + Xf + Vc + " +k_0=1.0000408158 +x_0=222504.44500889 +y_0=47532.0603505207" + C + J + A, 1, H + Xg + Xh + Vd + " +k_0=1.0000730142 +x_0=134417.0688341377 +y_0=50337.10927101854" + C + J + A, 1, H + Xi + Xj + Ve + " +k_0=1.0000367192 +x_0=232562.8651257302 +y_0=111088.2224028448" + C + J + A, 1, H + Xk + Xl + Vf + " +k_0=1.0000475376 +x_0=234086.8681737363 +y_0=188358.6059436119" + C + J + A, 1, D + Xm + Vg + " +k=1.00003738 +x_0=120091.4414020828" + IX + C + J + A, 1, D + Xn + Vh + " +k=1.0000346179 +x_0=208788.4178816358" + Op + C + J + A, 1, D + Xo + Vi + " +k=1.0000333645 +x_0=185013.9709423419 +y_0=0.007010414020828041" + C + J + A, 1, H + Xp + Xq + Ka + " +k_0=1.0000392096" + Ys + " +y_0=45069.7588011176" + C + J + A, 1, H + Xr + Xs + Bu + " +k_0=1.0000421209 +x_0=208483.6172720346 +y_0=134589.7539243078" + C + J + A, 41, K + C + A, 6, D + L + " +lon_0=68.51666666666667 +k=1 +x_0=1300000" + RX + C + E + A, 1, D + L + " +lon_0=71.51666666666667 +k=1" + aB + RX + C + E + A, 1, D + L + " +lon_0=74.51666666666667 +k=1" + aC + RX + C + E + A, 1, D + L + " +lon_0=77.51666666666667 +k=1" + aD + RX + C + E + A, 1, D + L + " +lon_0=80.51666666666667 +k=1 +x_0=5300000" + RX + C + E + A, 12308, D + L + Gl + " +k=1" + DP + N + M + G + E + A, 1, D + L + HO + " +k=1" + Eg + N + M + G + E + A, 1, D + L + IG + " +k=1" + Jt + N + M + G + E + A, 1, D + L + LN + " +k=1" + IM + N + M + G + E + A, 1, D + L + JS + " +k=1" + MS + N + M + G + E + A, 1, D + L + PS + " +k=1" + MT + N + M + G + E + A, 1, D + L + RL + " +k=1" + LY + N + M + G + E + A, 1, D + L + QW + " +k=1" + Jp + N + M + G + E + A, 1, D + L + RM + " +k=1" + LZ + N + M + G + E + A, 1, D + L + HP + " +k=1" + HU + N + M + G + E + A, 1, D + L + HQ + " +k=1" + Gw + N + M + G + E + A, 1, D + L + Hd + " +k=1" + Hu + N + M + G + E + A, 1, D + L + HR + " +k=1" + Hv + N + M + G + E + A, 1, D + L + HS + " +k=1" + It + N + M + G + E + A, 1, D + L + EN + " +k=1" + Hs + N + M + G + E + A, 1, D + L + Fy + " +k=1" + Ht + N + M + G + E + A, 1, D + L + Fm + " +k=1" + HV + N + M + G + E + A, 1, D + L + Fr + " +k=1" + Hw + N + M + G + E + A, 1, D + L + Ed + " +k=1" + HW + N + M + G + E + A, 1, D + L + Fn + " +k=1" + Hx + N + M + G + E + A, 1, D + L + Pf + " +k=1" + La + N + M + G + E + A, 1, D + L + Od + " +k=1" + Hy + N + M + G + E + A, 1, D + L + NY + " +k=1" + Hz + N + M + G + E + A, 1, D + L + Pg + " +k=1" + IA + N + M + G + E + A, 1, D + L + NZ + " +k=1" + IB + N + M + G + E + A, 1, D + L + Lf + " +k=1" + Gx + N + M + G + E + A, 1, D + L + KG + " +k=1" + IT + N + M + G + E + A, 1, D + L + KH + " +k=1" + Gc + N + M + G + E + A, 1, D + L + Lh + " +k=1" + IU + N + M + G + E + A, 103, I + Ki + c + HX + E + A, 1, I + Mf + c + HX + E + A, 1, I + KD + c + HX + E + A, 1, I + JZ + c + HX + E + A, 111, I + Mi + o + x + r + E + A, 1, I + NS + o + x + r + E + A, 1, I + Mg + o + x + r + E + A, 1, I + NT + o + x + r + E + A, 1, I + Ot + o + x + r + E + A, 1, I + Nv + o + x + r + E + A, 1, I + PM + o + x + r + E + A, 1, I + Re + o + x + r + E + A, 1, I + SM + o + x + r + E + A, 1, I + MA + o + x + r + E + A, 91, I + Mi + o + x + CB + E + A, 1, I + NS + o + x + CB + E + A, 1, I + Mg + o + x + CB + E + A, 1, I + NT + o + x + CB + E + A, 1, I + Ot + o + x + CB + E + A, 1, I + Nv + o + x + CB + E + A, 1, I + PM + o + x + CB + E + A, 1, I + Re + o + x + CB + E + A, 80, I + Mf + R + Cm + E + A, 1, I + KD + R + Cm + E + A, 1, I + JZ + R + Cm + E + A, 1, I + JM + R + Cm + E + A, 1, I + Me + R + Cm + E + A, 59, I + JM + R + Cm + E + A, 39, I + JZ + M + NL + E + A, 1, I + JM + M + NL + E + A, 251, D + BY + " +lon_0=1 +k=1" + h + Hk + R + EV + Zb + E + A, 1, D + BY + " +lon_0=1 +k=1" + s + N + R + EV + Zb + E + A, 31, I + Io + o + R + Ec + E + A, 1, I + MB + o + R + Ec + E + A, 1, I + Nx + o + R + Ec + E + A, 110, I + NR + o + Bc + BS + In + E + A, 1, I + Ki + o + Bc + BS + In + E + A, 1, I + Mf + o + Bc + BS + In + E + A, 99, I + Ki + o + c + ER + E + A, 1, I + Mf + o + c + ER + E + A, 1, I + KD + o + c + ER + E + A, 58, I + Ki + c + ER + E + A, 1, I + Mf + c + ER + E + A, 1, I + KD + c + ER + E + A, 51, I + Mh + o + Y + Cj + E + A, 1, I + Mi + o + Y + Cj + E + A, 1, I + NS + o + Y + Cj + E + A, 141, D + L + NU + EP + u + N + c + Jw + E + A, 1, D + " +lat_0=13.17638888888889 +lon_0=-59.55972222222222 +k=0.9999986" + Zl + " +y_0=75000" + c + Jw + E + A, 121, D + L + HP + " +k=1" + HU + N + M + U + E + A, 1, D + L + HQ + " +k=1" + Gw + N + M + U + E + A, 1, D + L + Hd + " +k=1" + Hu + N + M + U + E + A, 1, D + L + HR + " +k=1" + Hv + N + M + U + E + A, 1, D + L + HS + " +k=1" + It + N + M + U + E + A, 1, D + L + EN + " +k=1" + Hs + N + M + U + E + A, 1, D + L + Fy + " +k=1" + Ht + N + M + U + E + A, 1, D + L + Fm + " +k=1" + HV + N + M + U + E + A, 1, D + L + Fr + " +k=1" + Hw + N + M + U + E + A, 1, D + L + Ed + " +k=1" + HW + N + M + U + E + A, 1, D + L + Fn + " +k=1" + Hx + N + M + U + E + A, 30, D + L + HP + " +k=1" + O + N + M + U + E + A, 1, D + L + HQ + " +k=1" + O + N + M + U + E + A, 1, D + L + Hd + " +k=1" + O + N + M + U + E + A, 1, D + L + HR + " +k=1" + O + N + M + U + E + A, 1, D + L + HS + " +k=1" + O + N + M + U + E + A, 1, D + L + EN + " +k=1" + O + N + M + U + E + A, 1, D + L + Fy + " +k=1" + O + N + M + U + E + A, 1, D + L + Fm + " +k=1" + O + N + M + U + E + A, 1, D + L + Fr + " +k=1" + O + N + M + U + E + A, 1, D + L + Ed + " +k=1" + O + N + M + U + E + A, 1, D + L + Fn + " +k=1" + O + N + M + U + E + A, 37, H + Ks + Kt + Hr + HN + Bn + " +y_0=5400000" + R + " +pm=brussels" + E + A, 280, Pu + Kj + HN + " +k_0=1" + s + N + Y + Gf + " +pm=bern" + E + A, 1, Pu + Kj + Ow + " +k_0=1" + a + IK + Y + Gf + E + A, 1, Pu + Kj + Ow + " +k_0=1" + s + N + Y + Gf + E + A, 36, I + IC + R + ES + E + A, 78, D + LK + " +lon_0=-77.08091666666667 +k=1" + BZ + AH + R + ES + E + A, 1, D + LK + " +lon_0=-74.08091666666667 +k=1" + BZ + AH + R + ES + E + A, 1, D + LK + " +lon_0=-71.08091666666667 +k=1" + BZ + AH + R + ES + E + A, 1, D + LK + " +lon_0=-68.08091666666667 +k=1" + BZ + AH + R + ES + E + A, 133, I + JN + o + c + GO + E + A, 1, I + KC + o + c + GO + E + A, 58, D + L + " +lon_0=11.5" + AP + O + Ak + c + GO + E + A, 1, D + L + IH + AP + O + Ak + c + GO + E + A, 79, D + m + UQ + " +k=1" + AV + N + C + B + E + A, 1, D + m + MP + " +k=1" + Ci + N + C + B + E + A, 1, D + m + Pe + " +k=1" + Bo + N + C + B + E + A, 1, D + m + Qk + " +k=1" + DP + N + C + B + E + A, 1, D + m + US + " +k=1" + Eg + N + C + B + E + A, 1, D + m + Zc + " +k=1" + Jt + N + C + B + E + A, 1, D + m + Nb + " +k=1" + IM + N + C + B + E + A, 4, D + m + UQ + " +k=1" + AV + N + j + B + E + A, 1, D + m + MP + " +k=1" + Ci + N + j + B + E + A, 1, D + m + Pe + " +k=1" + Bo + N + j + B + E + A, 1, D + m + Qk + " +k=1" + DP + N + j + B + E + A, 1, D + m + US + " +k=1" + Eg + N + j + B + E + A, 1, D + m + Zc + " +k=1" + Jt + N + j + B + E + A, 1, D + m + Nb + " +k=1" + IM + N + j + B + E + A, 4, D + m + UQ + " +k=1" + AV + N + R + Bs + E + A, 1, D + m + MP + " +k=1" + Ci + N + R + Bs + E + A, 1, D + m + Pe + " +k=1" + Bo + N + R + Bs + E + A, 1, D + m + Qk + " +k=1" + DP + N + R + Bs + E + A, 1, D + m + US + " +k=1" + Eg + N + R + Bs + E + A, 1, D + m + Zc + " +k=1" + Jt + N + R + Bs + E + A, 1, D + m + Nb + " +k=1" + IM + N + R + Bs + E + A, 37, I + NR + o + Bc + BS + Ax + E + A, 1, I + Ki + o + Bc + BS + Ax + E + A, 40, D + L + Gj + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A, 2, D + L + UE + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A, 2, D + L + RI + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A, 2, D + L + Gl + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A, 2, D + L + SP + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A, 2, D + L + RJ + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A, 2, D + L + HO + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A, 2, D + L + " +lon_0=29 +k=1" + s + N + Gk + Bc + BS + Ax + E + A, 2, D + L + QQ + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A, 2, D + L + IG + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A, 39, I + JN + AU + BN + Gi + E + A, 59, H + " +lat_1=36" + GM + " +lon_0=9.9" + QL + O + Hk + AU + BN + Gi + E + A, 1, H + Sd + Se + " +lon_0=9.9" + Nk + O + Hk + AU + BN + Gi + E + A, 129, I + ID + o + R + GR + E + A, 1, I + Io + o + R + GR + E + A, 1, I + MB + o + R + GR + E + A, 1, I + Nx + o + R + GR + E + A, 1, I + Nr + o + R + GR + E + A, 175, H + aL + " +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256" + AI + Hk + AU + BN + HI + E + A, 70, H + aL + " +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256" + AI + Hk + AU + BN + HI + E + A, 10, GU + " +lat_0=34.2 +lon_0=39.15 +k=0.9995341" + s + N + AU + BN + HI + E + A, 211, D + Gm + " +lon_0=35 +k=1" + AI + " +y_0=1100000" + Gn + HY + E + A, 1, D + Gm + QQ + " +k=1 +x_0=615000 +y_0=810000" + Gn + HY + E + A, 1, D + Gm + HO + " +k=1" + EW + IK + Gn + HY + E + A, 1, D + Gm + HO + " +k=1" + EW + Tj + Gn + HY + E + A, 34, I + Ja + R + n + E + A, 1, I + KA + R + n + E + A, 1, I + Oq + R + n + E + A, 1, I + QD + R + n + E + A, 1, I + JN + R + n + E + A, 1, I + KC + R + n + E + A, 1, I + NR + R + n + E + A, 1, I + Ki + R + n + E + A, 1, I + Mf + R + n + E + A, 1, I + KD + R + n + E + A, 1, I + JZ + R + n + E + A, 52, D + L + HN + AP + O + N + R + n + E + A, 5, D + L + " +lon_0=5" + AP + O + N + R + n + E + A, 144, I + JM + c + NM + E + A, 1, I + Me + c + NM + E + A, 460, Pu + " +lat_0=47.14439372222222 +lon_0=19.04857177777778 +k_0=0.99993 +x_0=650000" + IK + aK + RE + E + A, 130, D + L + " +lon_0=94.5" + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=97.5" + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=100.5" + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=103.5" + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=106.5" + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=109.5" + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=112.5" + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=115.5" + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=118.5" + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=121.5" + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=124.5" + V + h + DQ + j + B + E + A, 1, D + L + Pj + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=130.5" + V + h + DQ + j + B + E + A, 1, D + L + Tk + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=136.5" + V + h + DQ + j + B + E + A, 1, D + L + " +lon_0=139.5" + V + h + DQ + j + B + E + A, 1, I + QF + IR + Bh + Av + E + A, 1, I + Ny + IR + Bh + Av + E + A, 1, I + Mh + IR + Bh + Av + E + A, 1, I + Mi + IR + Bh + Av + E + A, 1, I + NS + IR + Bh + Av + E + A, 1, I + Mg + IR + Bh + Av + E + A, 1, I + NT + IR + Bh + Av + E + A, 14, I + QF + j + B + E + A, 1, I + Ny + j + B + E + A, 1, I + Mh + j + B + E + A, 1, I + Mi + j + B + E + A, 1, I + NS + j + B + E + A, 1, I + Mg + j + B + E + A, 1, I + NT + j + B + E + A, 5, I + Ny + o + j + B + E + A, 1, I + Mh + o + j + B + E + A, 1, I + Mi + o + j + B + E + A, 1, I + NS + o + j + B + E + A, 1, I + Mg + o + j + B + E + A, 1, I + NT + o + j + B + E + A, 1, I + Ot + o + j + B + E + A, 1, I + Nv + o + j + B + E + A, 3, I + Ny + o + IR + Bh + Av + E + A, 1, I + Mh + o + IR + Bh + Av + E + A, 1, I + Mi + o + IR + Bh + Av + E + A, 1, I + NS + o + IR + Bh + Av + E + A, 1, I + Mg + o + IR + Bh + Av + E + A, 1, I + NT + o + IR + Bh + Av + E + A, 1, I + Ot + o + IR + Bh + Av + E + A, 1, I + Nv + o + IR + Bh + Av + E + A, 52, I + QF + By + Ay + JR + E + A, 1, I + Ny + By + Ay + JR + E + A, 1, I + Mh + By + Ay + JR + E + A, 99, I + Ny + By + Ay + NN + E + A, 1, I + Mh + By + Ay + NN + E + A, 52, H + " +lat_1=18" + OX + Ld + " +k_0=1 +x_0=167638.49597 +y_0=121918.90616" + RB + RC + ML + A, 100, H + " +lat_1=18" + OX + Ld + " +k_0=1" + Bv + " +y_0=150000" + i + TG + E + A, 105, I + Te + By + Ay + JQ + E + A, 1, I + QF + By + Ay + JQ + E + A, 5, I + Rb + Lp + Hp + GQ + E + A, 1, I + Rc + Lp + Hp + GQ + E + A, 1, I + SO + Lp + Hp + GQ + E + A, 29, I + Rc + Go + CT + BT + E + A, 1, I + SO + Go + CT + BT + E + A, 1, I + Td + Go + CT + BT + E + A, 1, I + Te + Go + CT + BT + E + A, 1, I + QF + Go + CT + BT + E + A, 1, I + Ny + Go + CT + BT + E + A, 23, H + Sc + " +lat_0=39.5 +lon_0=68 +k_0=0.99846154 +x_0=2153865.73916853 +y_0=2368292.194628102" + HK + Gv + GT + A, 1, H + Qq + Li + " +lon_0=68" + Fz + JX + JY + HK + Gv + GT + A, 1, H + UM + IQ + " +lon_0=74" + Fz + JX + JY + HK + Gv + GT + A, 1, H + " +lat_1=19 +lat_0=19 +lon_0=80" + Fz + JX + JY + HK + Gv + GT + A, 1, H + " +lat_1=12 +lat_0=12 +lon_0=80" + Fz + JX + JY + HK + Gv + GT + A, 1, H + UM + IQ + Hq + Fz + " +x_0=2743185.69 +y_0=914395.23" + By + Ay + JQ + E + A, 1, H + Qq + Li + " +lon_0=68" + Fz + " +x_0=2743196.4 +y_0=914398.8" + Lp + Hp + GQ + E + A, 1, H + UM + IQ + " +lon_0=74" + Fz + " +x_0=2743196.4 +y_0=914398.8" + Lp + Hp + GQ + E + A, 1, H + Qq + Li + " +lon_0=68" + Fz + PX + Qa + Go + CT + BT + E + A, 1, H + UM + IQ + " +lon_0=74" + Fz + PX + Qa + Go + CT + BT + E + A, 1, H + UM + IQ + Hq + Fz + PX + Qa + Go + CT + BT + E + A, 1, H + " +lat_1=19 +lat_0=19 +lon_0=80" + Fz + PX + Qa + Go + CT + BT + E + A, 1, H + UM + IQ + Hq + Fz + JX + JY + HK + Gv + GT + A, 1, H + " +lat_1=12 +lat_0=12 +lon_0=80" + Fz + PX + Qa + Go + CT + BT + E + A, 117, Ck + " +lat_0=1.287646666666667 +lon_0=103.8530022222222" + Zl + " +y_0=30000" + GL + Bz + BV + E + A, 47, I + Ny + GL + Bz + BV + E + A, 1, I + Mh + GL + Bz + BV + E + A, 52, H + Qq + Li + JS + PZ + AV + aG + c + Qh + E + A, 118, I + IC + R + Hc + E + A, 1, I + Hi + R + Hc + E + A, 1, I + Gz + R + Hc + E + A, 97, I + Ik + R + AX + E + A, 1, I + IC + R + AX + E + A, 1, I + Hi + R + AX + E + A, 1, I + Gz + R + AX + E + A, 1, I + ID + R + AX + E + A, 56, I + Ik + o + R + AX + E + A, 1, I + IC + o + R + AX + E + A, 1, I + Hi + o + R + AX + E + A, 1, I + Gz + o + R + AX + E + A, 1, I + ID + o + R + AX + E + A, 1, I + Io + o + R + AX + E + A, 9, D + " +lat_0=-6 +lon_0=-80.5 +k=0.99983008 +x_0=222000 +y_0=1426834.743" + R + AX + E + A, 1, D + " +lat_0=-9.5 +lon_0=-76 +k=0.99932994 +x_0=720000 +y_0=1039979.159" + R + AX + E + A, 1, D + " +lat_0=-9.5" + IL + " +k=0.99952992 +x_0=1324000 +y_0=1040084.558" + R + AX + E + A, 107, D + Vp + " +lon_0=-1" + Rv + " +x_0=274319.51" + N + c + TR + E + A, 231, I + QD + AU + BN + E + A, 160, D + L + Fm + CP + O + N + i + GC + E + A, 1, D + L + ZU + CP + O + N + i + GC + E + A, 1, D + L + ZV + CP + O + N + i + GC + E + A, 1, D + L + Fr + CP + O + N + i + GC + E + A, 1, D + L + Ru + CP + O + N + i + GC + E + A, 433, I + Ja + C + B + E + A, 1, I + KA + C + B + E + A, 1, I + Oq + C + B + E + A, 1, I + QD + C + B + E + A, 1, I + JN + C + B + E + A, 1, I + KC + C + B + E + A, 1, I + NR + C + B + E + A, 1, I + Ki + C + B + E + A, 1, I + Mf + C + B + E + A, 1, I + KD + C + B + E + A, 47, D + L + II + AP + O + N + C + B + E + A, 48, I + JN + o + R + Qd + E + A, 259, H + Sd + Se + Yk + Nk + O + Hk + AU + BN + IO + E + A, 1, H + " +lat_1=29.7 +lat_0=29.7" + Yk + " +k_0=0.9996155960000001" + O + Hk + AU + BN + IO + E + A, 2, H + " +lat_1=26.1 +lat_0=26.1" + Yk + " +k_0=0.999616304 +x_0=1200000" + Is + AU + BN + IO + E + A, 1, H + " +lat_1=22.5 +lat_0=22.5" + Yk + " +k_0=0.999616437" + AV + Is + AU + BN + IO + E + A, 42, I + KD + Y + Tc + E + A, 94, I + QD + c + GS + E + A, 1, I + JN + c + GS + E + A, 59, D + Qi + " +lon_0=4.5" + Rv + " +x_0=230738.26" + N + c + GS + E + A, 1, D + Qi + " +lon_0=8.5" + Rv + " +x_0=670553.98" + N + c + GS + E + A, 1, D + Qi + " +lon_0=12.5" + Rv + " +x_0=1110369.7" + N + c + GS + E + A, 239, I + JN + AU + BN + NO + E + A, 60, I + JN + o + AU + BN + NO + E + A, 9, I + SK + X + E + A, 1, I + TV + X + E + A, 1, I + Xz + X + E + A, 1, I + TY + X + E + A, 1, I + RG + X + E + A, 1, I + Ro + X + E + A, 1, I + RH + X + E + A, 1, I + TW + X + E + A, 1, I + TX + X + E + A, 1, I + QE + X + E + A, 1, I + Ns + X + E + A, 1, I + Nt + X + E + A, 1, I + Nu + X + E + A, 1, I + Nw + X + E + A, 1, I + NP + X + E + A, 1, I + NQ + X + E + A, 1, I + Ik + X + E + A, 1, I + IC + X + E + A, 1, I + Hi + X + E + A, 1, I + Gz + X + E + A, 1, I + ID + X + E + A, 1, I + Io + X + E + A, 7, D + IY + IV + Pc + e + N + X + J + A, 1, D + Gm + OS + BG + e + N + X + J + A, 1, CU + " +lat_0=57" + Ku + Kv + V + " +x_0=5000000.001016002 +y_0=-5000000.001016002" + KE + GZ + X + J + A, 1, D + Ft + YN + V + e + N + X + J + A, 1, D + Ft + YO + V + e + N + X + J + A, 1, D + Ft + ON + V + e + N + X + J + A, 1, D + Ft + Ms + V + e + N + X + J + A, 1, D + Ft + KI + V + e + N + X + J + A, 1, D + Ft + YP + V + " +x_0=213360.4267208534" + N + X + J + A, 1, D + Ft + YQ + V + e + N + X + J + A, 1, D + Ft + SW + V + Px + N + X + J + A, 1, H + Kw + Kx + UK + YR + Bw + N + X + J + A, 1, H + DW + Jn + y + HA + Z + N + X + J + A, 1, H + DX + DY + AA + HA + Z + N + X + J + A, 1, H + Ap + DZ + Ml + AJ + Z + N + X + J + A, 1, H + LO + QS + Da + Mm + Z + N + X + J + A, 1, H + Db + Dc + Mn + Ir + Z + N + X + J + A, 1, H + Dd + De + Df + Iw + Z + N + X + J + A, 2, D + Bl + Cn + V + e + N + X + J + A, 1, D + Bl + Co + V + e + N + X + J + A, 1, D + Bl + Iv + BG + e + N + X + J + A, 1, H + Dx + Dy + BC + IF + Z + N + X + J + A, 1, H + Dz + Mq + EA + IF + Z + N + X + J + A, 1, H + " +lat_1=39.71666666666667 +lat_2=40.78333333333333" + y + Ba + Z + N + X + J + A, 1, H + LP + LQ + CY + Ba + Z + N + X + J + A, 1, H + Ap + Dg + f + Ba + Z + N + X + J + A, 1, H + Dh + Mo + Di + Jq + Px + N + X + J + A, 1, D + Ch + Cp + Mp + e + N + X + J + A, 1, D + Aq + CR + Am + e + N + X + J + A, 1, D + Aq + Ob + Am + e + N + X + J + A, 1, H + LR + Dj + QT + LS + Z + N + X + J + A, 6, D + Gm + Cq + V + e + N + X + J + A, 1, D + Gm + Cr + V + e + N + X + J + A, 1, D + p + Cs + BJ + e + N + X + J + A, 1, D + p + Jb + BJ + e + N + X + J + A, 1, D + p + Ix + BG + e + N + X + J + A, 1, D + f + Cz + EQ + e + N + X + J + A, 1, D + f + DA + Am + e + N + X + J + A, 1, D + DM + DB + AO + e + N + X + J + A, 1, D + DM + DC + AO + e + N + X + J + A, 1, H + EB + EC + Fo + GG + Z + N + X + J + A, 1, H + AY + ED + Fs + GG + Z + N + X + J + A, 1, H + EE + EF + AQ + Fl + Z + N + X + J + A, 1, H + EG + EH + f + CV + Z + N + X + J + A, 1, H + Az + DV + DM + Jo + Z + N + X + J + A, 1, H + " +lat_1=36.73333333333333 +lat_2=37.93333333333333" + AB + EY + Z + N + X + J + A, 1, H + " +lat_1=31.16666666666667 +lat_2=32.66666666666666 +lat_0=30.66666666666667" + Hg + Z + N + X + J + A, 1, H + " +lat_1=29.3 +lat_2=30.7 +lat_0=28.66666666666667" + Bi + Z + N + X + J + A, 1, D + AL + HJ + V + e + N + X + J + A, 1, D + BD + DD + AO + e + N + X + J + A, 1, H + " +lat_1=38.3 +lat_2=39.45" + CY + Ld + " +x_0=243840.4876809754" + N + X + J + A, 1, H + " +lat_1=41.71666666666667 +lat_2=42.68333333333333" + Ip + GE + Px + N + X + J + A, 1, H + " +lat_1=41.28333333333333 +lat_2=41.48333333333333" + Ip + IL + " +x_0=60960.12192024384" + N + X + J + A, 4, H + " +lat_1=47.03333333333333 +lat_2=48.63333333333333" + Iq + DE + Z + N + X + J + A, 1, H + " +lat_1=45.61666666666667 +lat_2=47.05" + IP + Js + Z + N + X + J + A, 1, H + " +lat_1=43.78333333333333 +lat_2=45.21666666666667" + Nj + Na + Z + N + X + J + A, 1, D + Cb + Ct + Pc + e + N + X + J + A, 1, D + IY + Bx + Am + e + N + X + J + A, 1, D + Cd + RS + BG + e + N + X + J + A, 1, D + Cd + Hg + BG + e + N + X + J + A, 1, D + Id + RT + Am + e + N + X + J + A, 1, H + " +lat_1=34.41666666666666 +lat_2=33.86666666666667 +lat_0=34.13333333333333" + IW + " +x_0=1276106.450596901 +y_0=1268253.006858014" + X + J + A, 48, D + AK + HJ + V + BF + N + C + B + J + A, 1, D + BD + DD + AO + HT + N + C + B + J + A, 1, H + FU + FV + Iq + DE + An + Ao + C + B + J + A, 1, H + Ma + FW + IP + Js + An + Ao + C + B + J + A, 1, H + FX + FY + Nj + Na + An + Ao + C + B + J + A, 1, H + JT + Jn + FZ + CS + AG + N + C + B + J + A, 1, H + Mb + RN + Mr + Ga + a + N + C + B + J + A, 1, H + Fg + Fh + QX + CR + a + N + C + B + J + A, 1, D + AK + HJ + V + BF + N + C + B + J + A, 1, D + BD + DD + AO + HT + N + C + B + J + A, 1, H + FU + FV + Iq + DE + An + Ao + C + B + J + A, 1, H + Ma + FW + IP + Js + An + Ao + C + B + J + A, 1, H + FX + FY + Nj + Na + An + Ao + C + B + J + A, 1, H + JT + Jn + FZ + CS + AG + N + C + B + J + A, 1, H + Mb + RN + Mr + Ga + a + N + C + B + J + A, 1, H + Fg + Fh + QX + CR + a + N + C + B + J + A, 1, D + AK + HJ + V + BF + N + C + B + J + A, 1, D + BD + DD + AO + HT + N + C + B + J + A, 1, H + FU + FV + Iq + DE + An + Ao + C + B + J + A, 1, H + Ma + FW + IP + Js + An + Ao + C + B + J + A, 1, H + FX + FY + Nj + Na + An + Ao + C + B + J + A, 1, H + JT + Jn + FZ + CS + AG + N + C + B + J + A, 1, H + Mb + RN + Mr + Ga + a + N + C + B + J + A, 1, H + Fg + Fh + QX + CR + a + N + C + B + J + A, 21, D + L + ET + V + Ab + N + C + B + E + A, 1, D + L + CR + V + Ab + N + C + B + E + A, 1, D + L + NV + V + Ab + N + C + B + E + A, 1, D + L + Jh + V + Ab + N + C + B + E + A, 1, D + L + Bu + V + Ab + N + C + B + E + A, 1, D + L + Rs + V + Ab + N + C + B + E + A, 1, D + L + OZ + V + Ab + N + C + B + E + A, 1, D + L + " +lon_0=-53" + V + Ab + N + C + B + E + A, 1, D + L + Zd + V + Ab + N + C + B + E + A, 2, I + SK + C + B + E + A, 1, I + TV + C + B + E + A, 1, I + Xz + C + B + E + A, 1, I + TY + C + B + E + A, 1, I + RG + C + B + E + A, 1, I + Ro + C + B + E + A, 1, I + RH + C + B + E + A, 1, I + TW + C + B + E + A, 1, I + TX + C + B + E + A, 1, I + QE + C + B + E + A, 1, I + Ns + C + B + E + A, 1, I + Nt + C + B + E + A, 1, I + Nu + C + B + E + A, 1, I + Nw + C + B + E + A, 1, I + NP + C + B + E + A, 1, I + NQ + C + B + E + A, 1, I + Ik + C + B + E + A, 1, I + IC + C + B + E + A, 1, I + Hi + C + B + E + A, 1, I + Gz + C + B + E + A, 1, I + ID + C + B + E + A, 1, I + Io + C + B + E + A, 1, I + MB + C + B + E + A, 6, D + IY + IV + Pc + h + N + C + B + E + A, 1, D + Gm + OS + BG + a + N + C + B + E + A, 1, CU + " +lat_0=57" + Ku + Kv + V + LX + EO + KE + GZ + C + B + E + A, 1, D + Ft + YN + V + O + N + C + B + E + A, 1, D + Ft + YO + V + O + N + C + B + E + A, 1, D + Ft + ON + V + O + N + C + B + E + A, 1, D + Ft + Ms + V + O + N + C + B + E + A, 1, D + Ft + KI + V + O + N + C + B + E + A, 1, D + Ft + YP + V + O + N + C + B + E + A, 1, D + Ft + YQ + V + O + N + C + B + E + A, 1, D + Ft + SW + V + O + N + C + B + E + A, 1, H + Kw + Kx + UK + YR + BZ + N + C + B + E + A, 1, H + DW + Jn + y + HA + Bd + Ae + C + B + E + A, 1, H + DX + DY + AA + HA + Bd + Ae + C + B + E + A, 1, H + Ap + DZ + Ml + AJ + Bd + Ae + C + B + E + A, 1, H + LO + QS + Da + Mm + Bd + Ae + C + B + E + A, 1, H + Db + Dc + Mn + Ir + Bd + Ae + C + B + E + A, 1, H + Dd + De + Df + Iw + Bd + Ae + C + B + E + A, 2, D + Bl + Cn + V + EX + N + C + B + E + A, 1, D + Bl + Co + V + EX + N + C + B + E + A, 1, D + Bl + Iv + BG + EX + N + C + B + E + A, 1, H + Dx + Dy + BC + IF + u + N + C + B + E + A, 1, H + Dz + Mq + EA + IF + u + Is + C + B + E + A, 1, H + Eh + Ei + y + Ba + Fw + Fx + C + B + E + A, 1, H + LP + LQ + CY + Ba + Fw + Fx + C + B + E + A, 1, H + Ap + Dg + f + Ba + Fw + Fx + C + B + E + A, 1, H + Dh + Mo + Di + Jq + QG + QH + C + B + E + A, 1, D + Ch + Cp + Mp + h + N + C + B + E + A, 1, D + Aq + CR + Am + h + N + C + B + E + A, 1, D + Aq + Ob + Am + h + N + C + B + E + A, 1, H + LR + Dj + QT + LS + a + N + C + B + E + A, 1, D + Kn + Sf + AO + O + N + C + B + E + A, 1, D + Ko + KO + AO + O + N + C + B + E + A, 1, D + GV + KI + Jl + O + N + C + B + E + A, 1, D + Kp + Sg + Jl + O + N + C + B + E + A, 1, D + Kq + KP + " +k=1" + O + N + C + B + E + A, 1, D + Gm + Cq + V + h + N + C + B + E + A, 1, D + Gm + Cr + V + EW + N + C + B + E + A, 1, D + p + Cs + BJ + h + N + C + B + E + A, 1, D + p + Jb + BJ + O + N + C + B + E + A, 1, D + p + Ix + BG + CX + N + C + B + E + A, 1, D + f + Cz + EQ + AI + N + C + B + E + A, 1, D + f + DA + Am + EW + N + C + B + E + A, 1, D + DM + DB + AO + BU + KJ + C + B + E + A, 1, D + DM + DC + AO + HT + KJ + C + B + E + A, 1, H + EB + EC + Fo + GG + AV + AH + C + B + E + A, 1, H + AY + ED + Fs + GG + O + N + C + B + E + A, 1, H + EE + EF + AQ + Fl + u + N + C + B + E + A, 1, H + EG + EH + f + CV + u + Is + C + B + E + A, 2, H + Ej + Ek + AB + EY + O + Ae + C + B + E + A, 1, H + FS + FT + IY + Hg + BZ + N + C + B + E + A, 1, H + OH + OI + OJ + Bi + BZ + N + C + B + E + A, 1, D + AK + HJ + V + AI + N + C + B + E + A, 1, D + BD + DD + AO + HT + N + C + B + E + A, 1, H + MU + Nz + AA + Ld + u + N + C + B + E + A, 1, H + El + Dk + Ip + GE + h + Mk + C + B + E + A, 1, H + Em + En + Ip + IL + O + N + C + B + E + A, 1, H + Eo + Ep + Eq + Jh + Tl + N + C + B + E + A, 1, H + OA + Er + Es + BE + Pk + N + C + B + E + A, 1, H + Bq + OB + Fo + BE + LU + N + C + B + E + A, 1, H + FU + FV + Iq + DE + CX + EK + C + B + E + A, 1, H + Ma + FW + IP + Js + CX + EK + C + B + E + A, 1, H + FX + FY + Nj + Na + CX + EK + C + B + E + A, 1, D + Hj + Ct + CP + AI + N + C + B + E + A, 1, D + Hj + Bx + CP + EW + N + C + B + E + A, 1, D + Cd + RS + BG + Bv + N + C + B + E + A, 1, D + Cd + Hg + BG + O + N + C + B + E + A, 1, D + Id + RT + Am + YC + N + C + B + E + A, 41, I + JM + c + DO + E + A, 1, I + Me + c + DO + E + A, 80, I + Gz + R + TS + E + A, 80, "+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150" + R + W + E + A, 5, D + " +lat_0=-36.87986527777778 +lon_0=174.7643393611111" + V + AI + DN + R + W + E + A, 1, D + " +lat_0=-37.76124980555556 +lon_0=176.46619725 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-38.62470277777778 +lon_0=177.8856362777778 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-39.65092930555556 +lon_0=176.6736805277778 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-39.13575830555556 +lon_0=174.22801175 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-39.51247038888889 +lon_0=175.6400368055556 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-40.24194713888889 +lon_0=175.4880996111111 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-40.92553263888889 +lon_0=175.6473496666667 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-41.30131963888888 +lon_0=174.7766231111111 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-40.71475905555556 +lon_0=172.6720465 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-41.27454472222222 +lon_0=173.2993168055555 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-41.28991152777778 +lon_0=172.1090281944444 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-41.81080286111111 +lon_0=171.5812600555556 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-42.33369427777778 +lon_0=171.5497713055556 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-42.68911658333333 +lon_0=173.0101333888889 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-41.54448666666666 +lon_0=173.8020741111111 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-42.88632236111111 +lon_0=170.9799935 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-43.11012813888889 +lon_0=170.2609258333333 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-43.97780288888889 +lon_0=168.606267 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-43.59063758333333 +lon_0=172.7271935833333 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-43.74871155555556 +lon_0=171.3607484722222 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-44.40222036111111 +lon_0=171.0572508333333 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-44.73526797222222 +lon_0=169.4677550833333 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-45.13290258333333 +lon_0=168.3986411944444 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-45.56372616666666 +lon_0=167.7388617777778 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-45.81619661111111 +lon_0=170.6285951666667 +k=1" + AI + DN + R + W + E + A, 1, D + " +lat_0=-45.86151336111111 +lon_0=170.2825891111111" + Pc + AI + DN + R + W + E + A, 1, D + " +lat_0=-46.60000961111111 +lon_0=168.342872 +k=1 +x_0=300002.66 +y_0=699999.58" + R + W + E + A, 26, I + MA + o + R + W + E + A, 1, I + Nq + o + R + W + E + A, 1, I + PL + o + R + W + E + A, 31, D + " +lat_0=-39 +lon_0=175.5 +k=1 +x_0=274319.5243848086 +y_0=365759.3658464114" + R + W + TU + A, 1, D + Za + " +lon_0=171.5 +k=1 +x_0=457199.2073080143 +y_0=457199.2073080143" + R + W + TU + A, 99, D + Fk + " +lon_0=-4.666666666666667 +k=1" + s + N + Hn + EL + Aa + SN + E + A, 1, D + Fk + " +lon_0=-2.333333333333333 +k=1" + s + N + Hn + EL + Aa + SN + E + A, 1, D + Fk + HN + " +k=1" + s + N + Hn + EL + Aa + SN + E + A, 1, D + Fk + " +lon_0=2.5 +k=1" + s + N + Hn + EL + Aa + SN + E + A, 1, D + Fk + Vr + " +k=1" + s + N + Hn + EL + Aa + SN + E + A, 1, D + Fk + " +lon_0=10.16666666666667 +k=1" + s + N + Hn + EL + Aa + SN + E + A, 1, D + Fk + " +lon_0=14.16666666666667 +k=1" + s + N + Hn + EL + Aa + SN + E + A, 1, D + Fk + " +lon_0=18.33333333333333 +k=1" + s + N + Hn + EL + Aa + SN + E + A, 31, I + KA + R + JL + E + A, 64, D + BY + UZ + " +k=1 +x_0=180.598 +y_0=-86.98999999999999" + R + JL + E + A, 7, H + PD + PE + " +lon_0=5.399999999999999 +k_0=0.99950908" + O + Hk + " +a=6376523" + RA + ZM + E + A, 61, H + PD + PE + HN + " +k_0=0.999877341" + a + IK + AU + BN + Bk + Lv + E + A, 1, H + " +lat_1=46.8 +lat_0=46.8" + HN + " +k_0=0.99987742" + a + IK + AU + BN + Bk + Lv + E + A, 1, H + Xt + Xu + HN + " +k_0=0.999877499" + a + IK + AU + BN + Bk + Lv + E + A, 1, H + Xv + Xw + HN + " +k_0=0.99994471 +x_0=234.358 +y_0=185861.369" + AU + BN + Bk + Lv + E + A, 7, H + PD + PE + HN + " +k_0=0.999877341" + a + Tj + AU + BN + Bk + Lv + E + A, 1, H + " +lat_1=46.8 +lat_0=46.8" + HN + " +k_0=0.99987742" + a + " +y_0=2200000" + AU + BN + Bk + Lv + E + A, 1, H + Xt + Xu + HN + " +k_0=0.999877499" + a + " +y_0=3200000" + AU + BN + Bk + Lv + E + A, 1, H + Xv + Xw + HN + " +k_0=0.99994471 +x_0=234.358 +y_0=4185861.369" + AU + BN + Bk + Lv + E + A, 126, D + " +lat_0=49 +lon_0=-2 +k=0.9996012717" + u + " +y_0=-100000" + PV + Lx + E + A, 491, Ck + LH + LI + Qx + " +y_0=126867.909" + Nc + Nd + DS + E + A, 1, D + LH + LI + " +k=1" + Qx + " +y_0=1126867.909" + Nc + Nd + DS + E + A, 1, Ck + LH + LI + Qx + " +y_0=1126867.909" + Nc + Nd + DS + E + A, 39, I + JN + o + AU + BN + TH + E + A, 116, I + Mh + o + C + B + E + A, 1, I + Mi + o + C + B + E + A, 1, I + NS + o + C + B + E + A, 1, I + Mg + o + C + B + E + A, 1, I + NT + o + C + B + E + A, 1, I + Ot + o + C + B + E + A, 1, I + Nv + o + C + B + E + A, 1, I + PM + o + C + B + E + A, 1, I + Re + o + C + B + E + A, 1, I + SM + o + C + B + E + A, 1, I + MA + o + C + B + E + A, 46, D + L + Gl + " +k=1" + DP + N + M + F + E + A, 1, D + L + HO + " +k=1" + Eg + N + M + F + E + A, 1, D + L + IG + " +k=1" + Jt + N + M + F + E + A, 1, D + L + LN + " +k=1" + IM + N + M + F + E + A, 1, D + L + JS + " +k=1" + MS + N + M + F + E + A, 1, D + L + PS + " +k=1" + MT + N + M + F + E + A, 1, D + L + RL + " +k=1" + LY + N + M + F + E + A, 1, D + L + QW + " +k=1" + Jp + N + M + F + E + A, 1, D + L + RM + " +k=1" + LZ + N + M + F + E + A, 1, D + L + HP + " +k=1" + HU + N + M + F + E + A, 1, D + L + HQ + " +k=1" + Gw + N + M + F + E + A, 1, D + L + Hd + " +k=1" + Hu + N + M + F + E + A, 1, D + L + HR + " +k=1" + Hv + N + M + F + E + A, 1, D + L + HS + " +k=1" + It + N + M + F + E + A, 1, D + L + EN + " +k=1" + Hs + N + M + F + E + A, 1, D + L + Fy + " +k=1" + Ht + N + M + F + E + A, 1, D + L + Fm + " +k=1" + HV + N + M + F + E + A, 1, D + L + Fr + " +k=1" + Hw + N + M + F + E + A, 1, D + L + Ed + " +k=1" + HW + N + M + F + E + A, 1, D + L + Fn + " +k=1" + Hx + N + M + F + E + A, 1, D + L + Pf + " +k=1" + La + N + M + F + E + A, 1, D + L + Od + " +k=1" + Hy + N + M + F + E + A, 1, D + L + NY + " +k=1" + Hz + N + M + F + E + A, 1, D + L + Pg + " +k=1" + IA + N + M + F + E + A, 1, D + L + NZ + " +k=1" + IB + N + M + F + E + A, 1, D + L + Lf + " +k=1" + Gx + N + M + F + E + A, 1, D + L + KG + " +k=1" + IT + N + M + F + E + A, 1, D + L + KH + " +k=1" + Gc + N + M + F + E + A, 1, D + L + Lh + " +k=1" + IU + N + M + F + E + A, 168, D + " +lat_0=24.45" + Vv + Jl + h + Hk + R + QO + E + A, 391, GU + Xx + Yo + " +k=0.9999079" + s + N + Y + Fv + E + A, 1, GU + Xx + Yo + " +k=0.9999079 +x_0=155000 +y_0=463000" + Y + Fv + E + A, 109, UU + L + Nb + LX + Ak + x + Al + E + A, 67, I + IC + x + Al + E + A, 1, I + Hi + x + Al + E + A, 1, I + Gz + x + Al + E + A, 1, I + ID + x + Al + E + A, 1, I + Io + x + Al + E + A, 15, I + Ik + o + x + Al + E + A, 1, I + IC + o + x + Al + E + A, 1, I + Hi + o + x + Al + E + A, 1, I + Gz + o + x + Al + E + A, 1, I + ID + o + x + Al + E + A, 1, I + Io + o + x + Al + E + A, 1, I + MB + o + x + Al + E + A, 1, I + Nx + o + x + Al + E + A, 1, I + Nr + o + x + Al + E + A, 25, I + Gz + o + R + Nn + E + A, 1, I + ID + o + R + Nn + E + A, 112, I + KC + o + HB + Bt + E + A, 38, D + Pi + " +lon_0=11 +k=1" + s + N + Gk + HB + Bt + GK + A, 2, D + Pi + " +lon_0=13 +k=1" + s + N + Gk + HB + Bt + GK + A, 2, D + Pi + Gj + " +k=1" + s + N + Gk + HB + Bt + GK + A, 2, D + Pi + UE + " +k=1" + s + N + Gk + HB + Bt + GK + A, 2, D + Pi + RI + " +k=1" + s + N + Gk + HB + Bt + GK + A, 2, D + Pi + Gl + " +k=1" + s + N + Gk + HB + Bt + GK + A, 2, D + Pi + SP + " +k=1" + s + N + Gk + HB + Bt + GK + A, 2, D + Pi + RJ + " +k=1" + s + N + Gk + HB + Bt + GK + A, 317, CU + " +lat_0=-18.9 +lonc=44.10000000000001 +alpha=18.9" + EP + u + CO + " +gamma=18.9" + R + HD + Lv + E + A, 36, I + JZ + o + R + HD + E + A, 1, I + JM + o + R + HD + E + A, 110, I + Mi + Lo + GD + E + A, 1, I + NS + Lo + GD + E + A, 21, CU + Qi + Yz + PF + Ph + " +x_0=590476.8714630401 +y_0=442857.653094361" + If + Lo + GD + " +to_meter=20.11676512155263" + A, 1, CU + Qi + Yz + PF + Ph + " +x_0=590476.8727431979 +y_0=442857.6545573985" + If + Lo + GD + " +to_meter=0.3047994715386762" + A, 1, CU + Qi + Yz + PF + Ph + " +x_0=590476.87 +y_0=442857.65" + If + Lo + GD + E + A, 28, D + YA + " +lon_0=-8 +k=1" + h + KJ + PV + Bb + E + A, 1, D + YA + " +lon_0=-8 +k=1.000035" + h + KJ + Ok + Bb + E + A, 1, D + YA + " +lon_0=-8 +k=1.000035" + h + KJ + Ok + Bb + E + A, 258, D + PT + Zz + V + s + N + Y + g + E + A, 1, D + PT + NX + V + s + N + Y + g + E + A, 1, D + GM + Ox + V + s + N + Y + g + E + A, 1, D + PT + Tk + V + s + N + Y + g + E + A, 1, D + GM + Oy + V + s + N + Y + g + E + A, 1, D + GM + Rw + V + s + N + Y + g + E + A, 1, D + GM + Oz + V + s + N + Y + g + E + A, 1, D + GM + aA + V + s + N + Y + g + E + A, 1, D + GM + PA + V + s + N + Y + g + E + A, 1, D + Fs + PB + V + s + N + Y + g + E + A, 1, D + IZ + ZH + V + s + N + Y + g + E + A, 1, D + IZ + ZI + V + s + N + Y + g + E + A, 1, D + IZ + ZJ + V + s + N + Y + g + E + A, 1, D + IQ + " +lon_0=142" + V + s + N + Y + g + E + A, 1, D + IQ + Pj + V + s + N + Y + g + E + A, 1, D + IQ + " +lon_0=124" + V + s + N + Y + g + E + A, 1, D + IQ + NX + V + s + N + Y + g + E + A, 1, D + " +lat_0=20" + Rw + V + s + N + Y + g + E + A, 1, D + IQ + ZR + V + s + N + Y + g + E + A, 21, Ck + Vs + UX + " +x_0=86501.46392051999" + aS + Ee + Ef + JK + Vo + A, 139, I + JM + Gn + E + A, 1, I + Me + Gn + E + A, 151, H + " +lat_1=36" + GM + SC + QL + O + Hk + AU + BN + JC + E + A, 1, H + Sd + Se + SC + Nk + O + Hk + AU + BN + JC + E + A, 1, H + " +lat_1=36" + GM + SC + QL + O + Hk + AU + BN + E + A, 1, H + Sd + Se + SC + Nk + O + Hk + AU + BN + E + A, 235, I + KA + c + Af + E + A, 1, I + Oq + c + Af + E + A, 1, I + QD + c + Af + E + A, 1, I + JN + c + Af + E + A, 59, H + " +lat_1=36" + GM + SC + QL + " +x_0=500135 +y_0=300090" + c + Af + E + A, 1, H + Sd + Se + SC + Nk + " +x_0=500135 +y_0=300090" + c + Af + E + A, 236, I + Ja + AU + BN + E + A, 93, I + ID + R + HE + E + A, 33, D + L + Nb + AP + O + N + R + HE + E + A, 16, D + L + Vn + AP + O + N + R + HE + E + A, 1, D + L + Vn + V + O + N + R + HE + E + A, 80, D + L + RP + " +k=1" + s + EO + Y + Aw + Ls + E + A, 1, D + L + QQ + " +k=1" + s + EO + Y + Aw + Ls + E + A, 1, D + L + ZG + " +k=1" + s + EO + Y + Aw + Ls + E + A, 1, D + L + PG + " +k=1" + s + EO + Y + z + E + A, 1, D + L + Ig + " +k=1" + s + EO + Y + z + E + A, 1, D + L + PH + " +k=1" + s + EO + Y + z + E + A, 1, D + L + PG + " +k=1" + Bn + EO + Y + z + E + A, 1, D + L + Ig + " +k=1 +x_0=450000" + EO + Y + z + E + A, 1, D + L + PH + " +k=1" + YL + EO + Y + z + E + A, 22, D + L + RP + " +k=1" + s + N + Y + Aw + Ls + E + A, 1, D + L + QQ + " +k=1" + s + N + Y + Aw + Ls + E + A, 1, D + L + ZG + " +k=1" + s + N + Y + Aw + Ls + E + A, 1, D + L + PG + " +k=1" + Bn + N + Y + z + E + A, 1, D + L + Ig + " +k=1 +x_0=450000" + N + Y + z + E + A, 1, D + L + PH + " +k=1" + YL + N + Y + z + E + A, 1, H + LM + Nh + " +lat_0=47.5" + Ig + u + Is + Y + z + E + A, 1, D + L + RP + " +k=1" + Bn + N + Y + Aw + Ls + E + A, 1, D + L + QQ + " +k=1 +x_0=450000" + N + Y + Aw + Ls + E + A, 1, D + L + ZG + " +k=1" + YL + N + Y + Aw + Ls + E + A, 10, H + Ks + Kt + Hr + " +lon_0=4.356939722222222 +x_0=150000.01256 +y_0=5400088.4378" + R + GP + E + A, 70, H + " +lat_1=51.16666723333333 +lat_2=49.8333339" + Hr + " +lon_0=4.367486666666666 +x_0=150000.013 +y_0=5400088.438" + R + GP + E + A, 96, D + L + ZO + " +k=1" + Ci + N + Y + AC + E + A, 1, D + L + KB + " +k=1" + Bo + N + Y + AC + E + A, 1, D + L + IH + " +k=1" + DP + N + Y + AC + E + A, 1, D + L + Gj + " +k=1" + Eg + N + Y + AC + E + A, 59, I + Ja + AU + BN + No + E + A, 1, I + KA + AU + BN + No + E + A, 71, GU + " +lat_0=45.9 +lon_0=25.39246588888889 +k=0.9996667" + O + Ae + R + QP + E + A, 238, I + JZ + j + MR + E + A, 1, I + JM + j + MR + E + A, 62, D + L + SQ + " +k=1" + O + N + C + Rr + E + A, 64, I + Ns + C + B + E + A, 1, I + Nt + C + B + E + A, 1, I + Nu + C + B + E + A, 1, I + Nw + C + B + E + A, 1, I + NP + C + B + E + A, 1, I + NQ + C + B + E + A, 1, I + Ik + C + B + E + A, 1, I + IC + C + B + E + A, 1, I + Hi + C + B + E + A, 1, I + Gz + C + B + E + A, 1, I + ID + C + B + E + A, 1, I + Io + C + B + E + A, 1, I + Ik + o + C + B + E + A, 1, I + IC + o + C + B + E + A, 1, I + Hi + o + C + B + E + A, 1, I + Gz + o + C + B + E + A, 1, I + ID + o + C + B + E + A, 1, I + Io + o + C + B + E + A, 1, I + MB + o + C + B + E + A, 1, I + Nx + o + C + B + E + A, 1, I + Nr + o + C + B + E + A, 1, I + Ik + C + B + E + A, 1, I + IC + C + B + E + A, 1, I + Hi + C + B + E + A, 1, I + Gz + C + B + E + A, 1, I + ID + C + B + E + A, 1, I + Io + C + B + E + A, 1, I + Ik + o + C + B + E + A, 1, I + IC + o + C + B + E + A, 1, I + Hi + o + C + B + E + A, 1, I + Gz + o + C + B + E + A, 1, I + ID + o + C + B + E + A, 1, I + Io + o + C + B + E + A, 1, I + MB + o + C + B + E + A, 1, I + Nx + o + C + B + E + A, 1, I + Nr + o + C + B + E + A, 1, H + " +lat_1=48.71666666666667 +lat_2=47.85" + Ib + IS + Z + N + X + J + A, 1, H + " +lat_1=47.88333333333333 +lat_2=46.45 +lat_0=45.83333333333334" + IS + Z + N + X + J + A, 1, H + " +lat_1=46.4 +lat_2=44.86666666666667" + IZ + IS + Z + N + X + J + A, 2, H + " +lat_1=41.85 +lat_2=42.81666666666667 +lat_0=41.33333333333334" + CS + Z + N + X + J + A, 1, H + " +lat_1=40.28333333333333" + Dk + BY + " +lon_0=-99.5" + Z + N + X + J + A, 1, D + CQ + DF + V + e + N + X + J + A, 1, D + CQ + DG + V + e + N + X + J + A, 1, D + CQ + DH + V + e + N + X + J + A, 1, D + Fp + DI + AO + e + N + X + J + A, 1, D + BA + " +lon_0=-74.66666666666667" + EQ + Z + N + X + J + A, 1, D + Bl + Cu + Hm + e + N + X + J + A, 1, D + Bl + Iy + V + e + N + X + J + A, 1, D + Bl + Cv + Iz + e + N + X + J + A, 1, D + Fs + " +lon_0=-74.33333333333333" + AO + e + N + X + J + A, 1, D + Fs + Cw + Ad + e + N + X + J + A, 1, D + Fs + Cx + Ad + e + N + X + J + A, 2, H + " +lat_1=34.33333333333334 +lat_2=36.16666666666666" + LT + NW + Z + N + X + J + A, 1, H + " +lat_1=47.43333333333333" + Xy + Ib + EZ + Z + N + X + J + A, 1, H + " +lat_1=46.18333333333333 +lat_2=47.48333333333333" + Be + EZ + Z + N + X + J + A, 1, H + " +lat_1=40.43333333333333 +lat_2=41.7" + BY + ET + Z + N + X + J + A, 1, H + " +lat_1=38.73333333333333 +lat_2=40.03333333333333" + Ch + ET + Z + N + X + J + A, 1, H + " +lat_1=35.56666666666667" + Du + QU + Fl + Z + N + X + J + A, 1, H + " +lat_1=33.93333333333333 +lat_2=35.23333333333333" + Do + Fl + Z + N + X + J + A, 1, H + " +lat_1=44.33333333333334" + Nh + AK + AJ + Z + N + X + J + A, 1, H + " +lat_1=42.33333333333334 +lat_2=44" + p + AJ + Z + N + X + J + A, 1, H + " +lat_1=40.88333333333333 +lat_2=41.95" + BB + Ea + Z + N + X + J + A, 2, D + EI + GE + " +k=0.9999938" + e + N + X + J + A, 1, H + " +lat_1=33.76666666666667 +lat_2=34.96666666666667" + PT + CR + Z + N + X + J + A, 2, H + " +lat_1=32.33333333333334 +lat_2=33.66666666666666" + Dr + CR + Z + N + X + J + A, 1, H + " +lat_1=44.41666666666666 +lat_2=45.68333333333333" + AL + CS + Z + N + X + J + A, 1, H + " +lat_1=42.83333333333334 +lat_2=44.4" + EJ + Ag + Z + N + X + J + A, 2, H + aL + " +lat_2=36.18333333333333" + QV + Jr + Z + N + X + J + A, 1, H + " +lat_1=32.13333333333333 +lat_2=33.96666666666667" + Ds + " +lon_0=-97.5" + Z + N + X + J + A, 1, H + " +lat_1=30.11666666666667 +lat_2=31.88333333333333" + Cb + Ag + Z + N + X + J + A, 1, H + " +lat_1=28.38333333333333 +lat_2=30.28333333333333" + Dt + Ji + Z + N + X + J + A, 1, H + " +lat_1=26.16666666666667 +lat_2=27.83333333333333" + Cc + CV + Z + N + X + J + A, 1, H + " +lat_1=40.71666666666667 +lat_2=41.78333333333333" + Br + BI + Z + N + X + J + A, 1, H + " +lat_1=39.01666666666667 +lat_2=40.65" + AQ + BI + Z + N + X + J + A, 1, H + " +lat_1=37.21666666666667 +lat_2=38.35" + f + BI + Z + N + X + J + A, 1, D + Fp + LW + JA + e + N + X + J + A, 1, H + " +lat_1=38.03333333333333 +lat_2=39.2" + AA + GF + Z + N + X + J + A, 1, H + Dn + " +lat_2=37.96666666666667" + AB + GF + Z + N + X + J + A, 1, H + " +lat_1=47.5" + Xy + Ib + Cy + Z + N + X + J + A, 1, H + " +lat_1=45.83333333333334 +lat_2=47.33333333333334" + Dv + AJ + Z + N + X + J + A, 1, H + " +lat_1=39 +lat_2=40.25" + Mr + Ga + Z + N + X + J + A, 1, H + " +lat_1=37.48333333333333 +lat_2=38.88333333333333" + QX + CR + Z + N + X + J + A, 1, H + " +lat_1=45.56666666666667 +lat_2=46.76666666666667" + Dw + Bu + Z + N + X + J + A, 1, H + " +lat_1=44.25" + Hl + AL + Bu + Z + N + X + J + A, 1, H + " +lat_1=42.73333333333333 +lat_2=44.06666666666667" + PR + Bu + Z + N + X + J + A, 1, D + LL + DJ + Am + e + N + X + J + A, 1, D + LL + DK + Am + e + N + X + J + A, 1, D + LL + JB + Am + e + N + X + J + A, 1, D + LL + DL + Am + e + N + X + J + A, 6, D + L + Ji + AP + k + N + X + J + A, 1, D + L + Rs + AP + k + N + X + J + A, 1, D + L + Jh + AP + k + N + X + J + A, 1, D + L + CR + AP + k + N + X + J + A, 14, D + L + " +lon_0=-53" + V + Ab + N + X + E + A, 1, D + L + Zd + V + Ab + N + X + E + A, 1, D + L + Tf + V + Ab + N + X + E + A, 1, D + L + RQ + V + Ab + N + X + E + A, 1, D + L + RR + V + Ab + N + X + E + A, 1, D + L + Tg + V + Ab + N + X + E + A, 12, H + UF + Nh + IZ + HJ + s + N + X + E + A, 1, H + CD + CE + Cc + Bi + Z + N + X + J + A, 1, H + LM + RK + MV + IS + a + N + C + B + E + A, 4, H + JT + Jn + FZ + CS + O + N + C + B + E + A, 3, D + CQ + DF + V + h + Tm + C + B + E + A, 1, D + CQ + DG + V + O + Hh + C + B + E + A, 1, D + CQ + DH + V + CX + LV + C + B + E + A, 1, D + Fp + DI + AO + AI + N + C + B + E + A, 1, D + BA + Gp + V + Bn + N + C + B + E + A, 1, D + Bl + Cu + Hm + OC + N + C + B + E + A, 1, D + Bl + Iy + V + O + N + C + B + E + A, 1, D + Bl + Cv + Iz + YD + N + C + B + E + A, 1, D + BA + Gp + V + Bn + N + C + B + E + A, 1, D + Fs + Cw + Ad + Bv + N + C + B + E + A, 1, D + Fs + Cx + Ad + Qo + N + C + B + E + A, 1, H + Dl + Dm + BB + Oc + AI + N + C + B + E + A, 1, H + Et + Eu + LT + NW + Rh + N + C + B + E + A, 1, H + BH + Ev + Ib + EZ + a + N + C + B + E + A, 1, H + Ew + Ex + Be + EZ + a + N + C + B + E + A, 1, H + OK + Fa + BY + ET + a + N + C + B + E + A, 1, H + Fb + Fc + Ch + ET + a + N + C + B + E + A, 1, H + Dn + Ey + QU + Fl + a + N + C + B + E + A, 1, H + Ez + FA + Do + Fl + a + N + C + B + E + A, 1, H + PP + CZ + AK + AJ + Ci + N + C + B + E + A, 1, H + PQ + Ca + p + AJ + AV + N + C + B + E + A, 1, H + MW + FB + BB + Ea + a + N + C + B + E + A, 1, H + Dp + Dq + y + Ea + a + N + C + B + E + A, 1, D + EI + GE + Lb + BU + N + C + B + E + A, 3, H + FC + OD + Dr + CR + OE + N + C + B + E + A, 1, H + Fd + Fe + AL + CS + a + N + C + B + E + A, 1, H + OL + Ff + EJ + Ag + a + N + C + B + E + A, 1, H + FD + MX + BC + MQ + a + N + C + B + E + A, 1, H + FE + MY + QV + Jr + h + AH + C + B + E + A, 1, H + FF + FG + Ds + CV + a + Cl + C + B + E + A, 1, H + FH + FI + Cb + Ag + EW + Fq + C + B + E + A, 1, H + FJ + FK + Dt + Ji + a + LV + C + B + E + A, 1, H + CD + CE + Cc + CV + AI + Ju + C + B + E + A, 1, H + AY + CF + Br + BI + O + AH + C + B + E + A, 1, H + JF + CG + AQ + BI + O + Cl + C + B + E + A, 1, H + JG + CH + f + BI + O + Fq + C + B + E + A, 1, D + Fp + LW + JA + O + N + C + B + E + A, 1, H + OF + FL + AA + GF + Bo + Cl + C + B + E + A, 1, H + Az + Du + AB + GF + Bo + AH + C + B + E + A, 1, H + BH + OG + Ib + Cy + O + N + C + B + E + A, 1, H + FM + FN + Dv + AJ + O + N + C + B + E + A, 1, H + Mb + RN + Mr + Ga + a + N + C + B + E + A, 1, H + Fg + Fh + QX + CR + a + N + C + B + E + A, 1, H + FO + FP + Dw + Bu + a + N + C + B + E + A, 1, H + Jc + MZ + AL + Bu + a + N + C + B + E + A, 1, H + FQ + FR + PR + Bu + a + N + C + B + E + A, 1, D + CA + DJ + Ad + h + N + C + B + E + A, 1, D + CA + DK + Ad + u + EK + C + B + E + A, 1, D + CA + JB + Ad + a + N + C + B + E + A, 1, D + CA + DL + Ad + CX + EK + C + B + E + A, 3, H + GW + GX + GY + GA + h + IK + C + B + E + A, 3, D + L + Ji + AP + k + N + C + B + J + A, 1, D + L + Rs + AP + k + N + C + B + J + A, 1, D + L + Jh + AP + k + N + C + B + J + A, 1, D + L + CR + AP + k + N + C + B + J + A, 14, D + L + " +lon_0=-53" + V + Ab + N + C + B + E + A, 1, D + L + Zd + V + Ab + N + C + B + E + A, 1, D + L + Tf + V + Ab + N + C + B + E + A, 1, D + L + RQ + V + Ab + N + C + B + E + A, 1, D + L + RR + V + Ab + N + C + B + E + A, 1, D + L + Tg + V + Ab + N + C + B + E + A, 1, D + L + IL + V + Ab + N + C + B + E + A, 1, D + L + Th + V + Ab + N + C + B + E + A, 1, D + L + Ti + V + Ab + N + C + B + E + A, 1, D + L + Ga + V + Ab + N + C + B + E + A, 1, D + L + ET + V + Ab + N + C + B + E + A, 1, D + L + CR + V + Ab + N + C + B + E + A, 1, D + L + NV + V + Ab + N + C + B + E + A, 1, D + L + Jh + V + Ab + N + C + B + E + A, 1, D + L + Bu + V + Ab + N + C + B + E + A, 1, D + L + Rs + V + Ab + N + C + B + E + A, 1, D + L + OZ + V + Ab + N + C + B + E + A, 1, H + UF + Nh + IZ + HJ + s + N + C + B + E + A, 1, H + CD + CE + " +lat_0=25.5" + Bi + BZ + N + C + B + E + A, 2, I + SK + T + P + E + A, 1, I + TV + T + P + E + A, 1, I + Xz + T + P + E + A, 1, I + TY + T + P + E + A, 1, I + RG + T + P + E + A, 1, I + Ro + T + P + E + A, 1, I + RH + T + P + E + A, 1, I + TW + T + P + E + A, 1, I + TX + T + P + E + A, 1, I + QE + T + P + E + A, 1, I + Ns + T + P + E + A, 1, I + Nt + T + P + E + A, 1, I + Nu + T + P + E + A, 1, I + Nw + T + P + E + A, 1, I + NP + T + P + E + A, 1, I + NQ + T + P + E + A, 1, I + Ik + T + P + E + A, 1, I + IC + T + P + E + A, 1, I + Hi + T + P + E + A, 1, I + Gz + T + P + E + A, 1, I + ID + T + P + E + A, 1, I + Io + T + P + E + A, 1, I + MB + T + P + E + A, 1, I + Nx + T + P + E + A, 1, I + Nr + T + P + E + A, 1, I + Os + T + P + E + A, 1, I + SL + T + P + E + A, 1, I + Ja + T + P + E + A, 1, I + KA + T + P + E + A, 1, I + Oq + T + P + E + A, 1, I + QD + T + P + E + A, 1, I + JN + T + P + E + A, 1, I + KC + T + P + E + A, 1, I + NR + T + P + E + A, 1, I + Ki + T + P + E + A, 1, I + Mf + T + P + E + A, 1, I + KD + T + P + E + A, 1, I + JZ + T + P + E + A, 1, I + JM + T + P + E + A, 1, I + Me + T + P + E + A, 1, I + Rb + T + P + E + A, 1, I + Rc + T + P + E + A, 1, I + SO + T + P + E + A, 1, I + Td + T + P + E + A, 1, I + Te + T + P + E + A, 1, I + QF + T + P + E + A, 1, I + Ny + T + P + E + A, 1, I + Mh + T + P + E + A, 1, I + Mi + T + P + E + A, 1, I + NS + T + P + E + A, 1, I + Mg + T + P + E + A, 1, I + NT + T + P + E + A, 1, I + Ot + T + P + E + A, 1, I + Nv + T + P + E + A, 1, I + PM + T + P + E + A, 1, I + Re + T + P + E + A, 1, I + SM + T + P + E + A, 1, I + MA + T + P + E + A, 1, I + Nq + T + P + E + A, 1, I + PL + T + P + E + A, 41, I + SK + o + T + P + E + A, 1, I + TV + o + T + P + E + A, 1, I + Xz + o + T + P + E + A, 1, I + TY + o + T + P + E + A, 1, I + RG + o + T + P + E + A, 1, I + Ro + o + T + P + E + A, 1, I + RH + o + T + P + E + A, 1, I + TW + o + T + P + E + A, 1, I + TX + o + T + P + E + A, 1, I + QE + o + T + P + E + A, 1, I + Ns + o + T + P + E + A, 1, I + Nt + o + T + P + E + A, 1, I + Nu + o + T + P + E + A, 1, I + Nw + o + T + P + E + A, 1, I + NP + o + T + P + E + A, 1, I + NQ + o + T + P + E + A, 1, I + Ik + o + T + P + E + A, 1, I + IC + o + T + P + E + A, 1, I + Hi + o + T + P + E + A, 1, I + Gz + o + T + P + E + A, 1, I + ID + o + T + P + E + A, 1, I + Io + o + T + P + E + A, 1, I + MB + o + T + P + E + A, 1, I + Nx + o + T + P + E + A, 1, I + Nr + o + T + P + E + A, 1, I + Os + o + T + P + E + A, 1, I + SL + o + T + P + E + A, 1, I + Ja + o + T + P + E + A, 1, I + KA + o + T + P + E + A, 1, I + Oq + o + T + P + E + A, 1, I + QD + o + T + P + E + A, 1, I + JN + o + T + P + E + A, 1, I + KC + o + T + P + E + A, 1, I + NR + o + T + P + E + A, 1, I + Ki + o + T + P + E + A, 1, I + Mf + o + T + P + E + A, 1, I + KD + o + T + P + E + A, 1, I + JZ + o + T + P + E + A, 1, I + JM + o + T + P + E + A, 1, I + Me + o + T + P + E + A, 1, I + Rb + o + T + P + E + A, 1, I + Rc + o + T + P + E + A, 1, I + SO + o + T + P + E + A, 1, I + Td + o + T + P + E + A, 1, I + Te + o + T + P + E + A, 1, I + QF + o + T + P + E + A, 1, I + Ny + o + T + P + E + A, 1, I + Mh + o + T + P + E + A, 1, I + Mi + o + T + P + E + A, 1, I + NS + o + T + P + E + A, 1, I + Mg + o + T + P + E + A, 1, I + NT + o + T + P + E + A, 1, I + Ot + o + T + P + E + A, 1, I + Nv + o + T + P + E + A, 1, I + PM + o + T + P + E + A, 1, I + Re + o + T + P + E + A, 1, I + SM + o + T + P + E + A, 1, I + MA + o + T + P + E + A, 1, I + Nq + o + T + P + E + A, 1, I + PL + o + T + P + E + A, 41, I + SK + T + Q + E + A, 1, I + TV + T + Q + E + A, 1, I + Xz + T + Q + E + A, 1, I + TY + T + Q + E + A, 1, I + RG + T + Q + E + A, 1, I + Ro + T + Q + E + A, 1, I + RH + T + Q + E + A, 1, I + TW + T + Q + E + A, 1, I + TX + T + Q + E + A, 1, I + QE + T + Q + E + A, 1, I + Ns + T + Q + E + A, 1, I + Nt + T + Q + E + A, 1, I + Nu + T + Q + E + A, 1, I + Nw + T + Q + E + A, 1, I + NP + T + Q + E + A, 1, I + NQ + T + Q + E + A, 1, I + Ik + T + Q + E + A, 1, I + IC + T + Q + E + A, 1, I + Hi + T + Q + E + A, 1, I + Gz + T + Q + E + A, 1, I + ID + T + Q + E + A, 1, I + Io + T + Q + E + A, 1, I + MB + T + Q + E + A, 1, I + Nx + T + Q + E + A, 1, I + Nr + T + Q + E + A, 1, I + Os + T + Q + E + A, 1, I + SL + T + Q + E + A, 1, I + Ja + T + Q + E + A, 1, I + KA + T + Q + E + A, 1, I + Oq + T + Q + E + A, 1, I + QD + T + Q + E + A, 1, I + JN + T + Q + E + A, 1, I + KC + T + Q + E + A, 1, I + NR + T + Q + E + A, 1, I + Ki + T + Q + E + A, 1, I + Mf + T + Q + E + A, 1, I + KD + T + Q + E + A, 1, I + JZ + T + Q + E + A, 1, I + JM + T + Q + E + A, 1, I + Me + T + Q + E + A, 1, I + Rb + T + Q + E + A, 1, I + Rc + T + Q + E + A, 1, I + SO + T + Q + E + A, 1, I + Td + T + Q + E + A, 1, I + Te + T + Q + E + A, 1, I + QF + T + Q + E + A, 1, I + Ny + T + Q + E + A, 1, I + Mh + T + Q + E + A, 1, I + Mi + T + Q + E + A, 1, I + NS + T + Q + E + A, 1, I + Mg + T + Q + E + A, 1, I + NT + T + Q + E + A, 1, I + Ot + T + Q + E + A, 1, I + Nv + T + Q + E + A, 1, I + PM + T + Q + E + A, 1, I + Re + T + Q + E + A, 1, I + SM + T + Q + E + A, 1, I + MA + T + Q + E + A, 1, I + Nq + T + Q + E + A, 1, I + PL + T + Q + E + A, 41, I + SK + o + T + Q + E + A, 1, I + TV + o + T + Q + E + A, 1, I + Xz + o + T + Q + E + A, 1, I + TY + o + T + Q + E + A, 1, I + RG + o + T + Q + E + A, 1, I + Ro + o + T + Q + E + A, 1, I + RH + o + T + Q + E + A, 1, I + TW + o + T + Q + E + A, 1, I + TX + o + T + Q + E + A, 1, I + QE + o + T + Q + E + A, 1, I + Ns + o + T + Q + E + A, 1, I + Nt + o + T + Q + E + A, 1, I + Nu + o + T + Q + E + A, 1, I + Nw + o + T + Q + E + A, 1, I + NP + o + T + Q + E + A, 1, I + NQ + o + T + Q + E + A, 1, I + Ik + o + T + Q + E + A, 1, I + IC + o + T + Q + E + A, 1, I + Hi + o + T + Q + E + A, 1, I + Gz + o + T + Q + E + A, 1, I + ID + o + T + Q + E + A, 1, I + Io + o + T + Q + E + A, 1, I + MB + o + T + Q + E + A, 1, I + Nx + o + T + Q + E + A, 1, I + Nr + o + T + Q + E + A, 1, I + Os + o + T + Q + E + A, 1, I + SL + o + T + Q + E + A, 1, I + Ja + o + T + Q + E + A, 1, I + KA + o + T + Q + E + A, 1, I + Oq + o + T + Q + E + A, 1, I + QD + o + T + Q + E + A, 1, I + JN + o + T + Q + E + A, 1, I + KC + o + T + Q + E + A, 1, I + NR + o + T + Q + E + A, 1, I + Ki + o + T + Q + E + A, 1, I + Mf + o + T + Q + E + A, 1, I + KD + o + T + Q + E + A, 1, I + JZ + o + T + Q + E + A, 1, I + JM + o + T + Q + E + A, 1, I + Me + o + T + Q + E + A, 1, I + Rb + o + T + Q + E + A, 1, I + Rc + o + T + Q + E + A, 1, I + SO + o + T + Q + E + A, 1, I + Td + o + T + Q + E + A, 1, I + Te + o + T + Q + E + A, 1, I + QF + o + T + Q + E + A, 1, I + Ny + o + T + Q + E + A, 1, I + Mh + o + T + Q + E + A, 1, I + Mi + o + T + Q + E + A, 1, I + NS + o + T + Q + E + A, 1, I + Mg + o + T + Q + E + A, 1, I + NT + o + T + Q + E + A, 1, I + Ot + o + T + Q + E + A, 1, I + Nv + o + T + Q + E + A, 1, I + PM + o + T + Q + E + A, 1, I + Re + o + T + Q + E + A, 1, I + SM + o + T + Q + E + A, 1, I + MA + o + T + Q + E + A, 1, I + Nq + o + T + Q + E + A, 1, I + PL + o + T + Q + E + A, 41, I + SK + S + E + A, 1, I + TV + S + E + A, 1, I + Xz + S + E + A, 1, I + TY + S + E + A, 1, I + RG + S + E + A, 1, I + Ro + S + E + A, 1, I + RH + S + E + A, 1, I + TW + S + E + A, 1, I + TX + S + E + A, 1, I + QE + S + E + A, 1, I + Ns + S + E + A, 1, I + Nt + S + E + A, 1, I + Nu + S + E + A, 1, I + Nw + S + E + A, 1, I + NP + S + E + A, 1, I + NQ + S + E + A, 1, I + Ik + S + E + A, 1, I + IC + S + E + A, 1, I + Hi + S + E + A, 1, I + Gz + S + E + A, 1, I + ID + S + E + A, 1, I + Io + S + E + A, 1, I + MB + S + E + A, 1, I + Nx + S + E + A, 1, I + Nr + S + E + A, 1, I + Os + S + E + A, 1, I + SL + S + E + A, 1, I + Ja + S + E + A, 1, I + KA + S + E + A, 1, I + Oq + S + E + A, 1, I + QD + S + E + A, 1, I + JN + S + E + A, 1, I + KC + S + E + A, 1, I + NR + S + E + A, 1, I + Ki + S + E + A, 1, I + Mf + S + E + A, 1, I + KD + S + E + A, 1, I + JZ + S + E + A, 1, I + JM + S + E + A, 1, I + Me + S + E + A, 1, I + Rb + S + E + A, 1, I + Rc + S + E + A, 1, I + SO + S + E + A, 1, I + Td + S + E + A, 1, I + Te + S + E + A, 1, I + QF + S + E + A, 1, I + Ny + S + E + A, 1, I + Mh + S + E + A, 1, I + Mi + S + E + A, 1, I + NS + S + E + A, 1, I + Mg + S + E + A, 1, I + NT + S + E + A, 1, I + Ot + S + E + A, 1, I + Nv + S + E + A, 1, I + PM + S + E + A, 1, I + Re + S + E + A, 1, I + SM + S + E + A, 1, I + MA + S + E + A, 1, I + Nq + S + E + A, 1, I + PL + S + E + A, 1, BP + Hr + Qm + HN + Rd + Bd + Cl + S + E + A, 3, D + L + Ji + AP + k + N + S + J + A, 1, D + L + Rs + AP + k + N + S + J + A, 1, D + L + Jh + AP + k + N + S + J + A, 1, D + L + CR + AP + k + N + S + J + A, 34, I + SK + o + S + E + A, 1, I + TV + o + S + E + A, 1, I + Xz + o + S + E + A, 1, I + TY + o + S + E + A, 1, I + RG + o + S + E + A, 1, I + Ro + o + S + E + A, 1, I + RH + o + S + E + A, 1, I + TW + o + S + E + A, 1, I + TX + o + S + E + A, 1, I + QE + o + S + E + A, 1, I + Ns + o + S + E + A, 1, I + Nt + o + S + E + A, 1, I + Nu + o + S + E + A, 1, I + Nw + o + S + E + A, 1, I + NP + o + S + E + A, 1, I + NQ + o + S + E + A, 1, I + Ik + o + S + E + A, 1, I + IC + o + S + E + A, 1, I + Hi + o + S + E + A, 1, I + Gz + o + S + E + A, 1, I + ID + o + S + E + A, 1, I + Io + o + S + E + A, 1, I + MB + o + S + E + A, 1, I + Nx + o + S + E + A, 1, I + Nr + o + S + E + A, 1, I + Os + o + S + E + A, 1, I + SL + o + S + E + A, 1, I + Ja + o + S + E + A, 1, I + KA + o + S + E + A, 1, I + Oq + o + S + E + A, 1, I + QD + o + S + E + A, 1, I + JN + o + S + E + A, 1, I + KC + o + S + E + A, 1, I + NR + o + S + E + A, 1, I + Ki + o + S + E + A, 1, I + Mf + o + S + E + A, 1, I + KD + o + S + E + A, 1, I + JZ + o + S + E + A, 1, I + JM + o + S + E + A, 1, I + Me + o + S + E + A, 1, I + Rb + o + S + E + A, 1, I + Rc + o + S + E + A, 1, I + SO + o + S + E + A, 1, I + Td + o + S + E + A, 1, I + Te + o + S + E + A, 1, I + QF + o + S + E + A, 1, I + Ny + o + S + E + A, 1, I + Mh + o + S + E + A, 1, I + Mi + o + S + E + A, 1, I + NS + o + S + E + A, 1, I + Mg + o + S + E + A, 1, I + NT + o + S + E + A, 1, I + Ot + o + S + E + A, 1, I + Nv + o + S + E + A, 1, I + PM + o + S + E + A, 1, I + Re + o + S + E + A, 1, I + SM + o + S + E + A, 1, I + MA + o + S + E + A, 1, I + Nq + o + S + E + A, 1, I + PL + o + S + E + A, 1, BP + m + " +lat_ts=-90" + HN + Rd + Bd + Cl + S + E + A, 5, D + L + PN + AP + O + Ak + S + E + A].reduce((acc, it, i2) => {
      if (i2 % 2 === 0) {
        const cur = acc.prev + it;
        const code = "EPSG:" + cur;
        acc.defs.push([code]);
        acc.prev = cur;
      } else {
        acc.defs[acc.defs.length - 1].push(it);
      }
      return acc;
    }, { defs: [], prev: 0 }).defs;
  }
});

// node_modules/proj4-fully-loaded/proj4-fully-loaded.js
var require_proj4_fully_loaded = __commonJS({
  "node_modules/proj4-fully-loaded/proj4-fully-loaded.js"(exports2, module2) {
    var proj4 = require_proj4_src();
    var defs = require_proj4js_definitions();
    if ((typeof proj4 === "object" || typeof proj4 === "function") && typeof proj4.defs !== "function" && typeof proj4.default === "function" && typeof proj4.default.defs === "function") {
      proj4 = proj4.default;
    }
    proj4.defs(defs);
    if (typeof define === "function" && define.amd) {
      define(function() {
        return proj4;
      });
    }
    if (typeof module2 === "object") {
      module2.exports = proj4;
      module2.exports.default = proj4;
    }
  }
});

// node_modules/bbox-fns/reproject.js
var require_reproject = __commonJS({
  "node_modules/bbox-fns/reproject.js"(exports2, module2) {
    "use_strict";
    var bboxArray2 = require_bbox_array();
    var densePolygon2 = require_dense_polygon();
    function reproject(bbox, fwd, { async = false, density, nan_strategy = "throw" } = {}) {
      const polygon = densePolygon2(bbox, { density });
      const ring = polygon[0];
      const reprojected = ring.map((pt) => fwd(pt));
      if (async) {
        return Promise.all(reprojected).then((points) => bboxArray2(points, { nan_strategy }));
      } else {
        return bboxArray2(reprojected, { nan_strategy });
      }
    }
    module2.exports = reproject;
    module2.exports.default = reproject;
  }
});

// node_modules/reproject-bbox/reproject-bbox.js
var require_reproject_bbox = __commonJS({
  "node_modules/reproject-bbox/reproject-bbox.js"(exports2, module2) {
    var merge = require_proj4_merge();
    var proj4 = require_proj4_fully_loaded();
    var bboxMerge = require_merge();
    var bboxSplit = require_split();
    var reproject = require_reproject();
    if (typeof merge !== "function") {
      console.warn("[reproject-bbox] failed to import proj4-merge");
    }
    var CUSTOM_PROJECTION_ERROR = "[reproject-bbox] You passed in a value of 32767 for {{%s}}, which means a custom non-standard projection.  Please pass in a Well-Known Text or PROJ4JS String instead.";
    function reprojectBoundingBox2({ bbox, debug_level = 0, density, from, nan_strategy = "throw", proj4: _proj4, split = true, to }) {
      if (from === 32767)
        throw new Error(CUSTOM_PROJECTION_ERROR.replace("{{%s}}", "from"));
      if (to === 32767)
        throw new Error(CUSTOM_PROJECTION_ERROR.replace("{{%s}}", "to"));
      if (typeof from === "number")
        from = "EPSG:" + from;
      if (typeof to === "number")
        to = "EPSG:" + to;
      const instances = [_proj4, proj4];
      if (typeof window === "object" && window.proj4)
        instances.push(window.proj4);
      if (typeof self === "object" && self.proj4)
        instances.push(self.proj4);
      const proj = merge(instances);
      const fwd = proj(from, to).forward;
      const bboxes = split ? bboxSplit(bbox, { x: [0], y: [0] }) : [bbox];
      if (debug_level >= 2)
        console.log("[reproject-bbox] bboxes:", bboxes);
      const bboxes_reprojected = bboxes.map((bbox2) => {
        return reproject(bbox2, fwd, { density, nan_strategy });
      });
      if (debug_level >= 2)
        console.log("[reproject-bbox] bboxes_reprojected:", bboxes_reprojected);
      const merged = bboxMerge(bboxes_reprojected);
      return merged;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return reprojectBoundingBox2;
      });
    }
    if (typeof module2 === "object") {
      module2.exports = reprojectBoundingBox2;
      module2.exports.default = reprojectBoundingBox2;
    }
    if (typeof window === "object") {
      window.reprojectBoundingBox = reprojectBoundingBox2;
    }
    if (typeof self === "object") {
      self.reprojectBoundingBox = reprojectBoundingBox2;
    }
  }
});

// node_modules/get-depth/index.js
var require_get_depth = __commonJS({
  "node_modules/get-depth/index.js"(exports2, module2) {
    module2.exports = function getDepth(arr) {
      const isArray = (arr2) => Array.isArray(arr2) || arr2 instanceof Int8Array || arr2 instanceof Uint8Array || arr2 instanceof Uint8ClampedArray || arr2 instanceof Int16Array || arr2 instanceof Uint16Array || arr2 instanceof Int32Array || arr2 instanceof Uint32Array || arr2 instanceof Float32Array || arr2 instanceof Float64Array || arr2 instanceof BigInt64Array || arr2 instanceof BigUint64Array;
      let depth = 0;
      let part = arr;
      while (isArray(part)) {
        depth++;
        part = part[0];
      }
      return depth;
    };
  }
});

// node_modules/reproject-line/reproject-line.js
var require_reproject_line = __commonJS({
  "node_modules/reproject-line/reproject-line.js"(exports2, module2) {
    function reproject_line(coords, reproject, options) {
      const debug_level = typeof options === "object" && typeof options.debug_level === "number" ? options.debug_level : 0;
      let densify = typeof options === "object" && typeof options.densify === "number" ? options.densify : 0;
      const strategy = typeof options === "object" && typeof options.strategy === "string" ? options.strategy : "auto";
      densify = Math.round(densify);
      if (debug_level >= 1) {
        console.log("[reproject-line] debug_level:", debug_level);
        console.log("[reproject-line] densify:", densify);
        console.log("[reproject-line] strategy:", strategy);
      }
      const out = [];
      let [xprev, yprev] = reproject(coords[0]);
      let mprev = null;
      let m = null;
      for (let i = 1; i < coords.length; i++) {
        const [x1, y1] = coords[i - 1];
        const [x2, y2] = coords[i];
        const xdist = x2 - x1;
        const ydist = y2 - y1;
        const xstep = xdist / (densify + 1);
        const ystep = ydist / (densify + 1);
        for (let ii = 1; ii <= densify; ii++) {
          const [rx, ry] = reproject([x1 + ii * xstep, y1 + ii * ystep]);
          m = (ry - yprev) / (rx - xprev);
          if (strategy === "always" || m !== mprev) {
            out.push([xprev, yprev]);
            mprev = m;
          }
          xprev = rx;
          yprev = ry;
        }
        const [rx2, ry2] = reproject([x2, y2]);
        m = (ry2 - yprev) / (rx2 - xprev);
        if (strategy === "always" || m !== mprev) {
          out.push([xprev, yprev]);
          mprev = m;
        }
        xprev = rx2;
        yprev = ry2;
      }
      out.push([xprev, yprev]);
      if (debug_level >= 3) {
        console.log("[reproject-line] returning", out);
      }
      return out;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return reproject_line;
      });
    }
    if (typeof module2 === "object") {
      module2.exports = reproject_line;
      module2.exports.default = reproject_line;
    }
  }
});

// node_modules/reproject-geojson/pluggable.js
var require_pluggable = __commonJS({
  "node_modules/reproject-geojson/pluggable.js"(exports2, module2) {
    var getDepth = require_get_depth();
    var reprojectLine = require_reproject_line();
    function reprojectGeoJSONPluggable(data, { densify, reproject }) {
      if (typeof reproject !== "function") {
        throw new Error(`[reproject-geojson] you must specify a reproject function`);
      }
      if (data.type === "FeatureCollection") {
        return {
          ...data,
          features: data.features.map((feature) => reprojectGeoJSONPluggable(feature, { densify, reproject }))
        };
      } else if (data.type === "Feature") {
        return {
          ...data,
          geometry: reprojectGeoJSONPluggable(data.geometry, { densify, reproject })
        };
      } else if (data.type === "LineString") {
        return {
          ...data,
          coordinates: reprojectLine(data.coordinates, reproject, { densify })
        };
      } else if (data.type === "MultiLineString") {
        return {
          ...data,
          coordinates: data.coordinates.map((line) => reprojectLine(line, reproject, { densify }))
        };
      } else if (data.type === "MultiPoint") {
        return {
          ...data,
          coordinates: data.coordinates.map((point) => reproject(point))
        };
      } else if (data.type === "MultiPolygon") {
        return {
          ...data,
          coordinates: data.coordinates.map((polygon) => {
            return polygon.map((ring) => reprojectLine(ring, reproject, { densify }));
          })
        };
      } else if (data.type === "Point") {
        return {
          ...data,
          coordinates: reproject(data.coordinates)
        };
      } else if (data.type === "Polygon") {
        return {
          ...data,
          coordinates: data.coordinates.map((ring) => reprojectLine(ring, reproject, { densify }))
        };
      } else if (Array.isArray(data)) {
        const depth = getDepth(data);
        if (depth === 1) {
          return reproject(data);
        } else if (depth === 2) {
          return data.map((coord) => reproject(coord));
        } else if (depth === 3) {
          return data.map((ring) => reprojectLine(ring, reproject, { densify }));
        } else if (depth === 4) {
          return data.map((polygon) => {
            return polygon.map((ring) => reprojectLine(ring, reproject, { densify }));
          });
        }
      }
      return data;
    }
    if (typeof define === "function" && define.amd)
      define(function() {
        return reprojectGeoJSONPluggable;
      });
    if (typeof module2 === "object")
      module2.exports = reprojectGeoJSONPluggable;
    if (typeof window === "object")
      window.reprojectGeoJSONPluggable = reprojectGeoJSONPluggable;
    if (typeof self === "object")
      self.reprojectGeoJSONPluggable = reprojectGeoJSONPluggable;
  }
});

// node_modules/reproject-geojson/reproject-geojson.js
var require_reproject_geojson = __commonJS({
  "node_modules/reproject-geojson/reproject-geojson.js"(exports2, module2) {
    var proj4 = require_proj4_fully_loaded();
    var reprojectGeoJSONPluggable = require_pluggable();
    function reprojectGeoJSON2(data, { densify, from: _from = "EPSG:4326", to: _to = "EPSG:4326" }) {
      if (typeof _from === "number" || _from.match(/^\d+$/))
        _from = "EPSG:" + _from;
      if (typeof _to === "number" || _to.match(/^\d+$/))
        _to = "EPSG:" + _to;
      return reprojectGeoJSONPluggable(data, {
        densify,
        reproject: proj4(_from, _to).forward
      });
    }
    if (typeof define === "function" && define.amd)
      define(function() {
        return reprojectGeoJSON2;
      });
    if (typeof module2 === "object")
      module2.exports = reprojectGeoJSON2;
    if (typeof window === "object")
      window.reprojectGeoJSON = reprojectGeoJSON2;
    if (typeof self === "object")
      self.reprojectGeoJSON = reprojectGeoJSON2;
  }
});

// src/geo-extent.js
var geo_extent_exports = {};
__export(geo_extent_exports, {
  GeoExtent: () => GeoExtent
});
module.exports = __toCommonJS(geo_extent_exports);
var import_add = __toESM(require_add(), 1);
var import_divide = __toESM(require_divide(), 1);
var import_multiply = __toESM(require_multiply(), 1);
var import_subtract = __toESM(require_subtract(), 1);
var import_bbox_array = __toESM(require_bbox_array(), 1);
var import_boolean_contains = __toESM(require_boolean_contains(), 1);
var import_boolean_intersects = __toESM(require_boolean_intersects(), 1);
var import_dense_polygon = __toESM(require_dense_polygon(), 1);
var import_unwrap = __toESM(require_unwrap(), 1);
var import_get_epsg_code = __toESM(require_get_epsg_code_node_min(), 1);
var import_geography_markup_language = __toESM(require_geography_markup_language(), 1);
var import_reproject_bbox = __toESM(require_reproject_bbox(), 1);
var import_reproject_geojson = __toESM(require_reproject_geojson(), 1);
var avg = (a, b) => (0, import_divide.default)((0, import_add.default)(a.toString(), b.toString()), "2");
var isAry = (o) => Array.isArray(o);
var isDef = (o) => o !== void 0 && o !== null && o !== "";
var isFunc = (o) => typeof o === "function";
var isObj = (o) => typeof o === "object";
var isStr = (o) => typeof o === "string";
var isNum = (o) => typeof o === "number";
var isBoxStr = (o) => isStr(o) && !!o.match(/^[-|+]?[\d\.]+(, ?[-|+]?[\d\.]+){3}$/);
var isLeafletBounds = (it) => isObj(it) && hasFuncs(it, ["getBottomLeft", "getBottomRight", "getTopLeft", "getTopRight"]);
var isLeafletBoundsJSON = (it) => isObj(it) && typeof it.min === "object" && typeof it.min.x === "number" && typeof it.min.y === "number" && typeof it.max === "object" && typeof it.max.x === "number" && typeof it.max.y === "number";
var isLeafletLatLngBounds = (o) => isObj(o) && hasFuncs(o, ["getEast", "getNorth", "getSouth", "getWest"]);
var isLeafletLatLngBoundsJSON = (o) => isObj(o) && hasKeys(o, ["_southWest", "_northEast"]);
var wkt = (bbox) => {
  const [xmin, ymin, xmax, ymax] = bbox;
  return `POLYGON((${xmax} ${ymin},${xmax} ${ymax},${xmin} ${ymax},${xmin} ${ymin},${xmax} ${ymin}))`;
};
var hasFunc = (o, f) => isObj(o) && isFunc(o[f]);
var hasObj = (o, k) => isObj(o) && isObj(o[k]);
var hasFuncs = (o, fs) => fs.every((f) => hasFunc(o, f));
var hasObjs = (o, ks) => ks.every((k) => hasObj(o, k));
var hasKey = (o, k) => isObj(o) && o[k] !== void 0 && o[k] !== null;
var hasKeys = (o, ks) => ks.every((k) => hasKey(o, k));
var allNums = (ary) => isAry(ary) && ary.every(isNum);
var allStrs = (ary) => isAry(ary) && ary.every(isStr);
var getConstructor = (o) => typeof obj === "object" && typeof obj.constructor === "function" || void 0;
var normalize = (srs2) => {
  if (!srs2)
    return srs2;
  if (srs2 === 32767 || srs2 === "EPSG:32767")
    return null;
  if (isStr(srs2) && srs2.startsWith("EPSG:"))
    return srs2;
  if (isStr(srs2) && srs2.match(/^\d+$/))
    return "EPSG:" + srs2;
  else if (isNum(srs2))
    return "EPSG:" + srs2;
  const code = (0, import_get_epsg_code.default)(srs2);
  if (isNum(code))
    return "EPSG:" + code;
  return srs2;
};
var GeoExtent = class _GeoExtent {
  constructor(o, { srs: srs2 } = {}) {
    this.srs = normalize(srs2);
    let xmin, xmax, ymin, ymax;
    let xmin_str, xmax_str, ymin_str, ymax_str;
    if (getConstructor(o) === this.constructor) {
      ({ xmin, xmax, ymin, ymax } = o);
      if (isDef(o.srs)) {
        this.srs = normalize(o.srs);
      }
    }
    if (isBoxStr(o))
      o = o.split(/, ?/);
    if (isAry(o) && o.length === 4 && allNums(o)) {
      [xmin, ymin, xmax, ymax] = o;
    } else if (isAry(o) && o.length === 4 && allStrs(o)) {
      [xmin_str, ymin_str, xmax_str, ymax_str] = o;
      [xmin, ymin, xmax, ymax] = o.map((str) => Number(str));
    } else if (isAry(o) && o.length === 2 && o.every(isAry) && o.every((o2) => o2.length === 2 && allNums(o2))) {
      [[ymin, xmin], [ymax, xmax]] = o;
    } else if (isLeafletLatLngBounds(o)) {
      xmin = o.getWest(), xmax = o.getEast(), ymin = o.getSouth(), ymax = o.getNorth();
      if (!isDef(this.srs))
        this.srs = "EPSG:4326";
    } else if (isLeafletBounds(o)) {
      ({ x: xmin, y: ymin } = o.getBottomLeft()), { x: xmax, y: ymax } = o.getTopRight();
    } else if (isLeafletLatLngBoundsJSON(o)) {
      ({
        _southWest: { lat: ymin, lng: xmin },
        _northEast: { lat: ymax, lng: xmax }
      } = o);
      if (!isDef(this.srs))
        this.srs = "EPSG:4326";
    } else if (isLeafletBoundsJSON(o)) {
      ({
        min: { x: xmin, y: ymin },
        max: { x: xmax, y: ymax }
      } = o);
    } else if (isAry(o) && o.length === 2 && o.every((it) => hasKeys(it, ["x", "y"]))) {
      [{ x: xmin, y: ymin }, { x: xmax, y: ymax }] = o;
    } else if (isObj(o) && hasKeys(o, ["x", "y"]) && isNum(o.x) && isNum(o.y)) {
      xmin = xmax = o.x;
      ymin = ymax = o.y;
      if (hasKey(o, "spatialReference") && hasKey(o.spatialReference, "wkid")) {
        if (!isDef(this.srs))
          this.srs = normalize(o.spatialReference.wkid);
      }
    } else if (isObj(o) && hasKeys(o, ["xmin", "xmax", "ymin", "ymax"])) {
      ({ xmin, xmax, ymin, ymax } = o);
      const keys = ["srs", "crs", "proj", "projection"];
      for (let i = 0; i < keys.length; i++) {
        const k = keys[i];
        const v = o[k];
        const normalized = normalize(v);
        if (normalized) {
          this.srs = normalized;
          break;
        }
      }
      if (!this.srs && isDef(o.srs)) {
        this.srs = o.srs;
      }
    } else if (isAry(o) && o.length === 2 && allNums(o)) {
      xmin = xmax = o[0];
      ymin = ymax = o[1];
    } else if (isObj(o) && hasFuncs(o, ["getCoordinates"])) {
      const xy = o.getCoordinates();
      xmin = xmax = xy[0];
      ymin = ymax = xy[1];
    } else if (isObj(o) && hasKey(o, "bbox") && o.bbox.length === 4 && allNums(o)) {
      [xmin, ymin, xmax, ymax] = o.bbox;
    } else if (hasObj(o, "_bounds") && isLeafletLatLngBounds(o._bounds)) {
      const { _bounds } = o;
      xmin = _bounds.getWest(), xmax = _bounds.getEast(), ymin = _bounds.getSouth(), ymax = _bounds.getNorth();
      if (!this.srs)
        this.srs = "EPSG:4326";
    } else if (isObj(o) && isObj(o._bounds) && hasObjs(o._bounds, ["_southWest", "_northEast"])) {
      ({ lat: ymin, lng: xmin } = o._bounds._southWest);
      ({ lat: ymax, lng: xmax } = o._bounds._northEast);
      if (!isDef(this.srs))
        this.srs = "EPSG:4326";
    } else if (isStr(o) && o.toLowerCase().includes("envelope")) {
      const envelope = (0, import_geography_markup_language.Envelope)(o);
      if (envelope.corners) {
        [[xmin, ymin], [xmax, ymax]] = envelope.corners;
      }
      if (envelope.srs) {
        if (envelope.srs.startsWith("urn") && envelope.srs.includes("EPSG:")) {
          this.srs = "EPSG:" + envelope.srs.split(":").pop();
        } else if (/^EPSG:\d+/.test(envelope.srs)) {
          this.srs = envelope.srs;
        }
      }
    } else {
      throw new Error("[geo-extent] unknown format");
    }
    this.xmin = xmin;
    this.xmin_str = xmin_str || xmin.toString();
    this.ymin = ymin;
    this.ymin_str = ymin_str || ymin.toString();
    this.xmax = xmax;
    this.xmax_str = xmax_str || xmax.toString();
    this.ymax = ymax;
    this.ymax_str = ymax_str || ymax.toString();
    this.width_str = (0, import_subtract.default)(this.xmax_str, this.xmin_str);
    this.width = Number(this.width_str);
    this.height_str = (0, import_subtract.default)(this.ymax_str, this.ymin_str);
    this.height = Number(this.height_str);
    this.bottomLeft = { x: xmin, y: ymin };
    this.bottomRight = { x: xmax, y: ymin };
    this.topLeft = { x: xmin, y: ymax };
    this.topRight = { x: xmax, y: ymax };
    this.leafletBounds = [
      [this.ymin, this.xmin],
      [this.ymax, this.xmax]
    ];
    this.area_str = (0, import_multiply.default)(this.width_str, this.height_str);
    this.area = Number(this.area_str);
    this.perimeter_str = (0, import_add.default)((0, import_multiply.default)(this.width_str, "2"), (0, import_multiply.default)(this.height_str, "2"));
    this.perimeter = Number(this.perimeter_str);
    this.bbox = [xmin, ymin, xmax, ymax];
    this.bbox_str = [this.xmin_str, this.ymin_str, this.xmax_str, this.ymax_str];
    this.center_str = {
      x: avg(xmin_str || xmin, xmax_str || xmax),
      y: avg(ymin_str || ymin, ymax_str || ymax)
    };
    this.center = { x: Number(this.center_str.x), y: Number(this.center_str.y) };
    this.str = this.bbox_str.join(",");
    this.wkt = wkt(this.bbox_str);
    this.ewkt = (this.srs?.startsWith("EPSG:") ? this.srs.replace("EPSG:", "SRID=") + ";" : "") + this.wkt;
    this.js = `new GeoExtent([${this.bbox_str.join(", ")}]${this.srs ? `, { srs: ${JSON.stringify(this.srs)} }` : ""})`;
  }
  _pre(_this, _other) {
    _other = new this.constructor(_other);
    if (!isDef(_this.srs) && !isDef(_other.srs)) {
    } else if (isDef(_this.srs) && !isDef(_other.srs)) {
      _other = new _this.constructor({ ..._other, srs: _this.srs });
    } else if (!isDef(_this.srs) && isDef(_other.srs)) {
      _this = new _this.constructor({ ..._this, srs: _other.srs });
    } else if (isDef(_this.srs) && isDef(_other.srs) && _this.srs !== _other.srs) {
      _other = _other.reproj(_this.srs);
    } else if (isDef(_this.srs) && isDef(_other.srs) && _this.srs === _other.srs) {
    } else {
      throw "UH OH";
    }
    return [_this, _other];
  }
  clone() {
    return new this.constructor(this);
  }
  _contains(other, { quiet = false } = { quiet: false }) {
    try {
      const [_this, _other] = this._pre(this, other);
      return (0, import_boolean_contains.default)(_this.bbox, _other.bbox);
    } catch (error) {
      if (!quiet)
        throw error;
    }
  }
  contains(other, { debug_level = 0, quiet = true } = { debug_level: 0, quiet: true }) {
    const result = this._contains(other, { quiet: true });
    if (typeof result === "boolean")
      return result;
    if (isDef(this.srs) && isDef(other.srs)) {
      try {
        const this2 = this.reproj(other.srs);
        const result2 = this2._contains(other, { quiet: true });
        if (typeof result2 === "boolean")
          return result2;
      } catch (error) {
        if (debug_level >= 1)
          console.error(error);
      }
      try {
        const this4326 = this.reproj(4326);
        const other4326 = other.reproj(4326);
        const result4326 = this4326._contains(other4326, { quiet: true });
        if (typeof result4326 === "boolean")
          return result4326;
      } catch (error) {
        if (debug_level >= 1)
          console.error(error);
      }
    }
    if (!quiet)
      throw new Error(
        `[geo-extent] failed to determine if ${this.bbox} in srs ${this.srs} contains ${other.bbox} in srs ${other.srs}`
      );
  }
  // should return null if no overlap
  crop(other) {
    other = new this.constructor(other);
    if (!this.overlaps(other)) {
      return null;
    }
    if (other.contains(this))
      return this.clone();
    if (other.srs === "EPSG:4326" && (other.xmin < -180 || other.xmax > 180)) {
      const parts = other.unwrap();
      let cropped = parts.map((it) => this.crop(it));
      cropped = cropped.filter(Boolean);
      if (cropped.length === 0)
        return null;
      let combo = cropped[0];
      for (let i = 1; i < cropped.length; i++)
        combo = combo.combine(cropped[i]);
      return combo;
    }
    let another = isDef(this.srs) && isDef(other.srs) ? other.reproj(this.srs, { quiet: true }) : other.clone();
    if (another) {
      if (!this.overlaps(another))
        return null;
      const xmin = Math.max(this.xmin, another.xmin);
      const ymin = Math.max(this.ymin, another.ymin);
      const xmax = Math.min(this.xmax, another.xmax);
      const ymax = Math.min(this.ymax, another.ymax);
      return new this.constructor([xmin, ymin, xmax, ymax], { srs: this.srs });
    }
    const this4326 = isDef(this.srs) ? this.reproj(4326) : this;
    const other4326 = isDef(other.srs) ? other.reproj(4326) : other;
    const [aMinLon, aMinLat, aMaxLon, aMaxLat] = this4326.bbox;
    const [bMinLon, bMinLat, bMaxLon, bMaxLat] = other4326.bbox;
    if (!this4326.overlaps(other4326))
      return null;
    const minLon = Math.max(aMinLon, bMinLon);
    const minLat = Math.max(aMinLat, bMinLat);
    const maxLon = Math.min(aMaxLon, bMaxLon);
    const maxLat = Math.min(aMaxLat, bMaxLat);
    return new this.constructor([minLon, minLat, maxLon, maxLat], { srs: 4326 }).reproj(this.srs);
  }
  // add two extents together
  // result is a new extent in the projection of this
  combine(other) {
    if (isDef(this.srs) && isDef(other.srs)) {
      other = other.reproj(this.srs);
    }
    const xmin = Math.min(this.xmin, other.xmin);
    const xmax = Math.max(this.xmax, other.xmax);
    const ymin = Math.min(this.ymin, other.ymin);
    const ymax = Math.max(this.ymax, other.ymax);
    return new this.constructor({ xmin, xmax, ymin, ymax, srs: this.srs });
  }
  equals(other, { digits = 13, strict = true } = { digits: 13, strict: true }) {
    other = new this.constructor(other);
    if (isDef(this.srs) && isDef(other.srs)) {
      other = other.reproj(this.srs);
    } else if (strict && isDef(this.srs) !== !isDef(this.srs)) {
      return false;
    }
    const str1 = this.bbox.map((n) => n.toFixed(digits)).join(",");
    const str2 = other.bbox.map((n) => n.toFixed(digits)).join(",");
    return str1 === str2;
  }
  /*
    shouldn't accept GeoJSON as input because the extent created from a GeoJSON
    might overlap, but the actual polygon wouldn't.
    Or at least make the user have to be explicit about the functionality via
    a flag like overlaps(geojson, { strict: false })
  */
  _overlaps(other, { quiet = false } = { quiet: false }) {
    try {
      const [_this, _other] = this._pre(this, other);
      return (0, import_boolean_intersects.default)(_this.bbox, _other.bbox);
    } catch (error) {
      if (quiet)
        return;
      else
        throw error;
    }
  }
  overlaps(other, { quiet = true, strict = false } = { quiet: true, strict: false }) {
    if (this._overlaps(other, { quiet })) {
      return true;
    }
    if (strict)
      return false;
    if (this.srs === other.srs || !this.srs && !other.srs) {
      return false;
    }
    other = new this.constructor(other);
    if (other._overlaps(this, { quiet: true })) {
      return true;
    }
    if (this.srs && other.srs) {
      if (this.reproj(4326)._overlaps(other.reproj(4326))) {
        return true;
      }
    }
    return false;
  }
  reproj(to, {
    allow_infinity = false,
    debug_level = 0,
    density = "high",
    shrink = false,
    shrink_density = 100,
    split = true,
    quiet = false
  } = {
    allow_infinity: false,
    debug_level: 0,
    density: "high",
    shrink: false,
    split: true,
    quiet: false
  }) {
    to = normalize(to);
    if (isDef(this.srs) && this.srs === normalize(to))
      return this.clone();
    if (!isDef(this.srs)) {
      if (quiet)
        return;
      throw new Error(`[geo-extent] cannot reproject ${this.bbox} without a projection set`);
    }
    if (this.srs === "EPSG:4326" && (this.xmin < -180 || this.xmax > 180)) {
      try {
        const parts = this.unwrap().map((ext) => ext.reproj(to));
        let combo = parts[0];
        for (let i = 1; i < parts.length; i++)
          combo = combo.combine(parts[i]);
        return combo;
      } catch (error) {
        if (quiet)
          return;
        throw error;
      }
    }
    if (density === "lowest")
      density = 0;
    else if (density === "low")
      density = 1;
    else if (density === "medium")
      density = 10;
    else if (density === "high")
      density = 100;
    else if (density === "higher")
      density = 1e3;
    else if (density === "highest")
      density = 1e4;
    let reprojected;
    try {
      const options = {
        bbox: this.bbox,
        density,
        from: this.srs,
        split,
        to
      };
      reprojected = (0, import_reproject_bbox.default)(options);
    } catch (error) {
      if (debug_level)
        console.error(error);
    }
    if (reprojected?.every(isFinite)) {
      return new _GeoExtent(reprojected, { srs: to });
    }
    if (to !== 4326) {
      let bbox_4326;
      try {
        bbox_4326 = (0, import_reproject_bbox.default)({
          bbox: this.bbox,
          density,
          from: this.srs,
          split,
          to: 4326
        });
      } catch (error) {
        if (debug_level)
          console.error("failed to create intermediary bbox in EPSG:4326");
      }
      if (bbox_4326) {
        try {
          reprojected = (0, import_reproject_bbox.default)({
            bbox: bbox_4326,
            density,
            from: 4326,
            split,
            to
          });
        } catch (err) {
          if (debug_level)
            console.error(`failed to reproject from intermediary bbox ${bbox_4326} in 4326 to ${to}`);
        }
      }
    }
    if (reprojected && (allow_infinity || reprojected?.every(isFinite))) {
      return new _GeoExtent(reprojected, { srs: to });
    }
    if (shrink) {
      try {
        if (shrink_density === "lowest")
          shrink_density = 1;
        else if (shrink_density === "low")
          shrink_density = 2;
        else if (shrink_density === "medium")
          shrink_density = 10;
        else if (shrink_density === "high")
          shrink_density = 100;
        else if (shrink_density === "higher")
          shrink_density = 1e3;
        else if (shrink_density === "highest")
          shrink_density = 1e4;
        reprojected = (0, import_reproject_bbox.default)({
          bbox: this.bbox,
          density: shrink_density,
          from: this.srs,
          nan_strategy: "skip",
          split: true,
          to
        });
      } catch (err) {
        if (debug_level)
          console.error(`failed to reproject from bbox ${this.bbox} with shrinking to ${to}`);
      }
    }
    if (reprojected && (allow_infinity || reprojected?.every(isFinite))) {
      return new _GeoExtent(reprojected, { srs: to });
    } else if (quiet) {
      return;
    } else {
      throw new Error(`[geo-extent] failed to reproject ${this.bbox} from ${this.srs} to ${to}`);
    }
  }
  unwrap() {
    const { xmin, ymin, xmax, ymax, srs: srs2 } = this;
    if (srs2 !== "EPSG:4326")
      return [this.clone()];
    if (xmin > -180 && xmax < 180)
      return [this.clone()];
    const bboxes = (0, import_unwrap.default)(this.bbox, [-180, -90, 180, 90]);
    return bboxes.map((bbox) => new this.constructor(bbox, { srs: 4326 }));
  }
  asEsriJSON() {
    return {
      xmin: this.xmin,
      ymin: this.ymin,
      xmax: this.xmax,
      ymax: this.ymax,
      spatialReference: {
        wkid: this.srs
      }
    };
  }
  asGeoJSON({ density = 0 } = { density: 0 }) {
    const will_reproject = ![void 0, null, "EPSG:4326"].includes(this.srs);
    let geojson = {
      type: "Feature",
      properties: {},
      geometry: {
        type: "Polygon",
        coordinates: (0, import_dense_polygon.default)(this.bbox, { density })
      }
    };
    if (will_reproject) {
      geojson = (0, import_reproject_geojson.default)(geojson, { from: this.srs, to: "EPSG:4326", in_place: true });
    }
    geojson.bbox = (0, import_bbox_array.default)(geojson.geometry.coordinates[0]);
    return geojson;
  }
  asObj() {
    const res = {};
    for (let k in this) {
      const v = this[k];
      if (!isFunc(v)) {
        res[k] = v;
      }
    }
    return res;
  }
};
if (typeof define === "function" && define.amd)
  define(function() {
    return GeoExtent;
  });
if (typeof self === "object")
  self.GeoExtent = GeoExtent;
if (typeof window === "object")
  window.GeoExtent = GeoExtent;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GeoExtent
});

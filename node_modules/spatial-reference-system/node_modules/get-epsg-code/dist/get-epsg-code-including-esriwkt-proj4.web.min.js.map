{
  "version": 3,
  "sources": ["../node_modules/b64ab/b64ab.js", "../node_modules/xml-utils/index-of-match.js", "../node_modules/xml-utils/index-of-match-end.js", "../node_modules/xml-utils/count-substring.js", "../node_modules/xml-utils/find-tag-by-name.js", "../node_modules/xml-utils/find-tags-by-name.js", "../node_modules/xml-utils/find-tags-by-path.js", "../node_modules/xml-utils/find-tag-by-path.js", "../node_modules/xml-utils/get-attribute.js", "../node_modules/wkt-parser/wkt.build.js", "../node_modules/utm-utils/src/getCodeFromEsriWKT.js", "../node_modules/utm-utils/src/getCodeFromProjString.js", "../lib/hash.js", "../node_modules/wkt-crs/wkt-crs.js", "../lib/normalize/wkt.js", "../lib/normalize/esriwkt.js", "../lib/normalize/proj4.js", "../node_modules/is-wkt/is-wkt.js", "../lib/enums.js", "../lib/get-proj-type.js", "../lib/parse/proj4js.js", "../lib/data/esriwkt-proj4.json", "../lib/lookup-esriwkt-proj4.js"],
  "sourcesContent": ["var b64ab = {};\n\nb64ab.char2bits = {\n  0: \"110100\", 1: \"110101\", 2: \"110110\", 3: \"110111\", 4: \"111000\",\n  5: \"111001\", 6: \"111010\", 7: \"111011\", 8: \"111100\", 9: \"111101\",\n  A: \"000000\", Q: \"010000\", g: \"100000\", w: \"110000\", B: \"000001\",\n  R: \"010001\", h: \"100001\", x: \"110001\", C: \"000010\", S: \"010010\",\n  i: \"100010\", y: \"110010\", D: \"000011\", T: \"010011\", j: \"100011\",\n  z: \"110011\", E: \"000100\", U: \"010100\", k: \"100100\", F: \"000101\",\n  V: \"010101\", l: \"100101\", G: \"000110\", W: \"010110\", m: \"100110\",\n  H: \"000111\", X: \"010111\", n: \"100111\", I: \"001000\", Y: \"011000\",\n  o: \"101000\", J: \"001001\", Z: \"011001\", p: \"101001\", K: \"001010\",\n  a: \"011010\", q: \"101010\", L: \"001011\", b: \"011011\", r: \"101011\",\n  M: \"001100\", c: \"011100\", s: \"101100\", N: \"001101\", d: \"011101\",\n  t: \"101101\", O: \"001110\", e: \"011110\", u: \"101110\", \"+\": \"111110\",\n  P: \"001111\", f: \"011111\", v: \"101111\", \"/\": \"111111\"\n};\n\nb64ab.toArrayBuffer = function toArrayBuffer (b64) {\n  var char2bits = b64ab.char2bits;\n  var eqct = 0;\n  for (let i = b64.length; i >= 0; i--) if (b64[i] === \"=\") eqct++;\n  var slen = (b64.length - eqct);\n  var l = Math.floor(.75 * slen);\n  var u8 = new Uint8Array(l);\n  var s = \"\";\n  for (var i = 0; i < slen; i++) {\n    var char = b64[i];\n    if (char === \"=\") break;\n    s += char2bits[char];\n    if (s.length >= 8) {\n      u8[Math.floor(.75 * i)] = parseInt(s.substring(0, 8), 2);\n      s = s.substring(8);\n    }\n  }\n  return u8.buffer;\n};\n\nb64ab.toBase64String = function toBase64String(ab) {\n  if (!b64ab.bits2char) {\n    b64ab.bits2char = {};\n    for (let char in b64ab.char2bits) b64ab.bits2char[b64ab.char2bits[char]] = char;\n  }\n  var bits2char = b64ab.bits2char;\n  var u8 = new Uint8Array(ab);\n  var s = \"\";\n  var b = \"\";\n  for (var i = 0; i < u8.length; i++) {\n    var n = u8[i].toString(2);\n    while (n.length < 8) n = \"0\" + n;\n    b += n;\n    while (b.length >= 6) {\n      s += bits2char[b.substring(0, 6)];\n      b = b.substring(6);\n    }\n  }\n  if (b.length > 0) {\n    while (b.length < 6) b += \"0\";\n    s += bits2char[b];\n  }\n  while (s.length % 4 !== 0) {\n    s += \"=\"\n  }\n  return s;\n};\n\nif (typeof define === \"function\" && define.amd) {\n  define(function() { return b64ab })\n}\n\nif (typeof module === \"object\") module.exports = b64ab;\nif (typeof window === \"object\") window.b64ab = b64ab;\nif (typeof self === \"object\") self.b64ab = b64ab;\n", "function indexOfMatch(xml, pattern, startIndex) {\n  const re = new RegExp(pattern);\n  const match = re.exec(xml.slice(startIndex));\n  if (match) return startIndex + match.index;\n  else return -1;\n}\n\nmodule.exports = indexOfMatch;\nmodule.exports.default = indexOfMatch;\n", "function indexOfMatchEnd(xml, pattern, startIndex) {\n  const re = new RegExp(pattern);\n  const match = re.exec(xml.slice(startIndex));\n  if (match) return startIndex + match.index + match[0].length - 1;\n  else return -1;\n}\n\nmodule.exports = indexOfMatchEnd;\nmodule.exports.default = indexOfMatchEnd;\n", "function countSubstring(string, substring) {\n  const pattern = new RegExp(substring, \"g\");\n  const match = string.match(pattern);\n  return match ? match.length : 0;\n}\n\nmodule.exports = countSubstring;\nmodule.exports.default = countSubstring;\n", "const indexOfMatch = require(\"./index-of-match.js\");\nconst indexOfMatchEnd = require(\"./index-of-match-end.js\");\nconst countSubstring = require(\"./count-substring.js\");\n\nfunction findTagByName(xml, tagName, options) {\n  const debug = (options && options.debug) || false;\n  const nested = !(options && typeof options.nested === false);\n\n  const startIndex = (options && options.startIndex) || 0;\n\n  if (debug) console.log(\"[xml-utils] starting findTagByName with\", tagName, \" and \", options);\n\n  const start = indexOfMatch(xml, `\\<${tagName}[ \\n\\>\\/]`, startIndex);\n  if (debug) console.log(\"[xml-utils] start:\", start);\n  if (start === -1) return undefined;\n\n  const afterStart = xml.slice(start + tagName.length);\n\n  let relativeEnd = indexOfMatchEnd(afterStart, \"^[^<]*[ /]>\", 0);\n\n  const selfClosing = relativeEnd !== -1 && afterStart[relativeEnd - 1] === \"/\";\n  if (debug) console.log(\"[xml-utils] selfClosing:\", selfClosing);\n\n  if (selfClosing === false) {\n    // check if tag has subtags with the same name\n    if (nested) {\n      let startIndex = 0;\n      let openings = 1;\n      let closings = 0;\n      while ((relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", startIndex)) !== -1) {\n        const clip = afterStart.substring(startIndex, relativeEnd + 1);\n        openings += countSubstring(clip, \"<\" + tagName + \"[ \\n\\t>]\");\n        closings += countSubstring(clip, \"</\" + tagName + \">\");\n        // we can't have more openings than closings\n        if (closings >= openings) break;\n        startIndex = relativeEnd;\n      }\n    } else {\n      relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", 0);\n    }\n  }\n\n  const end = start + tagName.length + relativeEnd + 1;\n  if (debug) console.log(\"[xml-utils] end:\", end);\n  if (end === -1) return undefined;\n\n  const outer = xml.slice(start, end);\n  // tag is like <gml:identifier codeSpace=\"OGP\">urn:ogc:def:crs:EPSG::32617</gml:identifier>\n\n  let inner;\n  if (selfClosing) {\n    inner = null;\n  } else {\n    inner = outer.slice(outer.indexOf(\">\") + 1, outer.lastIndexOf(\"<\"));\n  }\n\n  return { inner, outer, start, end };\n}\n\nmodule.exports = findTagByName;\nmodule.exports.default = findTagByName;\n", "const findTagByName = require(\"./find-tag-by-name.js\");\n\nfunction findTagsByName(xml, tagName, options) {\n  const tags = [];\n  const debug = (options && options.debug) || false;\n  const nested = options && typeof options.nested === \"boolean\" ? options.nested : true;\n  let startIndex = (options && options.startIndex) || 0;\n  let tag;\n  while ((tag = findTagByName(xml, tagName, { debug, startIndex }))) {\n    if (nested) {\n      startIndex = tag.start + 1 + tagName.length;\n    } else {\n      startIndex = tag.end;\n    }\n    tags.push(tag);\n  }\n  if (debug) console.log(\"findTagsByName found\", tags.length, \"tags\");\n  return tags;\n}\n\nmodule.exports = findTagsByName;\nmodule.exports.default = findTagsByName;\n", "const findTagsByName = require(\"./find-tags-by-name.js\");\n\nfunction findTagsByPath(xml, path, options) {\n  const debug = (options && options.debug) || false;\n  const returnOnFirst = (options && options.returnOnFirst) || false;\n  let tags = findTagsByName(xml, path.shift(), { debug, nested: false });\n  if (debug) console.log(\"first tags are:\", tags);\n  for (let pathIndex = 0; pathIndex < path.length; pathIndex++) {\n    const tagName = path[pathIndex];\n    if (debug) console.log(\"tagName:\", tagName);\n    let allSubTags = [];\n    for (let tagIndex = 0; tagIndex < tags.length; tagIndex++) {\n      const tag = tags[tagIndex];\n      const subTags = findTagsByName(tag.outer, tagName, {\n        debug,\n        startIndex: 1\n      });\n      if (debug) console.log(\"subTags.length:\", subTags.length);\n      if (subTags.length > 0) {\n        subTags.forEach(subTag => {\n          (subTag.start += tag.start), (subTag.end += tag.start);\n        });\n        if (returnOnFirst && pathIndex === path.length - 1) return [subTags[0]];\n        allSubTags = allSubTags.concat(subTags);\n      }\n    }\n    tags = allSubTags;\n  }\n  return tags;\n}\n\nmodule.exports = findTagsByPath;\nmodule.exports.default = findTagsByPath;\n", "const findTagsByPath = require(\"./find-tags-by-path.js\");\n\nfunction findTagByPath(xml, path, options) {\n  const debug = (options && options.debug) || false;\n  const found = findTagsByPath(xml, path, { debug, returnOnFirst: true });\n  if (Array.isArray(found) && found.length === 1) return found[0];\n  else return undefined;\n}\nmodule.exports = findTagByPath;\nmodule.exports.default = findTagByPath;\n", "function getAttribute(tag, attributeName, options) {\n  const debug = (options && options.debug) || false;\n  if (debug) console.log(\"[xml-utils] getting \" + attributeName + \" in \" + tag);\n\n  const xml = typeof tag === \"object\" ? tag.outer : tag;\n\n  // only search for attributes in the opening tag\n  const opening = xml.slice(0, xml.indexOf(\">\") + 1);\n\n  const quotechars = ['\"', \"'\"];\n  for (let i = 0; i < quotechars.length; i++) {\n    const char = quotechars[i];\n    const pattern = attributeName + \"\\\\=\" + char + \"([^\" + char + \"]*)\" + char;\n    if (debug) console.log(\"[xml-utils] pattern:\", pattern);\n\n    const re = new RegExp(pattern);\n    const match = re.exec(opening);\n    if (debug) console.log(\"[xml-utils] match:\", match);\n    if (match) return match[1];\n  }\n}\n\nmodule.exports = getAttribute;\nmodule.exports.default = getAttribute;\n", "'use strict';\n\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84_]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/;\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\nParser.prototype.readCharicter = function() {\n  var char = this.text[this.place++];\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n      char = this.text[this.place++];\n    }\n  }\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n    case KEYWORD:\n      return this.keyword(char)\n    case QUOTED:\n      return this.quoted(char);\n    case AFTERQUOTE:\n      return this.afterquote(char);\n    case NUMBER:\n      return this.number(char);\n    case ENDED:\n      return;\n  }\n};\nParser.prototype.afterquote = function(char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n};\nParser.prototype.afterItem = function(char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (char === ']') {\n    this.level--;\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\nParser.prototype.number = function(char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n};\nParser.prototype.quoted = function(char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n  this.word += char;\n  return;\n};\nParser.prototype.keyword = function(char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n};\nParser.prototype.neutral = function(char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n};\nParser.prototype.output = function() {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n  if (this.state === ENDED) {\n    return this.root;\n  }\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}\n\nfunction mapit(obj, key, value) {\n  if (Array.isArray(key)) {\n    value.unshift(key);\n    key = null;\n  }\n  var thing = key ? {} : obj;\n\n  var out = value.reduce(function(newObj, item) {\n    sExpr(item, newObj);\n    return newObj\n  }, thing);\n  if (key) {\n    obj[key] = out;\n  }\n}\n\nfunction sExpr(v, obj) {\n  if (!Array.isArray(v)) {\n    obj[v] = true;\n    return;\n  }\n  var key = v.shift();\n  if (key === 'PARAMETER') {\n    key = v.shift();\n  }\n  if (v.length === 1) {\n    if (Array.isArray(v[0])) {\n      obj[key] = {};\n      sExpr(v[0], obj[key]);\n      return;\n    }\n    obj[key] = v[0];\n    return;\n  }\n  if (!v.length) {\n    obj[key] = true;\n    return;\n  }\n  if (key === 'TOWGS84') {\n    obj[key] = v;\n    return;\n  }\n  if (key === 'AXIS') {\n    if (!(key in obj)) {\n      obj[key] = [];\n    }\n    obj[key].push(v);\n    return;\n  }\n  if (!Array.isArray(key)) {\n    obj[key] = {};\n  }\n\n  var i;\n  switch (key) {\n    case 'UNIT':\n    case 'PRIMEM':\n    case 'VERT_DATUM':\n      obj[key] = {\n        name: v[0].toLowerCase(),\n        convert: v[1]\n      };\n      if (v.length === 3) {\n        sExpr(v[2], obj[key]);\n      }\n      return;\n    case 'SPHEROID':\n    case 'ELLIPSOID':\n      obj[key] = {\n        name: v[0],\n        a: v[1],\n        rf: v[2]\n      };\n      if (v.length === 4) {\n        sExpr(v[3], obj[key]);\n      }\n      return;\n    case 'PROJECTEDCRS':\n    case 'PROJCRS':\n    case 'GEOGCS':\n    case 'GEOCCS':\n    case 'PROJCS':\n    case 'LOCAL_CS':\n    case 'GEODCRS':\n    case 'GEODETICCRS':\n    case 'GEODETICDATUM':\n    case 'EDATUM':\n    case 'ENGINEERINGDATUM':\n    case 'VERT_CS':\n    case 'VERTCRS':\n    case 'VERTICALCRS':\n    case 'COMPD_CS':\n    case 'COMPOUNDCRS':\n    case 'ENGINEERINGCRS':\n    case 'ENGCRS':\n    case 'FITTED_CS':\n    case 'LOCAL_DATUM':\n    case 'DATUM':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      return;\n    default:\n      i = -1;\n      while (++i < v.length) {\n        if (!Array.isArray(v[i])) {\n          return sExpr(v, obj[key]);\n        }\n      }\n      return mapit(obj, key, v);\n  }\n}\n\nvar D2R = 0.01745329251994329577;\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.AXIS) {\n    var axisOrder = '';\n    for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\n      var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];\n      if (axis[0].indexOf('north') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north')) {\n        axisOrder += 'n';\n      } else if (axis[0].indexOf('south') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south')) {\n        axisOrder += 's';\n      } else if (axis[0].indexOf('east') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east')) {\n        axisOrder += 'e';\n      } else if (axis[0].indexOf('west') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west')) {\n        axisOrder += 'w';\n      }\n    }\n    if (axisOrder.length === 2) {\n      axisOrder += 'u';\n    }\n    if (axisOrder.length === 3) {\n      wkt.axis = axisOrder;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode.slice(-6) === '_ferro') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 6);\n    }\n    if (wkt.datumCode.slice(-8) === '_jakarta') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 8);\n    }\n    if (~wkt.datumCode.indexOf('belge')) {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65')\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_1', 'Latitude of 1st standard parallel'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['standard_parallel_2', 'Latitude of 2nd standard parallel'],\n    ['false_easting', 'False_Easting'],\n    ['false_easting', 'False easting'],\n    ['false-easting', 'Easting at false origin'],\n    ['false_northing', 'False_Northing'],\n    ['false_northing', 'False northing'],\n    ['false_northing', 'Northing at false origin'],\n    ['central_meridian', 'Central_Meridian'],\n    ['central_meridian', 'Longitude of natural origin'],\n    ['central_meridian', 'Longitude of false origin'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['latitude_of_origin', 'Latitude of natural origin'],\n    ['latitude_of_origin', 'Latitude of false origin'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_Of_Center'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longitude_of_center', 'Longitude_of_center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['azimuth', 'Azimuth'],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  } else if (!wkt.lat_ts && wkt.lat0 && wkt.projName === 'Polar_Stereographic') {\n    wkt.lat_ts = wkt.lat0;\n    wkt.lat0 = d2r(wkt.lat0 > 0 ? 90 : -90);\n  }\n}\nvar index = function(wkt) {\n  var lisp = parseString(wkt);\n  var type = lisp.shift();\n  var name = lisp.shift();\n  lisp.unshift(['name', name]);\n  lisp.unshift(['type', type]);\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj;\n};\n\nmodule.exports = index;\n", "function getCodeFromEsriWKT(esri_wkt) {\n  if (!esri_wkt) return;\n  const match = /PROJCS\\[\\\"([^\"]+)\\\"/.exec(esri_wkt);\n  if (!match) return;\n  const name = match[1];\n  if (name.match(/^WGS_1984_UTM_Zone_\\d{1,2}(N|S)$/)) {\n    const last_part = name.split(\"_\").pop();\n    const zone = last_part.substring(0, last_part.length - 1);\n    const hemisphere = last_part.substring(last_part.length - 1) == \"N\" ? 6 : 7;\n    return Number.parseInt(\"32\" + hemisphere + zone);\n  } else if (name.match(/^NAD_1983_UTM_Zone_\\d{1,2}N$/)) {\n    const last_part = name.split(\"_\").pop();\n    const zone = last_part.substring(0, last_part.length - 1);\n    return Number.parseInt(\"269\" + zone);\n  }\n}\n\nif (typeof define === \"function\" && define.amd) {\n  define(function () {\n    return getCodeFromEsriWKT;\n  });\n}\n\nif (typeof module === \"object\") {\n  module.exports = getCodeFromEsriWKT;\n  module.exports.default = getCodeFromEsriWKT;\n}\n", "function getCodeFromProjString(proj) {\n  if (proj.includes(\"+proj=utm\") && proj.includes(\"+zone=\")) {\n    const parts = proj.split(\" \");\n    const zone = parts.find(part => part.startsWith(\"+zone=\")).split(\"=\")[1];\n    const south = proj.includes(\"+south\");\n\n    let ellps = parts.find(part => part.startsWith(\"+ellps=\"));\n    if (ellps) ellps = ellps.split(\"=\")[1];\n\n    if (ellps === \"GRS80\" && south === false) {\n      return Number.parseInt(\"269\" + zone);\n    } else {\n      const hemisphere = south ? \"7\" : \"6\";\n      return Number.parseInt(\"32\" + hemisphere + zone);\n    }\n  }\n}\n\nif (typeof define === \"function\" && define.amd) {\n  define(function () {\n    return getCodeFromProjString;\n  });\n}\n\nif (typeof module === \"object\") {\n  module.exports = getCodeFromProjString;\n  module.exports.default = getCodeFromProjString;\n}\n", "function hash32(string) {\n  // sometimes might have extra space at end from epsg.io\n  string = string.trim();\n\n  // replace new lines with spaces\n  string = string.replace(/\\n/g, \" \");\n\n  // replace tabs with spaces\n  string = string.replace(/\\t/g, \" \");\n\n  // remove any extra spaces\n  string = string.replace(/ +/g, \" \");\n\n  let hash = 0;\n  let i;\n  let chr;\n  if (string.length === 0) return hash;\n  const string_length = string.length;\n  for (i = 0; i < string_length; i++) {\n    chr = string.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  // convert to 16-bit\n  // hash = Math.round(hash / Math.pow(2, 16));\n\n  return hash;\n}\n\nmodule.exports = hash32;\nmodule.exports.default = hash32;\n", "function sort(data, { keywords } = {}) {\n  const keys = Object.keys(data).filter(k => !/\\d+/.test(k));\n\n  if (!keywords) {\n    keywords = [];\n    // try to find multiples\n    const counts = {};\n    if (Array.isArray(data)) {\n      data.forEach(it => {\n        if (Array.isArray(it) && it.length >= 2 && typeof it[1] === \"string\") {\n          const k = it[0];\n          if (!counts[k]) counts[k] = 0;\n          counts[k]++;\n        }\n      });\n      for (let k in counts) {\n        if (counts[k] > 0) keywords.push(k);\n      }\n    }\n  }\n\n  keys.forEach(key => {\n    data[key] = sort(data[key]);\n  });\n\n  keywords.forEach(key => {\n    const indices = [];\n    const params = [];\n    data.forEach((item, i) => {\n      if (Array.isArray(item) && item[0] === key) {\n        indices.push(i);\n        params.push(item);\n      }\n    });\n\n    params.sort((a, b) => {\n      a = a[1].toString();\n      b = b[1].toString();\n      return a < b ? -1 : a > b ? 1 : 0;\n    });\n\n    // replace in order\n    params.forEach((param, i) => {\n      data[indices[i]] = param;\n    });\n  });\n\n  return data;\n}\n\nfunction parse(wkt, options) {\n  const raw = typeof options === \"object\" && options.raw === true;\n  const debug = typeof options === \"object\" && options.debug === true;\n\n  if (debug) console.log(\"[wktcrs] parse starting with\\n\", wkt);\n\n  // move all keywords into first array item slot\n  // from PARAM[12345, 67890] to [\"PARAM\", 12345, 67890]\n  wkt = wkt.replace(/[A-Z][A-Z\\d_]+\\[/gi, function (match) {\n    return '[\"' + match.substr(0, match.length - 1) + '\",';\n  });\n\n  // wrap variables in strings\n  // from [...,NORTH] to [...,\"NORTH\"]\n  wkt = wkt.replace(/, ?([A-Z][A-Z\\d_]+[,\\]])/gi, function (match, p1) {\n    const varname = p1.substr(0, p1.length - 1);\n    return \",\" + '\"' + (raw ? \"raw:\" : \"\") + varname + '\"' + p1[p1.length - 1];\n  });\n\n  if (typeof options === \"object\" && options.raw === true) {\n    // replace all numbers with strings\n    wkt = wkt.replace(/, {0,2}(-?[\\.\\d]+)(?=,|\\])/g, function (match, p1) {\n      return \",\" + '\"' + (raw ? \"raw:\" : \"\") + p1 + '\"';\n    });\n  }\n\n  // str should now be valid JSON\n  if (debug) console.log(\"[wktcrs] json'd wkt: '\" + wkt + \"'\");\n  let data;\n  try {\n    data = JSON.parse(wkt);\n  } catch (error) {\n    console.error(`[wktcrs] failed to parse '${wkt}'`);\n    throw error;\n  }\n\n  if (debug) console.log(\"[wktcrs] json parsed: '\" + wkt + \"'\");\n\n  function process(data, parent) {\n    const kw = data[0];\n\n    // after removing the first element with .shift()\n    // data is now just an array of attributes\n\n    data.forEach(function (it) {\n      if (Array.isArray(it)) {\n        process(it, data);\n      }\n    });\n\n    const kwarr = \"MULTIPLE_\" + kw;\n\n    if (kwarr in parent) {\n      parent[kwarr].push(data);\n    } else if (kw in parent) {\n      parent[kwarr] = [parent[kw], data];\n      delete parent[kw];\n    } else {\n      parent[kw] = data;\n    }\n    return parent;\n  }\n\n  const result = process(data, [data]);\n  if (debug) console.log(\"[wktcrs] parse returning\", result);\n\n  return { data: result };\n}\n\n// convert JSON representation of Well-Known Text\n// back to standard Well-Known Text\nfunction unparse(wkt, options) {\n  if (Array.isArray(wkt) && wkt.length == 1 && Array.isArray(wkt[0])) {\n    wkt = wkt[0]; // ignore first extra wrapper array\n  }\n\n  const [kw, ...attrs] = wkt;\n  const str =\n    kw +\n    \"[\" +\n    attrs\n      .map(attr => {\n        if (Array.isArray(attr)) {\n          return unparse(attr, options).data;\n        } else if (typeof attr === \"number\") {\n          return attr.toString();\n        } else if (typeof attr === \"string\") {\n          // can't automatically convert all caps to varibale\n          // because EPSG is string in AUTHORITY[\"EPSG\", ...]\n          if (attr.startsWith(\"raw:\")) {\n            // convert \"raw:NORTH\" to NORTH\n            return attr.replace(\"raw:\", \"\");\n          } else {\n            return '\"' + attr + '\"';\n          }\n        } else {\n          throw new Error('[wktcrs] unexpected attribute \"' + attr + '\"');\n        }\n      })\n      .join(\",\") +\n    \"]\";\n  return { data: str };\n}\n\nconst _module = { parse, unparse, sort };\nif (typeof define === \"function\")\n  define(function () {\n    return _module;\n  });\nif (typeof module === \"object\") module.exports = _module;\nif (typeof window === \"object\") window.wktcrs = _module;\nif (typeof self === \"object\") self.wktcrs = _module;\n", "const wktcrs = require(\"wkt-crs\");\n\nfunction sort_wkt(wkt) {\n  const { data } = wktcrs.parse(wkt, { raw: true });\n  wktcrs.sort(data);\n  return wktcrs.unparse(data, { raw: true }).data;\n}\n\nfunction normalize_wkt(wkt, { debug = false } = { debug: false }) {\n  wkt = wkt.trim();\n\n  // replace new lines with spaces\n  wkt = wkt.replace(/\\n/g, \" \");\n\n  // replace tabs with spaces\n  wkt = wkt.replace(/\\t/g, \" \");\n\n  // remove any extra spaces\n  wkt = wkt.replace(/ +/g, \" \");\n\n  wkt = wkt.replace(`DATUM[\"D_`, `DATUM[\"`);\n\n  // reduce precision of decimal numbers to 15 digits\n  wkt = wkt.replace(/\\.\\d{16,}/g, n => n.substr(0, 16));\n\n  // replace \\d.0 with 0\n  wkt = wkt.replace(/\\d+\\.0[,\"'\\]]/g, s => s.substring(0, s.indexOf(\".\")) + s.charAt(s.length - 1));\n\n  // replace 1984 with 84\n  // ex: replace WGS_1984_Antarctic_Polar_Stereographic with WGS_84_Antarctic_Polar_Stereographic\n  //     which is what happened with https://epsg.io/3031.esriwkt\n  wkt = wkt.replace(/[_|\"]1984[_|\"]/g, s => s.charAt(0) + \"84\" + s.charAt(s.length - 1));\n\n  // happened in epsg.io/3031.esriwkt\n  // wkt = wkt.replace(/false_easting/g, \"False_Easting\");\n  // wkt = wkt.replace(/false_northing/g, \"False_Northing\");\n\n  // lower case value strings\n  wkt = wkt.replace(/\"[A-Za-z_\\d]+\"/g, s => '\"' + s.substring(1, s.length - 1).toLowerCase() + '\"');\n\n  // sort parameters\n  wkt = sort_wkt(wkt);\n\n  if (debug) console.log('[get-epsg-code] wkt after cleaning: \"' + wkt + '\"');\n  return wkt;\n}\n\nmodule.exports = normalize_wkt;\nmodule.exports.default = normalize_wkt;\n", "const normalize_wkt = require(\"./wkt.js\");\n\nfunction normalize_esriwkt(esriwkt, { debug = false } = { debug: false }) {\n  return normalize_wkt(esriwkt, { debug });\n}\n\nmodule.exports = normalize_esriwkt;\nmodule.exports.default = normalize_esriwkt;\n", "/**\n *\n * @param {String} str - PROJ.4 string\n * @returns {String} normalized PROJ.4 string\n */\nfunction normalize_proj4(str, { debug = false, remove_k1 = true, remove_no_defs = true, remove_title = true, remove_init = true, remove_type = true } = {}) {\n  str = str.trim();\n\n  // replace any accidental extra spaces\n  str = str.replace(/ +/g, \" \");\n\n  // sort params\n  let parts = str\n    .split(/ ?\\+/g)\n    .filter(it => it.trim() !== \"\")\n    .sort();\n\n  // seems like k=1 is interpreted as default\n  // for example https://epsg.io/3031.proj4 dropped it\n  if (remove_k1) parts = parts.filter(it => it !== \"k=1\");\n  if (remove_no_defs) parts = parts.filter(it => it !== \"no_defs\");\n  if (remove_type) parts = parts.filter(it => !it.startsWith(\"type\"));\n  if (remove_init) parts = parts.filter(it => !it.startsWith(\"init\"));\n  if (remove_title) parts = parts.filter(it => !it.startsWith(\"title\"));\n\n  str = parts.map(it => \"+\" + it).join(\" \");\n\n  if (debug) console.log('normalized proj4 string\\nfrom \"' + arguments[0] + '\"\\nto \"' + str + '\"');\n\n  return str;\n}\n\nmodule.exports = normalize_proj4;\nmodule.exports.default = normalize_proj4;\n", "// keywords are from proj4js\nconst keywords = [\n  \"PROJECTEDCRS\",\n  \"PROJCRS\",\n  \"GEOGCS\",\n  \"GEOCCS\",\n  \"PROJCS\",\n  \"LOCAL_CS\",\n  \"GEODCRS\",\n  \"GEODETICCRS\",\n  \"GEODETICDATUM\",\n  \"ENGCRS\",\n  \"ENGINEERINGCRS\",\n  \"PRIMEM\",\n  \"DATUM\"\n];\n\nfunction isWKT(str) {\n  // clean any blank spaces in beginning\n  str = str.trim();\n\n  if (\n    str.startsWith(\"PROJCS[\") ||\n    str.startsWith(\"PROJCRS[\") ||\n    str.startsWith(\"GEOGCS[\") ||\n    str.startsWith(\"GEOGCRS[\")\n  ) {\n    for (let i = 0; i < keywords.length; i++) {\n      const kw = keywords[i];\n      if (str.includes(kw + \"[\")) {\n        return true;\n      }\n    }\n  } else {\n    return false;\n  }\n}\n\nif (typeof define === \"function\" && define.amd) {\n  define(function () {\n    return isWKT;\n  });\n}\n\nif (typeof module === \"object\") {\n  module.exports = isWKT;\n  module.exports.default = isWKT;\n}\nif (typeof self === \"object\") self.isWKT = isWKT;\nif (typeof window === \"object\") window.isWKT = isWKT;\n", "const FORMATS = {\n  ESRI_WKT: \"esriwkt\",\n  GEOSERVER: \"geoserver\",\n  MAPFILE: \"mapfile\",\n  MAPNIK: \"mapnik\",\n  OGC_GML: \"gml\",\n  OGC_XML: \"xml\",\n  OGC_WKT: \"wkt\",\n  POSTGIS: \"postgis\",\n  PROJ_4: \"proj4\",\n  PROJ_4_JS: \"js\",\n  PROJJSON: \"PROJJSON\",\n  WKT_2: \"wkt2\"\n};\n\nmodule.exports = {\n  FORMATS\n};\n", "const isWKT = require(\"is-wkt\");\nconst wktcrs = require(\"wkt-crs\");\n\nconst { FORMATS } = require(\"./enums.js\");\n\nconst { ESRI_WKT, GEOSERVER, MAPFILE, MAPNIK, OGC_GML, OGC_XML, OGC_WKT, POSTGIS, PROJ_4, PROJ_4_JS, PROJJSON, WKT_2 } = FORMATS;\n\nfunction getProjType(input, { debug = false } = { debug: false }) {\n  // check WKT\n  if (input.startsWith(\"{\") && input.includes(\"projjson\")) {\n    return PROJJSON;\n  } else if (isWKT(input)) {\n    const parsed = wktcrs.parse(input.toUpperCase()).data;\n    if (\"AUTHORITY\" in (parsed.PROJCS || parsed.PROJCRS || parsed.GEOGCS || parsed.GEOGCRS)) {\n      return OGC_WKT;\n    } else if (\"ID\" in parsed) {\n      return WKT_2;\n    } else {\n      // appears to be ESRI WKT\n      return ESRI_WKT;\n    }\n  } else if (input.includes(\"gml:ProjectedCRS\") || input.includes(\"gml:GeodeticCRS\") || input.includes(\"gml:GeographicCRS\")) {\n    if (input.includes(\"gml:srsID\")) {\n      return OGC_XML;\n    } else {\n      return OGC_GML;\n    }\n  } else if (input.startsWith(\"+\") && input.includes(\"+proj=\")) {\n    return PROJ_4;\n  } else if (input.startsWith(`proj4.defs(`)) {\n    return PROJ_4_JS;\n  } else if (/^\\d{1,6}\\=(PROJCS|GEOGCS)/.test(input)) {\n    return GEOSERVER;\n  } else if (input.startsWith(\"PROJECTION\") && input.endsWith(\"END\")) {\n    return MAPFILE;\n  } else if (input.endsWith(\"</Map>\")) {\n    return MAPNIK;\n  } else if (input.startsWith(\"INSERT\")) {\n    return POSTGIS;\n  } else {\n    if (debug) console.log('get-proj-type could not identify \"' + input + '\"');\n    return \"SOMETHING ELSE\";\n  }\n}\n\nmodule.exports = getProjType;\nmodule.exports.default = getProjType;\n", "function parseProj4JS(input, { debug = false } = { debug: false }) {\n  const start = input.indexOf(\":\") + 1;\n  const end = input.indexOf('\"', start + 2);\n  const str = input.substring(start, end);\n  if (debug) console.log('parseProj4JS str: \"' + str + '\"');\n  if (str) return Number(str);\n}\n\nmodule.exports = parseProj4JS;\nmodule.exports.default = parseProj4JS;\n", "{\n  \"properties\": {\n    \"columns\": [\n      \"epsg_code\",\n      \"esriwkt\",\n      \"proj4\"\n    ],\n    \"key\": \"epsg_code\",\n    \"dataType\": \"int32\"\n  },\n  \"data\": \"\"\n}", "const b64ab = require(\"b64ab\");\nconst findTagByPath = require(\"xml-utils/find-tag-by-path\");\nconst findTagByName = require(\"xml-utils/find-tag-by-name\");\nconst getAttribute = require(\"xml-utils/get-attribute\");\nconst parseWKT = require(\"wkt-parser\");\nconst utmUtils_getCodeFromEsriWKT = require(\"utm-utils/src/getCodeFromEsriWKT.js\");\nconst utmUtils_getCodeFromProjString = require(\"utm-utils/src/getCodeFromProjString.js\");\n\nconst hash = require(\"./hash.js\");\nconst normalize_esriwkt = require(\"./normalize/esriwkt.js\");\nconst normalize_proj4 = require(\"./normalize/proj4.js\");\n\nconst getProjType = require(\"./get-proj-type.js\");\nconst parseProj4JS = require(\"./parse/proj4js.js\");\nconst { FORMATS } = require(\"./enums.js\");\n\nconst data = require(\"./data/esriwkt-proj4.json\");\n\nconst getDefault = fn => fn.default || fn;\n\nconst rows = [];\n\nfunction _load_rows(debug) {\n  const decoded = b64ab.toArrayBuffer(data.data);\n  const arr = new Int32Array(decoded);\n  if (debug) console.log(\"arr:\", arr);\n\n  const num_fields = data.properties.columns.length;\n  const num_rows = arr.length / num_fields;\n\n  for (let r = 0; r < num_rows; r++) {\n    const row = {};\n    for (let f = 0; f < num_fields; f++) {\n      row[data.properties.columns[f]] = arr[r * num_fields + f];\n    }\n    rows.push(row);\n  }\n  if (debug) console.log(\"[get-epsg-code] rows:\", rows);\n\n  return rows;\n}\n\nfunction lookup(input, dataType, debug = false) {\n  if (!data.properties.columns.includes(dataType)) {\n    throw new Error(\"[get-epsg-code] \" + dataType + \" not supported\");\n  }\n\n  if (rows.length === 0) {\n    _load_rows(debug);\n  }\n\n  const hashed = hash(input);\n  if (debug) console.log(\"[get-epsg-code] hashed:\", hashed);\n\n  const found = rows.filter(row => row[dataType] === hashed);\n  if (debug) console.log(\"[get-epsg-code] found:\", found);\n\n  return found.map(row => row.epsg_code);\n}\n\nconst { ESRI_WKT, GEOSERVER, MAPFILE, MAPNIK, OGC_GML, OGC_XML, OGC_WKT, POSTGIS, PROJJSON, PROJ_4, PROJ_4_JS, WKT_2 } = FORMATS;\n\nfunction getEPSGCodes(input, options) {\n  //console.log(\"starting get-epsg-code with\", input, options);\n  var debug = options && options.debug ? options.debug : false;\n\n  if (typeof input === \"string\") input = input.trim();\n\n  const dataType = getProjType(input, { debug });\n  if (debug) console.log(\"dataType:\", dataType);\n\n  if (dataType === OGC_WKT) {\n    const parsed = getDefault(parseWKT)(input);\n    if (debug) console.log(\"parsed:\", parsed);\n    if (parsed.AUTHORITY) {\n      const authority = parsed.AUTHORITY;\n      return {\n        type: dataType,\n        codes: [Number(authority.epsg || authority.EPSG)]\n      };\n    }\n  } else if (dataType === WKT_2) {\n    const parsed = getDefault(parseWKT)(input);\n    if (debug) console.log(\"parsed:\", parsed);\n    if (typeof parsed.ID === \"object\" && typeof parsed.ID.EPSG === \"number\") {\n      return {\n        type: dataType,\n        codes: [parsed.ID.EPSG]\n      };\n    }\n  } else if (dataType == ESRI_WKT) {\n    // try utm parsing\n    const code = utmUtils_getCodeFromEsriWKT(input);\n    if (code) return { type: dataType, codes: [code] };\n\n    input = normalize_esriwkt(input, { debug });\n    return { type: dataType, codes: lookup(input, ESRI_WKT, debug) };\n  } else if (dataType === OGC_GML) {\n    const identifier = getDefault(findTagByName)(input, \"gml:identifier\", {\n      debug\n    }).inner;\n    return {\n      type: dataType,\n      codes: [Number(identifier.replace(\"urn:ogc:def:crs:EPSG::\", \"\"))]\n    };\n  } else if (dataType === OGC_XML) {\n    return {\n      type: dataType,\n      codes: [Number(getDefault(findTagByPath)(input, [\"gml:srsID\", \"gml:name\"], { debug }).inner)]\n    };\n  } else if (dataType === PROJ_4) {\n    input = normalize_proj4(input, { debug });\n\n    if (input.startsWith(\"+\") && input.includes(\"+proj=utm\")) {\n      return { type: dataType, codes: [utmUtils_getCodeFromProjString(input)] };\n    } else {\n      return { type: dataType, codes: lookup(input, PROJ_4, debug) };\n    }\n  } else if (dataType === PROJ_4_JS) {\n    const code = parseProj4JS(input);\n    return {\n      type: dataType,\n      codes: code ? [code] : []\n    };\n  } else if (dataType === GEOSERVER) {\n    return { type: dataType, codes: [Number(input.match(/^\\d{1,6}/)[0])] };\n  } else if (dataType === MAPFILE) {\n    if (input.includes(\"init=epsg:\")) {\n      return {\n        type: dataType,\n        codes: [Number.parseInt(/(\"init\\=epsg:)(\\d{1,10})(\")/.exec(input)[2])]\n      };\n    } else if (input.includes('\"proj=utm\"')) {\n      const zone = /(\"zone\\=)(\\d{1,2})(\")/.exec(input)[2];\n      const south = input.includes('\"south\"');\n      if (input.includes(\"ellps=GRS80\") && south === false) {\n        return { type: dataType, codes: [Number.parseInt(\"269\" + zone)] };\n      } else {\n        const hemisphere = south ? \"7\" : \"6\";\n        return {\n          type: dataType,\n          codes: [Number.parseInt(\"32\" + hemisphere + zone)]\n        };\n      }\n    } else {\n      return { type: dataType, codes: lookup(input, MAPFILE, debug) };\n    }\n  } else if (dataType === MAPNIK) {\n    const map = findTagByName(input, \"Map\");\n    const srs = getAttribute(map.outer, \"srs\"); // Proj.4 String\n    return { type: dataType, codes: getEPSGCodes(srs).codes };\n  } else if (dataType === POSTGIS) {\n    return {\n      type: dataType,\n      codes: [Number(input.substring(input.indexOf(\"values (\") + 8, input.indexOf(\"EPSG\") - 3).trim())]\n    };\n  } else if (dataType === PROJJSON) {\n    const data = JSON.parse(input);\n    if (typeof data.id === \"object\") {\n      if (data.id.authority === \"EPSG\" || !(\"authority\" in data.id)) {\n        if (typeof data.id.code === \"number\") {\n          return {\n            type: dataType,\n            codes: [data.id.code]\n          };\n        }\n      }\n    }\n  }\n}\n\nfunction getEPSGCode(input, options) {\n  const result = getEPSGCodes(input, options);\n  if (result) return result.codes[0];\n}\n\nif (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n  module.exports = getEPSGCode;\n  module.exports.getEPSGCode = getEPSGCode;\n  module.exports.getEPSGCodes = getEPSGCodes;\n  module.exports._load_rows = _load_rows;\n}\nif (typeof window !== \"undefined\") {\n  window[\"getEPSGCode\"] = getEPSGCode;\n  window[\"getEPSGCodes\"] = getEPSGCodes;\n} else if (typeof self !== \"undefined\") {\n  self[\"getEPSGCode\"] = getEPSGCode; // jshint ignore:line\n  self[\"getEPSGCodes\"] = getEPSGCodes; // jshint ignore:line\n}\n"],
  "mappings": "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",
  "names": ["require_b64ab", "__commonJSMin", "exports", "module", "b64ab", "__name", "b64", "char2bits", "eqct", "i", "slen", "l", "u8", "s", "char", "ab", "bits2char", "b", "n", "require_index_of_match", "__commonJSMin", "exports", "module", "indexOfMatch", "xml", "pattern", "startIndex", "match", "__name", "require_index_of_match_end", "__commonJSMin", "exports", "module", "indexOfMatchEnd", "xml", "pattern", "startIndex", "match", "__name", "require_count_substring", "__commonJSMin", "exports", "module", "countSubstring", "string", "substring", "pattern", "match", "__name", "require_find_tag_by_name", "__commonJSMin", "exports", "module", "indexOfMatch", "indexOfMatchEnd", "countSubstring", "findTagByName", "xml", "tagName", "options", "debug", "nested", "startIndex", "start", "afterStart", "relativeEnd", "selfClosing", "openings", "closings", "clip", "end", "outer", "inner", "__name", "require_find_tags_by_name", "__commonJSMin", "exports", "module", "findTagByName", "findTagsByName", "xml", "tagName", "options", "tags", "debug", "nested", "startIndex", "tag", "__name", "require_find_tags_by_path", "__commonJSMin", "exports", "module", "findTagsByName", "findTagsByPath", "xml", "path", "options", "debug", "returnOnFirst", "tags", "pathIndex", "tagName", "allSubTags", "tagIndex", "tag", "subTags", "subTag", "__name", "require_find_tag_by_path", "__commonJSMin", "exports", "module", "findTagsByPath", "findTagByPath", "xml", "path", "options", "debug", "found", "__name", "require_get_attribute", "__commonJSMin", "exports", "module", "getAttribute", "tag", "attributeName", "options", "debug", "xml", "opening", "quotechars", "i", "char", "pattern", "match", "__name", "require_wkt_build", "__commonJSMin", "exports", "module", "NEUTRAL", "KEYWORD", "NUMBER", "QUOTED", "AFTERQUOTE", "ENDED", "whitespace", "latin", "keyword", "endThings", "digets", "Parser", "text", "__name", "char", "newObjects", "parseString", "txt", "parser", "mapit", "obj", "key", "value", "thing", "out", "newObj", "item", "sExpr", "v", "i", "D2R", "rename", "params", "outName", "inName", "d2r", "input", "cleanWKT", "wkt", "axisOrder", "ii", "axis", "geogcs", "toMeter", "ratio", "renamer", "a", "list", "index", "lisp", "type", "name", "require_getCodeFromEsriWKT", "__commonJSMin", "exports", "module", "getCodeFromEsriWKT", "esri_wkt", "match", "name", "last_part", "zone", "hemisphere", "__name", "require_getCodeFromProjString", "__commonJSMin", "exports", "module", "getCodeFromProjString", "proj", "parts", "zone", "part", "south", "ellps", "hemisphere", "__name", "require_hash", "__commonJSMin", "exports", "module", "hash32", "string", "hash", "i", "chr", "string_length", "__name", "require_wkt_crs", "__commonJSMin", "exports", "module", "sort", "data", "keywords", "keys", "k", "counts", "it", "key", "indices", "params", "item", "i", "a", "b", "param", "__name", "parse", "wkt", "options", "raw", "debug", "match", "p1", "varname", "error", "process", "parent", "kw", "kwarr", "result", "unparse", "attrs", "attr", "_module", "require_wkt", "__commonJSMin", "exports", "module", "wktcrs", "sort_wkt", "wkt", "data", "__name", "normalize_wkt", "debug", "n", "s", "require_esriwkt", "__commonJSMin", "exports", "module", "normalize_wkt", "normalize_esriwkt", "esriwkt", "debug", "__name", "require_proj4", "__commonJSMin", "exports", "module", "normalize_proj4", "str", "debug", "remove_k1", "remove_no_defs", "remove_title", "remove_init", "remove_type", "parts", "it", "__name", "require_is_wkt", "__commonJSMin", "exports", "module", "keywords", "isWKT", "str", "i", "kw", "__name", "require_enums", "__commonJSMin", "exports", "module", "FORMATS", "require_get_proj_type", "__commonJSMin", "exports", "module", "isWKT", "wktcrs", "FORMATS", "ESRI_WKT", "GEOSERVER", "MAPFILE", "MAPNIK", "OGC_GML", "OGC_XML", "OGC_WKT", "POSTGIS", "PROJ_4", "PROJ_4_JS", "PROJJSON", "WKT_2", "getProjType", "input", "debug", "parsed", "__name", "require_proj4js", "__commonJSMin", "exports", "module", "parseProj4JS", "input", "debug", "start", "end", "str", "__name", "require_esriwkt_proj4", "__commonJSMin", "exports", "module", "require_lookup_esriwkt_proj4", "__commonJSMin", "exports", "module", "b64ab", "findTagByPath", "findTagByName", "getAttribute", "parseWKT", "utmUtils_getCodeFromEsriWKT", "utmUtils_getCodeFromProjString", "hash", "normalize_esriwkt", "normalize_proj4", "getProjType", "parseProj4JS", "FORMATS", "data", "getDefault", "__name", "fn", "rows", "_load_rows", "debug", "decoded", "arr", "num_fields", "num_rows", "r", "row", "f", "lookup", "input", "dataType", "hashed", "found", "ESRI_WKT", "GEOSERVER", "MAPFILE", "MAPNIK", "OGC_GML", "OGC_XML", "OGC_WKT", "POSTGIS", "PROJJSON", "PROJ_4", "PROJ_4_JS", "WKT_2", "getEPSGCodes", "options", "parsed", "authority", "code", "identifier", "zone", "south", "hemisphere", "map", "srs", "getEPSGCode", "result"]
}

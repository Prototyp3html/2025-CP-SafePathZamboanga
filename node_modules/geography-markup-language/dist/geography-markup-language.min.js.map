{
  "version": 3,
  "sources": ["../node_modules/.pnpm/bbox-fns@0.6.0/node_modules/bbox-fns/polygon.js", "../node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/get-attribute.js", "../node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/index-of-match.js", "../node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/index-of-match-end.js", "../node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/count-substring.js", "../node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/find-tag-by-name.js", "../node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/find-tags-by-name.js", "../geometry/Envelope.js", "../parse/envelope.js", "../utils/find.js", "../enums/Envelope.js", "../find/Envelope.js", "../parse/lowerCorner.js", "../utils/reorder.js", "../parse/upperCorner.js", "../parse/LineString.js", "../enums/LineString.js", "../find/LineString.js", "../parse/coordinates.js", "../find/coordinates.js", "../utils/chunk.js", "../parse/posList.js", "../find/posLists.js", "../find/posList.js", "../geometry/LineString.js", "../parse/Point.js", "../enums/Point.js", "../find/Points.js", "../find/Point.js", "../parse/pos.js", "../geometry/Point.js", "../parse/Polygon.js", "../find/innerBoundaries.js", "../find/interiors.js", "../enums/Polygon.js", "../find/Polygons.js", "../find/Polygon.js", "../find/exteriors.js", "../find/exterior.js", "../parse/LinearRing.js", "../find/LinearRing.js", "../parse/exterior.js", "../find/innerBoundaryIs.js", "../parse/innerBoundaryIs.js", "../find/interior.js", "../parse/interior.js", "../find/outerBoundaryIs.js", "../parse/outerBoundaryIs.js", "../geometry/Polygon.js", "../geometry/Geometry.js", "../utils/findAll.js", "../find/geometries.js"],
  "sourcesContent": ["// convert bbox in [xmin, ymin, xmax, ymax] format to a GeoJSON-like Polygon\nfunction polygon([x0, y0, x1, y1]) {\n  return [\n    [\n      [x0, y1], // top-left\n      [x0, y0], // bottom-left\n      [x1, y0], // bottom-right\n      [x1, y1], // top-right\n      [x0, y1] // top-left\n    ]\n  ];\n}\n\nmodule.exports = polygon;\nmodule.exports.default = polygon;\n", "function getAttribute(tag, attributeName, options) {\n  const debug = (options && options.debug) || false;\n  if (debug) console.log(\"getting \" + attributeName + \" in \" + tag);\n\n  const xml = typeof tag === \"object\" ? tag.outer : tag;\n\n  const pattern = `${attributeName}\\\\=\"\\([^\"]*\\)\"`;\n  if (debug) console.log(\"pattern:\", pattern);\n\n  const re = new RegExp(pattern);\n  const match = re.exec(xml);\n  if (debug) console.log(\"match:\", match);\n  if (match) return match[1];\n}\n\nmodule.exports = getAttribute;\nmodule.exports.default = getAttribute;\n", "function indexOfMatch(xml, pattern, startIndex) {\n  const re = new RegExp(pattern);\n  const match = re.exec(xml.slice(startIndex));\n  if (match) return startIndex + match.index;\n  else return -1;\n}\n\nmodule.exports = indexOfMatch;\nmodule.exports.default = indexOfMatch;\n", "function indexOfMatchEnd(xml, pattern, startIndex) {\n  const re = new RegExp(pattern);\n  const match = re.exec(xml.slice(startIndex));\n  if (match) return startIndex + match.index + match[0].length - 1;\n  else return -1;\n}\n\nmodule.exports = indexOfMatchEnd;\nmodule.exports.default = indexOfMatchEnd;\n", "function countSubstring(string, substring) {\n  const pattern = new RegExp(substring, \"g\");\n  const match = string.match(pattern);\n  return match ? match.length : 0;\n}\n\nmodule.exports = countSubstring;\nmodule.exports.default = countSubstring;\n", "const indexOfMatch = require(\"./index-of-match.js\");\nconst indexOfMatchEnd = require(\"./index-of-match-end.js\");\nconst countSubstring = require(\"./count-substring.js\");\n\nfunction findTagByName(xml, tagName, options) {\n  const debug = (options && options.debug) || false;\n  const nested = !(options && typeof options.nested === false);\n\n  const startIndex = (options && options.startIndex) || 0;\n\n  if (debug) console.log(\"[xml-utils] starting findTagByName with\", tagName, \" and \", options);\n\n  const start = indexOfMatch(xml, `\\<${tagName}[ \\>\\/]`, startIndex);\n  if (debug) console.log(\"[xml-utils] start:\", start);\n  if (start === -1) return undefined;\n\n  const afterStart = xml.slice(start + tagName.length);\n\n  let relativeEnd = indexOfMatchEnd(afterStart, \"^[^<]*[ /]>\", 0);\n\n  const selfClosing = relativeEnd !== -1 && afterStart[relativeEnd - 1] === \"/\";\n  if (debug) console.log(\"[xml-utils] selfClosing:\", selfClosing);\n\n  if (selfClosing === false) {\n    // check if tag has subtags with the same name\n    if (nested) {\n      let startIndex = 0;\n      let openings = 1;\n      let closings = 0;\n      while ((relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", startIndex)) !== -1) {\n        const clip = afterStart.substring(startIndex, relativeEnd + 1);\n        openings += countSubstring(clip, \"<\" + tagName);\n        closings += countSubstring(clip, \"/\" + tagName + \">\");\n        // we can't have more openings than closings\n        if (closings >= openings) break;\n        startIndex = relativeEnd;\n      }\n    } else {\n      relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", 0);\n    }\n  }\n\n  const end = start + tagName.length + relativeEnd + 1;\n  if (debug) console.log(\"[xml-utils] end:\", end);\n  if (end === -1) return undefined;\n\n  const outer = xml.slice(start, end);\n  // tag is like <gml:identifier codeSpace=\"OGP\">urn:ogc:def:crs:EPSG::32617</gml:identifier>\n\n  let inner;\n  if (selfClosing) {\n    inner = null;\n  } else {\n    inner = outer.slice(outer.indexOf(\">\") + 1, outer.lastIndexOf(\"<\"));\n  }\n\n  return { inner, outer, start, end };\n}\n\nmodule.exports = findTagByName;\nmodule.exports.default = findTagByName;\n", "const findTagByName = require(\"./find-tag-by-name.js\");\n\nfunction findTagsByName(xml, tagName, options) {\n  const tags = [];\n  const debug = (options && options.debug) || false;\n  const nested = options && typeof options.nested === \"boolean\" ? options.nested : true;\n  let startIndex = (options && options.startIndex) || 0;\n  let tag;\n  while ((tag = findTagByName(xml, tagName, { debug, startIndex }))) {\n    if (nested) {\n      startIndex = tag.start + 1 + tagName.length;\n    } else {\n      startIndex = tag.end;\n    }\n    tags.push(tag);\n  }\n  if (debug) console.log(\"findTagsByName found\", tags.length, \"tags\");\n  return tags;\n}\n\nmodule.exports = findTagsByName;\nmodule.exports.default = findTagsByName;\n", "import bboxToPolygon from \"bbox-fns/polygon.js\";\n\nimport parseEnvelope from \"../parse/envelope.js\";\n\nexport default function Envelope(xml, { format = \"default\" } = {}) {\n  let order = \"default\";\n  let raw = false;\n  if (format === \"geojson\") {\n    order = \"geojson\";\n  }\n\n  const obj = parseEnvelope(xml, { order, raw });\n\n  if (!obj) return;\n\n  if (!format || format === \"default\") return obj;\n\n  const { srs, corners } = obj;\n\n  const [lowerCorner, upperCorner] = corners;\n\n  if (format === \"bbox\" || format === \"geojson\") {\n    const [ymin, xmin, ...lowerCornerRest] = lowerCorner;\n    const [ymax, xmax, ...upperCornerRest] = upperCorner;\n    if (format === \"bbox\") {\n      return [xmin, ymin, ...lowerCornerRest, xmax, ymax, ...upperCornerRest];\n    } else if (format === \"geojson\") {\n      const bbox = [xmin, ymin, xmax, ymax];\n      const feature = {\n        type: \"Feature\",\n        bbox,\n        properties: {},\n        geometry: {\n          type: \"Polygon\",\n          coordinates: bboxToPolygon(bbox)\n        }\n      };\n      if (srs) {\n        feature.properties.srsName = srs;\n        feature.crs = {\n          type: \"name\",\n          properties: {\n            name: srs\n          }\n        };\n      }\n      return feature;\n    }\n  }\n}\n", "import getAttribute from \"xml-utils/get-attribute.js\";\n\nimport findEnvelope from \"../find/Envelope.js\";\nimport parseLowerCorner from \"./lowerCorner.js\";\nimport parseUpperCorner from \"./upperCorner.js\";\n\n/**\n *\n * @param {String} xml\n * @param {Object} options\n * @param {Boolean} options.raw - whether to return precise numbers as text strings\n * @returns {Array} { srs, corners: [[ymin, xmax], [ymax, xmax]] }\n */\nexport default function envelope(xml, { raw = false } = {}) {\n  const tag = findEnvelope(xml);\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  const lowerCorner = parseLowerCorner(inner, { raw });\n  if (!lowerCorner) return;\n\n  const upperCorner = parseUpperCorner(inner, { raw });\n  if (!upperCorner) return;\n\n  if (lowerCorner.length !== upperCorner.length) {\n    throw new Error(\"[geography-markup-language/parse/envelope] inconsistent number of dimensions\");\n  }\n\n  const srs = getAttribute(tag.outer, \"srsName\") || null;\n\n  return { srs, corners: [lowerCorner, upperCorner] };\n}\n", "import findTagsByName from \"xml-utils/find-tags-by-name.js\";\n\nexport default function find(xml, names) {\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    const tags = findTagsByName(xml, name);\n    if (tags.length >= 1) {\n      return tags;\n    }\n  }\n  return [];\n}\n", "export default [\"gml:envelope\", \"envelope\", \"gml:Envelope\", \"Envelope\"];\n", "import find from \"../utils/find.js\";\nimport ENVELOPE_TAG_NAMES from \"../enums/Envelope.js\";\n\nexport default function envelope(xml) {\n  return find(xml, ENVELOPE_TAG_NAMES)[0];\n}\n", "import findTagByName from \"xml-utils/find-tag-by-name.js\";\nimport reorder from \"../utils/reorder.js\";\n\n/**\n * @name lowerCorner\n * @param {String} xml\n * @param {Object} options\n * @param {String} options.order - \"default\" or \"geojson\"\n * @param {Boolean} options.raw - whether to return the coordinates as an array of strings\n * @returns {Array} with default ordering [y, x] or with geojson order, [x, y]\n */\nexport default function lowerCorner(xml, { order = \"default\", raw = false } = {}) {\n  const tag = findTagByName(xml, \"gml:lowerCorner\") || findTagByName(\"lowerCorner\");\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  let point = inner.trim().split(/[ ,]+/g);\n  if (!raw) point = point.map(n => Number(n));\n\n  if (order === \"geojson\") point = reorder(point);\n\n  return point;\n}\n", "// reorder from [y, x, ...] to [x, y, ...]\nexport default function reorder(point) {\n  const y = point[0];\n  const x = point[1];\n  const rest = point.slice(2);\n  return [x, y].concat(rest);\n}\n", "import findTagByName from \"xml-utils/find-tag-by-name.js\";\nimport reorder from \"../utils/reorder.js\";\n\nexport default function upperCorner(xml, { order = \"default\", raw = false } = {}) {\n  const tag = findTagByName(xml, \"gml:upperCorner\") || findTagByName(\"upperCorner\");\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  let point = inner.trim().split(/[ ,]+/g);\n  if (!raw) point = point.map(n => Number(n));\n\n  if (order === \"geojson\") point = reorder(point);\n\n  return point;\n}\n", "import getAttribute from \"xml-utils/get-attribute.js\";\n\nimport findLineString from \"../find/LineString.js\";\nimport parseCoordinates from \"./coordinates.js\";\nimport parsePosList from \"./posList.js\";\n\nexport default function LineString(xml, { debug, order, raw } = {}) {\n  const tag = findLineString(xml);\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  const coords = parsePosList(inner, { debug, order, raw }) || parseCoordinates(inner, { debug, order, raw });\n\n  const result = {\n    type: \"LineString\",\n    coords\n  };\n\n  const srsName = getAttribute(tag.outer, \"srsName\");\n  if (debug) console.log(\"[geography-markup-language] srsName:\", srs);\n  if (srsName) {\n    result.srs = srsName;\n  }\n\n  return result;\n}\n", "export default [\"gml:LineString\", \"LineString\", \"gml:lineString\", \"lineString\", \"gml:linestring\", \"linestring\"];\n", "import find from \"../utils/find.js\";\nimport LINE_STRING_TAG_NAMES from \"../enums/LineString.js\";\n\nexport default function LineString(xml) {\n  return find(xml, LINE_STRING_TAG_NAMES)[0];\n}\n", "import getAttribute from \"xml-utils/get-attribute.js\";\n\nimport findCoordinates from \"../find/coordinates.js\";\nimport chunk from \"../utils/chunk.js\";\nimport reorder from \"../utils/reorder.js\";\n\n/**\n *\n * @param {String} xml - representing one or more coordinates\n * @param {Object} options\n * @param {Boolean} options.debug\n * @param {Boolean} options.order\n * @param {Boolean} options.raw\n * @returns {Array}\n */\nexport default function coordinates(xml, { debug = false, order = \"default\", raw = false } = {}) {\n  const tag = findCoordinates(xml);\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  let nums = inner.trim().split(/[ ,\\t\\n]+/g);\n  if (!raw) {\n    if (debug) console.log(\"[geography-markup-language] converting to numbers\");\n    nums = nums.map(n => Number(n));\n  }\n\n  const srsDimension = getAttribute(tag, \"srsDimension\");\n  const chunkSize = srsDimension ? Number(srsDimension) : 2;\n  let points = chunk(nums, chunkSize);\n\n  if (order === \"geojson\") {\n    points = points.map(pt => reorder(pt));\n  }\n\n  if (points.length === 1) {\n    return points[0];\n  } else {\n    return points;\n  }\n}\n", "import find from \"../utils/find.js\";\n\nexport default function coordinates(xml) {\n  return find(xml, [\"gml:coordinates\", \"coordinates\", \"gml:Coordinates\", \"Coordinates\"])[0];\n}\n", "export default function chunk(arr, chunkSize = 2) {\n  const result = [];\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    const chunk = [];\n    for (let c = 0; c < chunkSize; c++) {\n      chunk.push(arr[i + c]);\n    }\n    result.push(chunk);\n  }\n  return result;\n}\n", "import getAttribute from \"xml-utils/get-attribute.js\";\n\nimport findPosList from \"../find/posList.js\";\nimport chunk from \"../utils/chunk.js\";\nimport reorder from \"../utils/reorder.js\";\n\n/**\n *\n * @param {String} xml\n * @param {Object} options\n * @param {Boolean} options.debug\n * @param {Boolean} options.raw\n * @returns {Array} pointss\n */\nexport default function posList(xml, { debug = false, order = \"default\", raw = false } = {}) {\n  const tag = findPosList(xml);\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  let nums = inner.trim().split(/[ ,\\t\\n]+/g);\n  if (!raw) {\n    if (debug) console.log(\"[geography-markup-language] converting to numbers\");\n    nums = nums.map(n => Number(n));\n  }\n\n  const srsDimension = getAttribute(tag, \"srsDimension\");\n  const chunkSize = srsDimension ? Number(srsDimension) : 2;\n  let points = chunk(nums, chunkSize);\n\n  if (order === \"geojson\") {\n    points = points.map(pt => reorder(pt));\n  }\n\n  return points;\n}\n", "import find from \"../utils/find.js\";\n\nexport default function posLists(xml) {\n  return find(xml, [\"gml:posList\", \"posList\", \"gml:PosList\", \"PosList\", \"gml:poslist\", \"poslist\"]);\n}\n", "import findPosLists from \"./posLists.js\";\n\nexport default function posList(xml) {\n  return findPosLists(xml)[0];\n}\n", "import parseLineString from \"../parse/LineString.js\";\n\nexport default function LineString(xml, { format = \"default\" } = { format: \"default \" }) {\n  if (format === \"geojson\") {\n    const { coords, srs } = parseLineString(xml, { order: \"geojson\" });\n    const feature = {\n      type: \"Feature\",\n      properties: {},\n      geometry: {\n        type: \"LineString\",\n        coordinates: coords\n      }\n    };\n    if (srs) {\n      feature.properties.srsName = srs;\n      feature.crs = {\n        type: \"name\",\n        properties: {\n          name: srs\n        }\n      };\n    }\n    return feature;\n  } else {\n    const obj = parseLineString(xml);\n    return obj;\n  }\n}\n", "import getAttribute from \"xml-utils/get-attribute.js\";\n\nimport findPoint from \"../find/Point.js\";\nimport parseCoordinates from \"./coordinates.js\";\nimport parsePos from \"./pos.js\";\nimport parsePosList from \"./posList.js\";\n\nexport default function Point(xml, { debug, raw } = {}) {\n  const tag = findPoint(xml);\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  const point = parsePos(inner, { debug, raw }) || (parsePosList(inner, { debug, raw }) || [])[0] || parseCoordinates(inner, { debug, raw });\n\n  if (!point || point.length === 0) return;\n\n  const [y, x, z = null] = point;\n\n  return {\n    type: \"Point\",\n    srs: getAttribute(tag.outer, \"srsName\") || null,\n    coord: point,\n    x,\n    y,\n    z\n  };\n}\n", "export default [\"gml:Point\", \"Point\", \"gml:point\", \"point\"];\n", "import find from \"../utils/find.js\";\nimport POINT_TAG_NAMES from \"../enums/Point.js\";\n\nexport default function Points(xml) {\n  return find(xml, POINT_TAG_NAMES);\n}\n", "import findPoints from \"./Points.js\";\n\nexport default function Point(xml) {\n  return findPoints(xml)[0];\n}\n", "import findTagByName from \"xml-utils/find-tag-by-name.js\";\nimport reorder from \"../utils/reorder.js\";\n\n/**\n * @name pos\n * @param {String} xml\n * @param {Object} options\n * @param {String} options.order - \"default\" or \"geojson\"\n * @param {Boolean} options.raw - whether to return the coordinate as an array of strings\n * @returns {Array} coordinate point\n */\nexport default function pos(xml, { order = \"default\", raw = false } = {}) {\n  const tag = findTagByName(xml, \"gml:pos\") || findTagByName(\"pos\");\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  let point = inner.trim().split(/[ ,]+/g);\n  if (!raw) point = point.map(n => Number(n));\n\n  if (order === \"geojson\") point = reorder(point);\n\n  return point;\n}\n", "import parsePoint from \"../parse/Point.js\";\n\nexport default function Point(xml, { format = \"default\" } = { format: \"default\" }) {\n  const obj = parsePoint(xml);\n\n  if (!format || format === \"default\") return obj;\n\n  const { x, y, srs } = obj;\n\n  if (format === \"geojson\") {\n    const feature = {\n      type: \"Feature\",\n      properties: {},\n      geometry: {\n        type: \"Point\",\n        coordinates: [x, y]\n      }\n    };\n    if (srs) {\n      feature.properties.srsName = srs;\n      feature.crs = {\n        type: \"name\",\n        properties: {\n          name: srs\n        }\n      };\n    }\n    return feature;\n  }\n}\n", "import getAttribute from \"xml-utils/get-attribute.js\";\n\nimport findInnerBoundaries from \"../find/innerBoundaries.js\";\nimport findInteriors from \"../find/interiors.js\";\nimport findPolygon from \"../find/Polygon.js\";\nimport parseExterior from \"./exterior.js\";\nimport parseInnerBoundaryIs from \"./innerBoundaryIs.js\";\nimport parseInterior from \"./interior.js\";\nimport parseOuterBoundaryIs from \"./outerBoundaryIs.js\";\n\nexport default function Polygon(xml, { debug, order, raw } = {}) {\n  const tag = findPolygon(xml);\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  const exterior = parseExterior(xml, { debug, order, raw }) || parseOuterBoundaryIs(xml, { debug, order, raw });\n\n  let holes = findInteriors(xml).map(interior => parseInterior(interior, { debug, order, raw }));\n  if (holes.length === 0) {\n    // if didn't find any, try older format\n    holes = findInnerBoundaries(xml).map(boundary => parseInnerBoundaryIs(boundary, { debug, order, raw }));\n  }\n\n  // create polygon with first array being the exterior ring\n  const rings = [exterior].concat(holes);\n\n  const result = {\n    type: \"Polygon\",\n    rings\n  };\n\n  const srsName = getAttribute(tag.outer, \"srsName\");\n  if (debug) console.log(\"[geography-markup-language] srsName:\", srs);\n  if (srsName) {\n    result.srs = srsName;\n  }\n\n  return result;\n}\n", "import find from \"../utils/find.js\";\n\nexport default function innerBoundaries(xml) {\n  return find(xml, [\"gml:innerBoundaryIs\", \"innerBoundaryIs\", \"gml:InnerBoundaryIs\", \"InnerBoundaryIs\", \"gml:innerboundaryis\", \"innerboundaryis\"]);\n}\n", "import find from \"../utils/find.js\";\n\nexport default function interiors(xml) {\n  return find(xml, [\"gml:interior\", \"interior\", \"gml:Interior\", \"Interior\"]);\n}\n", "export default [\"gml:Polygon\", \"polygon\", \"gml:polygon\", \"polygon\"];\n", "import find from \"../utils/find.js\";\nimport POLYGON_TAG_NAMES from \"../enums/Polygon.js\";\n\nexport default function Polygon(xml) {\n  return find(xml, POLYGON_TAG_NAMES);\n}\n", "import findPolygons from \"./Polygons.js\";\n\nexport default function Polygon(xml) {\n  return findPolygons(xml)[0];\n}\n", "import find from \"../utils/find.js\";\n\nexport default function exteriors(xml) {\n  return find(xml, [\"gml:exterior\", \"exterior\", \"gml:Exterior\", \"Exterior\"]);\n}\n", "import findExteriors from \"./exteriors.js\";\n\nexport default function exterior(xml) {\n  return findExteriors(xml)[0];\n}\n", "import getAttribute from \"xml-utils/get-attribute.js\";\n\nimport parseCoordinates from \"./coordinates.js\";\nimport parsePosList from \"./posList.js\";\n\nimport findCoordinates from \"../find/coordinates.js\";\nimport findLinearRing from \"../find/LinearRing.js\";\nimport findPosList from \"../find/posList.js\";\nimport chunk from \"../utils/chunk.js\";\nimport reorder from \"../utils/reorder.js\";\n\nexport default function LinearRing(xml, { debug, order = \"default\", raw } = {}) {\n  const tag = findLinearRing(xml);\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  const coordinatesTag = findCoordinates(inner);\n  if (coordinatesTag) {\n    return parseCoordinates(coordinatesTag.outer, { debug, order, raw });\n  }\n\n  const posListTag = findPosList(xml);\n  if (posListTag) {\n    return parsePosList(posListTag.outer, { debug, order, raw });\n  }\n\n  // sometimes there's no sub tag\n  let nums = inner.trim().split(/[ ,\\t\\n]+/g);\n  if (!raw) {\n    if (debug) console.log(\"[geography-markup-language] converting to numbers\");\n    nums = nums.map(n => Number(n));\n  }\n\n  const srsDimension = getAttribute(tag, \"srsDimension\");\n  const chunkSize = srsDimension ? Number(srsDimension) : 2;\n  let points = chunk(nums, chunkSize);\n\n  if (order === \"geojson\") {\n    points = points.map(pt => reorder(pt));\n  }\n\n  return points;\n}\n", "import find from \"../utils/find.js\";\n\nexport default function LinearRing(xml) {\n  return find(xml, [\"gml:LinearRing\", \"LinearRing\", \"gml:linearRing\", \"linearRing\", \"gml:linearring\", \"linearring\"])[0];\n}\n", "import findExterior from \"../find/exterior.js\";\nimport LinearRing from \"./LinearRing.js\";\n\nexport default function exterior(xml, { debug, order, raw } = {}) {\n  const tag = findExterior(xml);\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  return LinearRing(inner, { debug, order, raw });\n}\n", "import findInnerBoundaries from \"./innerBoundaries.js\";\n\nexport default function innerBoundaries(xml) {\n  return findInnerBoundaries(xml)[0];\n}\n", "import findInnerBoundaryIs from \"../find/innerBoundaryIs.js\";\nimport LinearRing from \"./LinearRing.js\";\n\nexport default function innerBoundaryIs(xml, { debug, order, raw } = {}) {\n  const tag = findInnerBoundaryIs(xml.outer);\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  return LinearRing(inner, { debug, order, raw });\n}\n", "import findInteriors from \"./interiors.js\";\n\nexport default function interior(xml) {\n  return findInteriors(xml)[0];\n}\n", "import findInterior from \"../find/interior.js\";\nimport LinearRing from \"./LinearRing.js\";\n\nexport default function interior(xml, { debug, order, raw } = {}) {\n  const tag = findInterior(xml);\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  return LinearRing(inner, { debug, order, raw });\n}\n", "import find from \"../utils/find.js\";\n\nexport default function outerBoundaryIs(xml) {\n  return find(xml, [\"gml:outerBoundaryIs\", \"outerBoundaryIs\", \"gml:OuterBoundaryIs\", \"OuterBoundaryIs\", \"gml:outerboundaryis\", \"outerboundaryis\"])[0];\n}\n", "import findOuterBoundaryIs from \"../find/outerBoundaryIs.js\";\nimport LinearRing from \"./LinearRing.js\";\n\nexport default function outerBoundaryIs(xml, { debug, order, raw } = {}) {\n  const tag = findOuterBoundaryIs(xml);\n  if (!tag) return;\n\n  const { inner } = tag;\n  if (!inner) return;\n\n  return LinearRing(inner, { debug, order, raw });\n}\n", "import parsePolygon from \"../parse/Polygon.js\";\n\nexport default function Polygon(xml, { format = \"default\" } = {}) {\n  if (format === \"geojson\") {\n    const { rings, srs } = parsePolygon(xml, { order: \"geojson\" });\n\n    const feature = {\n      type: \"Feature\",\n      properties: {},\n      geometry: {\n        type: \"Polygon\",\n        coordinates: rings\n      }\n    };\n\n    if (srs) {\n      feature.properties.srsName = srs;\n      feature.crs = {\n        type: \"name\",\n        properties: {\n          name: srs\n        }\n      };\n    }\n\n    return feature;\n  } else {\n    const obj = parsePolygon(xml);\n\n    return obj;\n  }\n}\n", "import Envelope from \"./Envelope.js\";\nimport LineString from \"./LineString.js\";\nimport Point from \"./Point.js\";\nimport Polygon from \"./Polygon.js\";\n\nimport findEnvelope from \"../find/Envelope.js\";\nimport findLineString from \"../find/LineString.js\";\nimport findPoint from \"../find/Point.js\";\nimport findPolygon from \"../find/Polygon.js\";\n\nexport default function Geometry(xml, { format = \"default\" } = { format: \"default\" }) {\n  const envelope = findEnvelope(xml);\n  if (envelope) {\n    const result = Envelope(envelope.outer, { format });\n    if (result) {\n      return result;\n    }\n  }\n\n  const lineString = findLineString(xml);\n  if (lineString) {\n    const result = LineString(lineString.outer, { format });\n    if (result) {\n      return result;\n    }\n  }\n\n  const point = findPoint(xml);\n  if (point) {\n    const result = Point(point.outer, { format });\n    if (result) {\n      return result;\n    }\n  }\n\n  const polygon = findPolygon(xml);\n  if (polygon) {\n    const result = Polygon(polygon.outer, { format });\n    if (result) {\n      return result;\n    }\n  }\n}\n", "import findTagsByName from \"xml-utils/find-tags-by-name.js\";\n\nexport default function find(xml, names) {\n  let tags = [];\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    tags = tags.concat(findTagsByName(xml, name));\n  }\n  return tags;\n}\n", "import findAll from \"../utils/findAll.js\";\n\nimport ENVELOPE_TAG_NAMES from \"../enums/Envelope.js\";\nimport LINE_STRING_TAG_NAMES from \"../enums/LineString.js\";\nimport POINT_TAG_NAMES from \"../enums/Point.js\";\nimport POLYGON_TAG_NAMES from \"../enums/Polygon.js\";\n\nlet GEOMETRY_TAG_NAMES;\n\n// find all the geometries\nexport default function geometries(xml) {\n  if (!GEOMETRY_TAG_NAMES) GEOMETRY_TAG_NAMES = ENVELOPE_TAG_NAMES.concat(LINE_STRING_TAG_NAMES).concat(POINT_TAG_NAMES).concat(POLYGON_TAG_NAMES);\n  return findAll(xml, GEOMETRY_TAG_NAMES).map(tag => tag.outer);\n}\n"],
  "mappings": "8kBAAA,IAAAA,GAAAC,EAAA,CAAAC,GAAAC,IAAA,CACA,SAASC,GAAQ,CAACC,EAAIC,EAAIC,EAAIC,CAAE,EAAG,CACjC,MAAO,CACL,CACE,CAACH,EAAIG,CAAE,EACP,CAACH,EAAIC,CAAE,EACP,CAACC,EAAID,CAAE,EACP,CAACC,EAAIC,CAAE,EACP,CAACH,EAAIG,CAAE,CACT,CACF,CACF,CAVSC,EAAAL,GAAA,WAYTD,EAAO,QAAUC,GACjBD,EAAO,QAAQ,QAAUC,KCdzB,IAAAM,EAAAC,EAAA,CAAAC,GAAAC,IAAA,UAASC,GAAaC,EAAKC,EAAeC,EAAS,CACjD,IAAMC,EAASD,GAAWA,EAAQ,OAAU,GACxCC,GAAO,QAAQ,IAAI,WAAaF,EAAgB,OAASD,CAAG,EAEhE,IAAMI,EAAM,OAAOJ,GAAQ,SAAWA,EAAI,MAAQA,EAE5CK,EAAU,GAAGJ,CAAa,eAC5BE,GAAO,QAAQ,IAAI,WAAYE,CAAO,EAG1C,IAAMC,EADK,IAAI,OAAOD,CAAO,EACZ,KAAKD,CAAG,EAEzB,GADID,GAAO,QAAQ,IAAI,SAAUG,CAAK,EAClCA,EAAO,OAAOA,EAAM,CAAC,CAC3B,CAbSC,EAAAR,GAAA,gBAeTD,EAAO,QAAUC,GACjBD,EAAO,QAAQ,QAAUC,KChBzB,IAAAS,GAAAC,EAAA,CAAAC,GAAAC,IAAA,UAASC,GAAaC,EAAKC,EAASC,EAAY,CAE9C,IAAMC,EADK,IAAI,OAAOF,CAAO,EACZ,KAAKD,EAAI,MAAME,CAAU,CAAC,EAC3C,OAAIC,EAAcD,EAAaC,EAAM,MACzB,EACd,CALSC,EAAAL,GAAA,gBAOTD,EAAO,QAAUC,GACjBD,EAAO,QAAQ,QAAUC,KCRzB,IAAAM,GAAAC,EAAA,CAAAC,GAAAC,IAAA,UAASC,GAAgBC,EAAKC,EAASC,EAAY,CAEjD,IAAMC,EADK,IAAI,OAAOF,CAAO,EACZ,KAAKD,EAAI,MAAME,CAAU,CAAC,EAC3C,OAAIC,EAAcD,EAAaC,EAAM,MAAQA,EAAM,CAAC,EAAE,OAAS,EACnD,EACd,CALSC,EAAAL,GAAA,mBAOTD,EAAO,QAAUC,GACjBD,EAAO,QAAQ,QAAUC,KCRzB,IAAAM,GAAAC,EAAA,CAAAC,GAAAC,IAAA,UAASC,GAAeC,EAAQC,EAAW,CACzC,IAAMC,EAAU,IAAI,OAAOD,EAAW,GAAG,EACnCE,EAAQH,EAAO,MAAME,CAAO,EAClC,OAAOC,EAAQA,EAAM,OAAS,CAChC,CAJSC,EAAAL,GAAA,kBAMTD,EAAO,QAAUC,GACjBD,EAAO,QAAQ,QAAUC,KCPzB,IAAAM,EAAAC,EAAA,CAAAC,GAAAC,IAAA,KAAMC,GAAe,KACfC,EAAkB,KAClBC,GAAiB,KAEvB,SAASC,GAAcC,EAAKC,EAASC,EAAS,CAC5C,IAAMC,EAASD,GAAWA,EAAQ,OAAU,GACtCE,EAAS,EAAEF,GAAW,OAAOA,EAAQ,SAAW,IAEhDG,EAAcH,GAAWA,EAAQ,YAAe,EAElDC,GAAO,QAAQ,IAAI,0CAA2CF,EAAS,QAASC,CAAO,EAE3F,IAAMI,EAAQV,GAAaI,EAAK,IAAKC,CAAO,QAAWI,CAAU,EAEjE,GADIF,GAAO,QAAQ,IAAI,qBAAsBG,CAAK,EAC9CA,IAAU,GAAI,OAElB,IAAMC,EAAaP,EAAI,MAAMM,EAAQL,EAAQ,MAAM,EAE/CO,EAAcX,EAAgBU,EAAY,cAAe,CAAC,EAExDE,EAAcD,IAAgB,IAAMD,EAAWC,EAAc,CAAC,IAAM,IAG1E,GAFIL,GAAO,QAAQ,IAAI,2BAA4BM,CAAW,EAE1DA,IAAgB,GAElB,GAAIL,EAAQ,CACV,IAAIC,EAAa,EACbK,EAAW,EACXC,EAAW,EACf,MAAQH,EAAcX,EAAgBU,EAAY,OAASN,EAAU,IAAKI,CAAU,KAAO,IAAI,CAC7F,IAAMO,EAAOL,EAAW,UAAUF,EAAYG,EAAc,CAAC,EAI7D,GAHAE,GAAYZ,GAAec,EAAM,IAAMX,CAAO,EAC9CU,GAAYb,GAAec,EAAM,IAAMX,EAAU,GAAG,EAEhDU,GAAYD,EAAU,MAC1BL,EAAaG,CACf,CACF,MACEA,EAAcX,EAAgBU,EAAY,OAASN,EAAU,IAAK,CAAC,EAIvE,IAAMY,EAAMP,EAAQL,EAAQ,OAASO,EAAc,EAEnD,GADIL,GAAO,QAAQ,IAAI,mBAAoBU,CAAG,EAC1CA,IAAQ,GAAI,OAEhB,IAAMC,EAAQd,EAAI,MAAMM,EAAOO,CAAG,EAG9BE,EACJ,OAAIN,EACFM,EAAQ,KAERA,EAAQD,EAAM,MAAMA,EAAM,QAAQ,GAAG,EAAI,EAAGA,EAAM,YAAY,GAAG,CAAC,EAG7D,CAAE,MAAAC,EAAO,MAAAD,EAAO,MAAAR,EAAO,IAAAO,CAAI,CACpC,CArDSG,EAAAjB,GAAA,iBAuDTJ,EAAO,QAAUI,GACjBJ,EAAO,QAAQ,QAAUI,KC5DzB,IAAAkB,GAAAC,EAAA,CAAAC,GAAAC,KAAA,KAAMC,GAAgB,IAEtB,SAASC,GAAeC,EAAKC,EAASC,EAAS,CAC7C,IAAMC,EAAO,CAAC,EACRC,EAASF,GAAWA,EAAQ,OAAU,GACtCG,EAASH,GAAW,OAAOA,EAAQ,QAAW,UAAYA,EAAQ,OAAS,GAC7EI,EAAcJ,GAAWA,EAAQ,YAAe,EAChDK,EACJ,KAAQA,EAAMT,GAAcE,EAAKC,EAAS,CAAE,MAAAG,EAAO,WAAAE,CAAW,CAAC,GACzDD,EACFC,EAAaC,EAAI,MAAQ,EAAIN,EAAQ,OAErCK,EAAaC,EAAI,IAEnBJ,EAAK,KAAKI,CAAG,EAEf,OAAIH,GAAO,QAAQ,IAAI,uBAAwBD,EAAK,OAAQ,MAAM,EAC3DA,CACT,CAhBSK,EAAAT,GAAA,kBAkBTF,GAAO,QAAUE,GACjBF,GAAO,QAAQ,QAAUE,KCrBzB,IAAAU,GAA0B,UCA1B,IAAAC,GAAyB,SCAzB,IAAAC,GAA2B,UAEZ,SAARC,EAAsBC,EAAKC,EAAO,CACvC,QAASC,EAAI,EAAGA,EAAID,EAAM,OAAQC,IAAK,CACrC,IAAMC,EAAOF,EAAMC,CAAC,EACdE,KAAO,GAAAC,SAAeL,EAAKG,CAAI,EACrC,GAAIC,EAAK,QAAU,EACjB,OAAOA,CAEX,CACA,MAAO,CAAC,CACV,CATwBE,EAAAP,EAAA,QCFxB,IAAOQ,EAAQ,CAAC,eAAgB,WAAY,eAAgB,UAAU,ECGvD,SAARC,EAA0BC,EAAK,CACpC,OAAOC,EAAKD,EAAKE,CAAkB,EAAE,CAAC,CACxC,CAFwBC,EAAAJ,EAAA,YCHxB,IAAAK,GAA0B,SCCX,SAARC,EAAyBC,EAAO,CACrC,IAAMC,EAAID,EAAM,CAAC,EACXE,EAAIF,EAAM,CAAC,EACXG,EAAOH,EAAM,MAAM,CAAC,EAC1B,MAAO,CAACE,EAAGD,CAAC,EAAE,OAAOE,CAAI,CAC3B,CALwBC,EAAAL,EAAA,WDUT,SAARM,GAA6BC,EAAK,CAAE,MAAAC,EAAQ,UAAW,IAAAC,EAAM,EAAM,EAAI,CAAC,EAAG,CAChF,IAAMC,KAAM,GAAAC,SAAcJ,EAAK,iBAAiB,MAAK,GAAAI,SAAc,aAAa,EAChF,GAAI,CAACD,EAAK,OAEV,GAAM,CAAE,MAAAE,CAAM,EAAIF,EAClB,GAAI,CAACE,EAAO,OAEZ,IAAIC,EAAQD,EAAM,KAAK,EAAE,MAAM,QAAQ,EACvC,OAAKH,IAAKI,EAAQA,EAAM,IAAIC,GAAK,OAAOA,CAAC,CAAC,GAEtCN,IAAU,YAAWK,EAAQE,EAAQF,CAAK,GAEvCA,CACT,CAbwBG,EAAAV,GAAA,eEXxB,IAAAW,GAA0B,SAGX,SAARC,GAA6BC,EAAK,CAAE,MAAAC,EAAQ,UAAW,IAAAC,EAAM,EAAM,EAAI,CAAC,EAAG,CAChF,IAAMC,KAAM,GAAAC,SAAcJ,EAAK,iBAAiB,MAAK,GAAAI,SAAc,aAAa,EAChF,GAAI,CAACD,EAAK,OAEV,GAAM,CAAE,MAAAE,CAAM,EAAIF,EAClB,GAAI,CAACE,EAAO,OAEZ,IAAIC,EAAQD,EAAM,KAAK,EAAE,MAAM,QAAQ,EACvC,OAAKH,IAAKI,EAAQA,EAAM,IAAIC,GAAK,OAAOA,CAAC,CAAC,GAEtCN,IAAU,YAAWK,EAAQE,EAAQF,CAAK,GAEvCA,CACT,CAbwBG,EAAAV,GAAA,eNUT,SAARW,GAA0BC,EAAK,CAAE,IAAAC,EAAM,EAAM,EAAI,CAAC,EAAG,CAC1D,IAAMC,EAAMH,EAAaC,CAAG,EAC5B,GAAI,CAACE,EAAK,OAEV,GAAM,CAAE,MAAAC,CAAM,EAAID,EAClB,GAAI,CAACC,EAAO,OAEZ,IAAMC,EAAcA,GAAiBD,EAAO,CAAE,IAAAF,CAAI,CAAC,EACnD,GAAI,CAACG,EAAa,OAElB,IAAMC,EAAcA,GAAiBF,EAAO,CAAE,IAAAF,CAAI,CAAC,EACnD,GAAI,CAACI,EAAa,OAElB,GAAID,EAAY,SAAWC,EAAY,OACrC,MAAM,IAAI,MAAM,8EAA8E,EAKhG,MAAO,CAAE,OAFG,GAAAC,SAAaJ,EAAI,MAAO,SAAS,GAAK,KAEpC,QAAS,CAACE,EAAaC,CAAW,CAAE,CACpD,CApBwBE,EAAAR,GAAA,YDTT,SAARS,EAA0BC,EAAK,CAAE,OAAAC,EAAS,SAAU,EAAI,CAAC,EAAG,CACjE,IAAIC,EAAQ,UACRC,EAAM,GACNF,IAAW,YACbC,EAAQ,WAGV,IAAME,EAAMC,GAAcL,EAAK,CAAE,MAAAE,EAAO,IAAAC,CAAI,CAAC,EAE7C,GAAI,CAACC,EAAK,OAEV,GAAI,CAACH,GAAUA,IAAW,UAAW,OAAOG,EAE5C,GAAM,CAAE,IAAAE,EAAK,QAAAC,CAAQ,EAAIH,EAEnB,CAACI,EAAaC,CAAW,EAAIF,EAEnC,GAAIN,IAAW,QAAUA,IAAW,UAAW,CAC7C,GAAM,CAACS,EAAMC,EAAM,GAAGC,CAAe,EAAIJ,EACnC,CAACK,EAAMC,EAAM,GAAGC,CAAe,EAAIN,EACzC,GAAIR,IAAW,OACb,MAAO,CAACU,EAAMD,EAAM,GAAGE,EAAiBE,EAAMD,EAAM,GAAGE,CAAe,EACjE,GAAId,IAAW,UAAW,CAC/B,IAAMe,EAAO,CAACL,EAAMD,EAAMI,EAAMD,CAAI,EAC9BI,EAAU,CACd,KAAM,UACN,KAAAD,EACA,WAAY,CAAC,EACb,SAAU,CACR,KAAM,UACN,eAAa,GAAAE,SAAcF,CAAI,CACjC,CACF,EACA,OAAIV,IACFW,EAAQ,WAAW,QAAUX,EAC7BW,EAAQ,IAAM,CACZ,KAAM,OACN,WAAY,CACV,KAAMX,CACR,CACF,GAEKW,CACT,CACF,CACF,CA7CwBE,EAAApB,EAAA,YQJxB,IAAAqB,GAAyB,SCAzB,IAAOC,EAAQ,CAAC,iBAAkB,aAAc,iBAAkB,aAAc,iBAAkB,YAAY,ECG/F,SAARC,EAA4BC,EAAK,CACtC,OAAOC,EAAKD,EAAKE,CAAqB,EAAE,CAAC,CAC3C,CAFwBC,EAAAJ,EAAA,cCHxB,IAAAK,GAAyB,SCEV,SAARC,EAA6BC,EAAK,CACvC,OAAOC,EAAKD,EAAK,CAAC,kBAAmB,cAAe,kBAAmB,aAAa,CAAC,EAAE,CAAC,CAC1F,CAFwBE,EAAAH,EAAA,eCFT,SAARI,EAAuBC,EAAKC,EAAY,EAAG,CAChD,IAAMC,EAAS,CAAC,EAChB,QAAS,EAAI,EAAG,EAAIF,EAAI,OAAQ,GAAKC,EAAW,CAC9C,IAAMF,EAAQ,CAAC,EACf,QAASI,EAAI,EAAGA,EAAIF,EAAWE,IAC7BJ,EAAM,KAAKC,EAAI,EAAIG,CAAC,CAAC,EAEvBD,EAAO,KAAKH,CAAK,CACnB,CACA,OAAOG,CACT,CAVwBE,EAAAL,EAAA,SFeT,SAARM,EAA6BC,EAAK,CAAE,MAAAC,EAAQ,GAAO,MAAAC,EAAQ,UAAW,IAAAC,EAAM,EAAM,EAAI,CAAC,EAAG,CAC/F,IAAMC,EAAML,EAAgBC,CAAG,EAC/B,GAAI,CAACI,EAAK,OAEV,GAAM,CAAE,MAAAC,CAAM,EAAID,EAClB,GAAI,CAACC,EAAO,OAEZ,IAAIC,EAAOD,EAAM,KAAK,EAAE,MAAM,YAAY,EACrCF,IACCF,GAAO,QAAQ,IAAI,mDAAmD,EAC1EK,EAAOA,EAAK,IAAIC,GAAK,OAAOA,CAAC,CAAC,GAGhC,IAAMC,KAAe,GAAAC,SAAaL,EAAK,cAAc,EAC/CM,EAAYF,EAAe,OAAOA,CAAY,EAAI,EACpDG,EAASC,EAAMN,EAAMI,CAAS,EAMlC,OAJIR,IAAU,YACZS,EAASA,EAAO,IAAIE,GAAMC,EAAQD,CAAE,CAAC,GAGnCF,EAAO,SAAW,EACbA,EAAO,CAAC,EAERA,CAEX,CA1BwBI,EAAAhB,EAAA,eGfxB,IAAAiB,GAAyB,SCEV,SAARC,GAA0BC,EAAK,CACpC,OAAOC,EAAKD,EAAK,CAAC,cAAe,UAAW,cAAe,UAAW,cAAe,SAAS,CAAC,CACjG,CAFwBE,EAAAH,GAAA,YCAT,SAARI,EAAyBC,EAAK,CACnC,OAAOC,GAAaD,CAAG,EAAE,CAAC,CAC5B,CAFwBE,EAAAH,EAAA,WFYT,SAARI,EAAyBC,EAAK,CAAE,MAAAC,EAAQ,GAAO,MAAAC,EAAQ,UAAW,IAAAC,EAAM,EAAM,EAAI,CAAC,EAAG,CAC3F,IAAMC,EAAML,EAAYC,CAAG,EAC3B,GAAI,CAACI,EAAK,OAEV,GAAM,CAAE,MAAAC,CAAM,EAAID,EAClB,GAAI,CAACC,EAAO,OAEZ,IAAIC,EAAOD,EAAM,KAAK,EAAE,MAAM,YAAY,EACrCF,IACCF,GAAO,QAAQ,IAAI,mDAAmD,EAC1EK,EAAOA,EAAK,IAAIC,GAAK,OAAOA,CAAC,CAAC,GAGhC,IAAMC,KAAe,GAAAC,SAAaL,EAAK,cAAc,EAC/CM,EAAYF,EAAe,OAAOA,CAAY,EAAI,EACpDG,EAASC,EAAMN,EAAMI,CAAS,EAElC,OAAIR,IAAU,YACZS,EAASA,EAAO,IAAIE,GAAMC,EAAQD,CAAE,CAAC,GAGhCF,CACT,CAtBwBI,EAAAhB,EAAA,WNRT,SAARiB,EAA4BC,EAAK,CAAE,MAAAC,EAAO,MAAAC,EAAO,IAAAC,CAAI,EAAI,CAAC,EAAG,CAClE,IAAMC,EAAML,EAAeC,CAAG,EAC9B,GAAI,CAACI,EAAK,OAEV,GAAM,CAAE,MAAAC,CAAM,EAAID,EAClB,GAAI,CAACC,EAAO,OAIZ,IAAMC,EAAS,CACb,KAAM,aACN,OAJaC,EAAaF,EAAO,CAAE,MAAAJ,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,GAAKK,EAAiBH,EAAO,CAAE,MAAAJ,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,CAK1G,EAEMM,KAAU,GAAAC,SAAaN,EAAI,MAAO,SAAS,EACjD,OAAIH,GAAO,QAAQ,IAAI,uCAAwC,GAAG,EAC9DQ,IACFH,EAAO,IAAMG,GAGRH,CACT,CArBwBK,EAAAZ,EAAA,cSJT,SAARa,EAA4BC,EAAK,CAAE,OAAAC,EAAS,SAAU,EAAI,CAAE,OAAQ,UAAW,EAAG,CACvF,GAAIA,IAAW,UAAW,CACxB,GAAM,CAAE,OAAAC,EAAQ,IAAAC,CAAI,EAAIJ,EAAgBC,EAAK,CAAE,MAAO,SAAU,CAAC,EAC3DI,EAAU,CACd,KAAM,UACN,WAAY,CAAC,EACb,SAAU,CACR,KAAM,aACN,YAAaF,CACf,CACF,EACA,OAAIC,IACFC,EAAQ,WAAW,QAAUD,EAC7BC,EAAQ,IAAM,CACZ,KAAM,OACN,WAAY,CACV,KAAMD,CACR,CACF,GAEKC,CACT,KAEE,QADYL,EAAgBC,CAAG,CAGnC,CAzBwBK,EAAAN,EAAA,cCFxB,IAAAO,GAAyB,SCAzB,IAAOC,EAAQ,CAAC,YAAa,QAAS,YAAa,OAAO,ECG3C,SAARC,GAAwBC,EAAK,CAClC,OAAOC,EAAKD,EAAKE,CAAe,CAClC,CAFwBC,EAAAJ,GAAA,UCDT,SAARK,EAAuBC,EAAK,CACjC,OAAOC,GAAWD,CAAG,EAAE,CAAC,CAC1B,CAFwBE,EAAAH,EAAA,SCFxB,IAAAI,GAA0B,SAWX,SAARC,GAAqBC,EAAK,CAAE,MAAAC,EAAQ,UAAW,IAAAC,EAAM,EAAM,EAAI,CAAC,EAAG,CACxE,IAAMC,KAAM,GAAAC,SAAcJ,EAAK,SAAS,MAAK,GAAAI,SAAc,KAAK,EAChE,GAAI,CAACD,EAAK,OAEV,GAAM,CAAE,MAAAE,CAAM,EAAIF,EAClB,GAAI,CAACE,EAAO,OAEZ,IAAIC,EAAQD,EAAM,KAAK,EAAE,MAAM,QAAQ,EACvC,OAAKH,IAAKI,EAAQA,EAAM,IAAIC,GAAK,OAAOA,CAAC,CAAC,GAEtCN,IAAU,YAAWK,EAAQE,EAAQF,CAAK,GAEvCA,CACT,CAbwBG,EAAAV,GAAA,OJJT,SAARW,GAAuBC,EAAK,CAAE,MAAAC,EAAO,IAAAC,CAAI,EAAI,CAAC,EAAG,CACtD,IAAMC,EAAMJ,EAAUC,CAAG,EACzB,GAAI,CAACG,EAAK,OAEV,GAAM,CAAE,MAAAC,CAAM,EAAID,EAClB,GAAI,CAACC,EAAO,OAEZ,IAAMC,EAAQC,GAASF,EAAO,CAAE,MAAAH,EAAO,IAAAC,CAAI,CAAC,IAAMK,EAAaH,EAAO,CAAE,MAAAH,EAAO,IAAAC,CAAI,CAAC,GAAK,CAAC,GAAG,CAAC,GAAKM,EAAiBJ,EAAO,CAAE,MAAAH,EAAO,IAAAC,CAAI,CAAC,EAEzI,GAAI,CAACG,GAASA,EAAM,SAAW,EAAG,OAElC,GAAM,CAACI,EAAGC,EAAGC,EAAI,IAAI,EAAIN,EAEzB,MAAO,CACL,KAAM,QACN,OAAK,GAAAO,SAAaT,EAAI,MAAO,SAAS,GAAK,KAC3C,MAAOE,EACP,EAAAK,EACA,EAAAD,EACA,EAAAE,CACF,CACF,CArBwBE,EAAAd,GAAA,SKLT,SAARe,EAAuBC,EAAK,CAAE,OAAAC,EAAS,SAAU,EAAI,CAAE,OAAQ,SAAU,EAAG,CACjF,IAAMC,EAAMH,GAAWC,CAAG,EAE1B,GAAI,CAACC,GAAUA,IAAW,UAAW,OAAOC,EAE5C,GAAM,CAAE,EAAAC,EAAG,EAAAC,EAAG,IAAAC,CAAI,EAAIH,EAEtB,GAAID,IAAW,UAAW,CACxB,IAAMK,EAAU,CACd,KAAM,UACN,WAAY,CAAC,EACb,SAAU,CACR,KAAM,QACN,YAAa,CAACH,EAAGC,CAAC,CACpB,CACF,EACA,OAAIC,IACFC,EAAQ,WAAW,QAAUD,EAC7BC,EAAQ,IAAM,CACZ,KAAM,OACN,WAAY,CACV,KAAMD,CACR,CACF,GAEKC,CACT,CACF,CA3BwBC,EAAAR,EAAA,SCFxB,IAAAS,GAAyB,SCEV,SAARC,EAAiCC,EAAK,CAC3C,OAAOC,EAAKD,EAAK,CAAC,sBAAuB,kBAAmB,sBAAuB,kBAAmB,sBAAuB,iBAAiB,CAAC,CACjJ,CAFwBE,EAAAH,EAAA,mBCAT,SAARI,EAA2BC,EAAK,CACrC,OAAOC,EAAKD,EAAK,CAAC,eAAgB,WAAY,eAAgB,UAAU,CAAC,CAC3E,CAFwBE,EAAAH,EAAA,aCFxB,IAAOI,EAAQ,CAAC,cAAe,UAAW,cAAe,SAAS,ECGnD,SAARC,GAAyBC,EAAK,CACnC,OAAOC,EAAKD,EAAKE,CAAiB,CACpC,CAFwBC,EAAAJ,GAAA,WCDT,SAARK,EAAyBC,EAAK,CACnC,OAAOD,GAAaC,CAAG,EAAE,CAAC,CAC5B,CAFwBC,EAAAF,EAAA,WCAT,SAARG,GAA2BC,EAAK,CACrC,OAAOC,EAAKD,EAAK,CAAC,eAAgB,WAAY,eAAgB,UAAU,CAAC,CAC3E,CAFwBE,EAAAH,GAAA,aCAT,SAARI,GAA0BC,EAAK,CACpC,OAAOC,GAAcD,CAAG,EAAE,CAAC,CAC7B,CAFwBE,EAAAH,GAAA,YCFxB,IAAAI,GAAyB,SCEV,SAARC,GAA4BC,EAAK,CACtC,OAAOC,EAAKD,EAAK,CAAC,iBAAkB,aAAc,iBAAkB,aAAc,iBAAkB,YAAY,CAAC,EAAE,CAAC,CACtH,CAFwBE,EAAAH,GAAA,cDST,SAARI,EAA4BC,EAAK,CAAE,MAAAC,EAAO,MAAAC,EAAQ,UAAW,IAAAC,CAAI,EAAI,CAAC,EAAG,CAC9E,IAAMC,EAAML,GAAeC,CAAG,EAC9B,GAAI,CAACI,EAAK,OAEV,GAAM,CAAE,MAAAC,CAAM,EAAID,EAClB,GAAI,CAACC,EAAO,OAEZ,IAAMC,EAAiBC,EAAgBF,CAAK,EAC5C,GAAIC,EACF,OAAOC,EAAiBD,EAAe,MAAO,CAAE,MAAAL,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,EAGrE,IAAMK,EAAaC,EAAYT,CAAG,EAClC,GAAIQ,EACF,OAAOC,EAAaD,EAAW,MAAO,CAAE,MAAAP,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,EAI7D,IAAIO,EAAOL,EAAM,KAAK,EAAE,MAAM,YAAY,EACrCF,IACCF,GAAO,QAAQ,IAAI,mDAAmD,EAC1ES,EAAOA,EAAK,IAAIC,GAAK,OAAOA,CAAC,CAAC,GAGhC,IAAMC,KAAe,GAAAC,SAAaT,EAAK,cAAc,EAC/CU,EAAYF,EAAe,OAAOA,CAAY,EAAI,EACpDG,EAASC,EAAMN,EAAMI,CAAS,EAElC,OAAIZ,IAAU,YACZa,EAASA,EAAO,IAAIE,GAAMC,EAAQD,CAAE,CAAC,GAGhCF,CACT,CAjCwBI,EAAApB,EAAA,cERT,SAARqB,GAA0BC,EAAK,CAAE,MAAAC,EAAO,MAAAC,EAAO,IAAAC,CAAI,EAAI,CAAC,EAAG,CAChE,IAAMC,EAAML,GAAaC,CAAG,EAC5B,GAAI,CAACI,EAAK,OAEV,GAAM,CAAE,MAAAC,CAAM,EAAID,EAClB,GAAKC,EAEL,OAAOC,EAAWD,EAAO,CAAE,MAAAJ,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,CAChD,CARwBI,EAAAR,GAAA,YCDT,SAARS,GAAiCC,EAAK,CAC3C,OAAOD,EAAoBC,CAAG,EAAE,CAAC,CACnC,CAFwBC,EAAAF,GAAA,mBCCT,SAARG,GAAiCC,EAAK,CAAE,MAAAC,EAAO,MAAAC,EAAO,IAAAC,CAAI,EAAI,CAAC,EAAG,CACvE,IAAMC,EAAMC,GAAoBL,EAAI,KAAK,EACzC,GAAI,CAACI,EAAK,OAEV,GAAM,CAAE,MAAAE,CAAM,EAAIF,EAClB,GAAKE,EAEL,OAAOC,EAAWD,EAAO,CAAE,MAAAL,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,CAChD,CARwBK,EAAAT,GAAA,mBCDT,SAARU,GAA0BC,EAAK,CACpC,OAAOC,EAAcD,CAAG,EAAE,CAAC,CAC7B,CAFwBE,EAAAH,GAAA,YCCT,SAARI,GAA0BC,EAAK,CAAE,MAAAC,EAAO,MAAAC,EAAO,IAAAC,CAAI,EAAI,CAAC,EAAG,CAChE,IAAMC,EAAML,GAAaC,CAAG,EAC5B,GAAI,CAACI,EAAK,OAEV,GAAM,CAAE,MAAAC,CAAM,EAAID,EAClB,GAAKC,EAEL,OAAOC,EAAWD,EAAO,CAAE,MAAAJ,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,CAChD,CARwBI,EAAAR,GAAA,YCDT,SAARS,GAAiCC,EAAK,CAC3C,OAAOC,EAAKD,EAAK,CAAC,sBAAuB,kBAAmB,sBAAuB,kBAAmB,sBAAuB,iBAAiB,CAAC,EAAE,CAAC,CACpJ,CAFwBE,EAAAH,GAAA,mBCCT,SAARI,GAAiCC,EAAK,CAAE,MAAAC,EAAO,MAAAC,EAAO,IAAAC,CAAI,EAAI,CAAC,EAAG,CACvE,IAAMC,EAAML,GAAoBC,CAAG,EACnC,GAAI,CAACI,EAAK,OAEV,GAAM,CAAE,MAAAC,CAAM,EAAID,EAClB,GAAKC,EAEL,OAAOC,EAAWD,EAAO,CAAE,MAAAJ,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,CAChD,CARwBI,EAAAR,GAAA,mBhBOT,SAARS,EAAyBC,EAAK,CAAE,MAAAC,EAAO,MAAAC,EAAO,IAAAC,CAAI,EAAI,CAAC,EAAG,CAC/D,IAAMC,EAAML,EAAYC,CAAG,EAC3B,GAAI,CAACI,EAAK,OAEV,GAAM,CAAE,MAAAC,CAAM,EAAID,EAClB,GAAI,CAACC,EAAO,OAEZ,IAAMC,EAAWA,GAAcN,EAAK,CAAE,MAAAC,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,GAAKI,GAAqBP,EAAK,CAAE,MAAAC,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,EAEzGK,EAAQC,EAAcT,CAAG,EAAE,IAAIU,GAAYA,GAAcA,EAAU,CAAE,MAAAT,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,CAAC,EACzFK,EAAM,SAAW,IAEnBA,EAAQG,EAAoBX,CAAG,EAAE,IAAIY,GAAYC,GAAqBD,EAAU,CAAE,MAAAX,EAAO,MAAAC,EAAO,IAAAC,CAAI,CAAC,CAAC,GAMxG,IAAMW,EAAS,CACb,KAAM,UACN,MAJY,CAACR,CAAQ,EAAE,OAAOE,CAAK,CAKrC,EAEMO,KAAU,GAAAC,SAAaZ,EAAI,MAAO,SAAS,EACjD,OAAIH,GAAO,QAAQ,IAAI,uCAAwC,GAAG,EAC9Dc,IACFD,EAAO,IAAMC,GAGRD,CACT,CA9BwBG,EAAAlB,EAAA,WiBRT,SAARmB,EAAyBC,EAAK,CAAE,OAAAC,EAAS,SAAU,EAAI,CAAC,EAAG,CAChE,GAAIA,IAAW,UAAW,CACxB,GAAM,CAAE,MAAAC,EAAO,IAAAC,CAAI,EAAIJ,EAAaC,EAAK,CAAE,MAAO,SAAU,CAAC,EAEvDI,EAAU,CACd,KAAM,UACN,WAAY,CAAC,EACb,SAAU,CACR,KAAM,UACN,YAAaF,CACf,CACF,EAEA,OAAIC,IACFC,EAAQ,WAAW,QAAUD,EAC7BC,EAAQ,IAAM,CACZ,KAAM,OACN,WAAY,CACV,KAAMD,CACR,CACF,GAGKC,CACT,KAGE,QAFYL,EAAaC,CAAG,CAIhC,CA7BwBK,EAAAN,EAAA,WCQT,SAARO,GAA0BC,EAAK,CAAE,OAAAC,EAAS,SAAU,EAAI,CAAE,OAAQ,SAAU,EAAG,CACpF,IAAMC,EAAWA,EAAaF,CAAG,EACjC,GAAIE,EAAU,CACZ,IAAMC,EAASC,EAASF,EAAS,MAAO,CAAE,OAAAD,CAAO,CAAC,EAClD,GAAIE,EACF,OAAOA,CAEX,CAEA,IAAME,EAAaC,EAAeN,CAAG,EACrC,GAAIK,EAAY,CACd,IAAMF,EAASG,EAAWD,EAAW,MAAO,CAAE,OAAAJ,CAAO,CAAC,EACtD,GAAIE,EACF,OAAOA,CAEX,CAEA,IAAMI,EAAQC,EAAUR,CAAG,EAC3B,GAAIO,EAAO,CACT,IAAMJ,EAASK,EAAMD,EAAM,MAAO,CAAE,OAAAN,CAAO,CAAC,EAC5C,GAAIE,EACF,OAAOA,CAEX,CAEA,IAAMM,EAAUC,EAAYV,CAAG,EAC/B,GAAIS,EAAS,CACX,IAAMN,EAASO,EAAQD,EAAQ,MAAO,CAAE,OAAAR,CAAO,CAAC,EAChD,GAAIE,EACF,OAAOA,CAEX,CACF,CAhCwBQ,EAAAZ,GAAA,YCVxB,IAAAa,GAA2B,UAEZ,SAARC,GAAsBC,EAAKC,EAAO,CACvC,IAAIC,EAAO,CAAC,EACZ,QAAS,EAAI,EAAG,EAAID,EAAM,OAAQ,IAAK,CACrC,IAAME,EAAOF,EAAM,CAAC,EACpBC,EAAOA,EAAK,UAAO,GAAAE,SAAeJ,EAAKG,CAAI,CAAC,CAC9C,CACA,OAAOD,CACT,CAPwBG,EAAAN,GAAA,QCKxB,IAAIO,GAGW,SAARC,GAA4BC,EAAK,CACtC,OAAKF,KAAoBA,GAAqBG,EAAmB,OAAOC,CAAqB,EAAE,OAAOC,CAAe,EAAE,OAAOC,CAAiB,GACxIC,GAAQL,EAAKF,EAAkB,EAAE,IAAIQ,GAAOA,EAAI,KAAK,CAC9D,CAHwBC,EAAAR,GAAA",
  "names": ["require_polygon", "__commonJSMin", "exports", "module", "polygon", "x0", "y0", "x1", "y1", "__name", "require_get_attribute", "__commonJSMin", "exports", "module", "getAttribute", "tag", "attributeName", "options", "debug", "xml", "pattern", "match", "__name", "require_index_of_match", "__commonJSMin", "exports", "module", "indexOfMatch", "xml", "pattern", "startIndex", "match", "__name", "require_index_of_match_end", "__commonJSMin", "exports", "module", "indexOfMatchEnd", "xml", "pattern", "startIndex", "match", "__name", "require_count_substring", "__commonJSMin", "exports", "module", "countSubstring", "string", "substring", "pattern", "match", "__name", "require_find_tag_by_name", "__commonJSMin", "exports", "module", "indexOfMatch", "indexOfMatchEnd", "countSubstring", "findTagByName", "xml", "tagName", "options", "debug", "nested", "startIndex", "start", "afterStart", "relativeEnd", "selfClosing", "openings", "closings", "clip", "end", "outer", "inner", "__name", "require_find_tags_by_name", "__commonJSMin", "exports", "module", "findTagByName", "findTagsByName", "xml", "tagName", "options", "tags", "debug", "nested", "startIndex", "tag", "__name", "import_polygon", "import_get_attribute", "import_find_tags_by_name", "find", "xml", "names", "i", "name", "tags", "findTagsByName", "__name", "Envelope_default", "envelope", "xml", "find", "Envelope_default", "__name", "import_find_tag_by_name", "reorder", "point", "y", "x", "rest", "__name", "lowerCorner", "xml", "order", "raw", "tag", "findTagByName", "inner", "point", "n", "reorder", "__name", "import_find_tag_by_name", "upperCorner", "xml", "order", "raw", "tag", "findTagByName", "inner", "point", "n", "reorder", "__name", "envelope", "xml", "raw", "tag", "inner", "lowerCorner", "upperCorner", "getAttribute", "__name", "Envelope", "xml", "format", "order", "raw", "obj", "envelope", "srs", "corners", "lowerCorner", "upperCorner", "ymin", "xmin", "lowerCornerRest", "ymax", "xmax", "upperCornerRest", "bbox", "feature", "bboxToPolygon", "__name", "import_get_attribute", "LineString_default", "LineString", "xml", "find", "LineString_default", "__name", "import_get_attribute", "coordinates", "xml", "find", "__name", "chunk", "arr", "chunkSize", "result", "c", "__name", "coordinates", "xml", "debug", "order", "raw", "tag", "inner", "nums", "n", "srsDimension", "getAttribute", "chunkSize", "points", "chunk", "pt", "reorder", "__name", "import_get_attribute", "posLists", "xml", "find", "__name", "posList", "xml", "posLists", "__name", "posList", "xml", "debug", "order", "raw", "tag", "inner", "nums", "n", "srsDimension", "getAttribute", "chunkSize", "points", "chunk", "pt", "reorder", "__name", "LineString", "xml", "debug", "order", "raw", "tag", "inner", "result", "posList", "coordinates", "srsName", "getAttribute", "__name", "LineString", "xml", "format", "coords", "srs", "feature", "__name", "import_get_attribute", "Point_default", "Points", "xml", "find", "Point_default", "__name", "Point", "xml", "Points", "__name", "import_find_tag_by_name", "pos", "xml", "order", "raw", "tag", "findTagByName", "inner", "point", "n", "reorder", "__name", "Point", "xml", "debug", "raw", "tag", "inner", "point", "pos", "posList", "coordinates", "y", "x", "z", "getAttribute", "__name", "Point", "xml", "format", "obj", "x", "y", "srs", "feature", "__name", "import_get_attribute", "innerBoundaries", "xml", "find", "__name", "interiors", "xml", "find", "__name", "Polygon_default", "Polygon", "xml", "find", "Polygon_default", "__name", "Polygon", "xml", "__name", "exteriors", "xml", "find", "__name", "exterior", "xml", "exteriors", "__name", "import_get_attribute", "LinearRing", "xml", "find", "__name", "LinearRing", "xml", "debug", "order", "raw", "tag", "inner", "coordinatesTag", "coordinates", "posListTag", "posList", "nums", "n", "srsDimension", "getAttribute", "chunkSize", "points", "chunk", "pt", "reorder", "__name", "exterior", "xml", "debug", "order", "raw", "tag", "inner", "LinearRing", "__name", "innerBoundaries", "xml", "__name", "innerBoundaryIs", "xml", "debug", "order", "raw", "tag", "innerBoundaries", "inner", "LinearRing", "__name", "interior", "xml", "interiors", "__name", "interior", "xml", "debug", "order", "raw", "tag", "inner", "LinearRing", "__name", "outerBoundaryIs", "xml", "find", "__name", "outerBoundaryIs", "xml", "debug", "order", "raw", "tag", "inner", "LinearRing", "__name", "Polygon", "xml", "debug", "order", "raw", "tag", "inner", "exterior", "outerBoundaryIs", "holes", "interiors", "interior", "innerBoundaries", "boundary", "innerBoundaryIs", "result", "srsName", "getAttribute", "__name", "Polygon", "xml", "format", "rings", "srs", "feature", "__name", "Geometry", "xml", "format", "envelope", "result", "Envelope", "lineString", "LineString", "point", "Point", "polygon", "Polygon", "__name", "import_find_tags_by_name", "find", "xml", "names", "tags", "name", "findTagsByName", "__name", "GEOMETRY_TAG_NAMES", "geometries", "xml", "Envelope_default", "LineString_default", "Point_default", "Polygon_default", "find", "tag", "__name"]
}

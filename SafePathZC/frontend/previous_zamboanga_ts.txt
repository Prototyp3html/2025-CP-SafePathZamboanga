// OpenStreetMap-based location search for Zamboanga City
export interface ZamboCityLocation {
  name: string;
  displayName: string;
  lat: number;
  lng: number;
  type: string;
  importance?: number;
  place_id?: string;
  osm_type?: string;
  osm_id?: string;
  boundingbox?: [string, string, string, string];
}

// OpenStreetMap Nominatim API response interface
interface NominatimResult {
  place_id: string;
  licence: string;
  osm_type: string;
  osm_id: string;
  boundingbox: [string, string, string, string];
  lat: string;
  lon: string;
  display_name: string;
  class: string;
  type: string;
  importance: number;
  icon?: string;
}

// Search locations using OpenStreetMap Nominatim API
export async function searchZamboCityLocations(
  query: string,
  limit: number = 10
): Promise<ZamboCityLocation[]> {
  if (!query || query.trim().length < 2) {
    return [];
  }

  try {
    const searchQuery = encodeURIComponent(`${query.trim()}, Zamboanga City, Philippines`);
    const nominatimUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${searchQuery}&limit=${limit}&countrycodes=ph&addressdetails=1&extratags=1`;

    const response = await fetch(nominatimUrl, {
      headers: {
        'User-Agent': 'SafePathZamboanga/1.0 (https://safepath-zamboanga.com)'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const results: NominatimResult[] = await response.json();

    // Filter and format results for Zamboanga City
    const zamboCityResults = results
      .filter(result => {
        const displayName = result.display_name.toLowerCase();
        return displayName.includes('zamboanga') || 
               displayName.includes('zamboanga city') ||
               displayName.includes('zamboanga del sur');
      })
      .map(result => ({
        name: result.display_name.split(',')[0].toUpperCase(),
        displayName: result.display_name.split(',')[0],
        lat: parseFloat(result.lat),
        lng: parseFloat(result.lon),
        type: result.type,
        importance: result.importance,
        place_id: result.place_id,
        osm_type: result.osm_type,
        osm_id: result.osm_id,
        boundingbox: result.boundingbox
      }))
      .sort((a, b) => (b.importance || 0) - (a.importance || 0));

    return zamboCityResults;
  } catch (error) {
    console.error('Error searching locations:', error);
    
    // Fallback to basic locations if API fails
    return getBasicZamboCityLocations(query, limit);
  }
}

// Basic fallback locations for when OpenStreetMap is unavailable
function getBasicZamboCityLocations(query: string, limit: number): ZamboCityLocation[] {
  const basicLocations: ZamboCityLocation[] = [
    {
      name: "ZAMBOANGA CITY HALL",
      displayName: "Zamboanga City Hall",
      lat: 6.9214,
      lng: 122.079,
      type: "government"
    },
    {
      name: "ATENEO DE ZAMBOANGA",
      displayName: "Ateneo de Zamboanga University",
      lat: 6.9167,
      lng: 122.0834,
      type: "educational"
    },
    {
      name: "ZAMBOANGA AIRPORT",
      displayName: "Zamboanga International Airport",
      lat: 6.9224,
      lng: 122.0596,
      type: "transport"
    },
    {
      name: "KCC MALL",
      displayName: "KCC Mall of Zamboanga",
      lat: 6.9156,
      lng: 122.0789,
      type: "commercial"
    },
    {
      name: "WMSU",
      displayName: "Western Mindanao State University",
      lat: 6.9078,
      lng: 122.0656,
      type: "educational"
    },
    {
      name: "ZAMBOANGA PORT",
      displayName: "Zamboanga Port",
      lat: 6.9244,
      lng: 122.0816,
      type: "transport"
    }
  ];

  const searchTerm = query.toLowerCase().trim();
  
  return basicLocations
    .filter(location => 
      location.name.toLowerCase().includes(searchTerm) ||
      location.displayName.toLowerCase().includes(searchTerm)
    )
    .slice(0, limit);
}

// Get location details by coordinates (reverse geocoding)
export async function getLocationByCoordinates(
  lat: number,
  lng: number
): Promise<ZamboCityLocation | null> {
  try {
    const nominatimUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1`;

    const response = await fetch(nominatimUrl, {
      headers: {
        'User-Agent': 'SafePathZamboanga/1.0 (https://safepath-zamboanga.com)'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result: NominatimResult = await response.json();

    return {
      name: result.display_name.split(',')[0].toUpperCase(),
      displayName: result.display_name.split(',')[0],
      lat: parseFloat(result.lat),
      lng: parseFloat(result.lon),
      type: result.type,
      importance: result.importance,
      place_id: result.place_id,
      osm_type: result.osm_type,
      osm_id: result.osm_id,
      boundingbox: result.boundingbox
    };
  } catch (error) {
    console.error('Error getting location by coordinates:', error);
    return null;
  }
}